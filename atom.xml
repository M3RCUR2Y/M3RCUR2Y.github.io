<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M3RCUR2Y</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-05T16:47:12.318Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MERCURZY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端基础-html与css</title>
    <link href="http://example.com/2022/11/30/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-html%E4%B8%8Ecss/"/>
    <id>http://example.com/2022/11/30/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-html%E4%B8%8Ecss/</id>
    <published>2022-11-29T22:50:46.000Z</published>
    <updated>2022-12-05T16:47:12.318Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>内容来自“黑马程序员”(<a href="https://www.bilibili.com/video/BV1Tt4y1772f">https://www.bilibili.com/video/BV1Tt4y1772f</a>)</p></blockquote><h2 id="1、HTML元素"><a href="#1、HTML元素" class="headerlink" title="1、HTML元素"></a>1、HTML元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>整体称之为元素</p></li><li><p><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</p></li><li><p>标签包围起来的 Hello, world 称之为内容</p></li><li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p></li></ul><p>元素还可以有属性，如</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li></ul><p>元素之间可以嵌套，如</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误嵌套写法：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不包含内容的元素称之为空元素，如</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>img 作用是用来展示图片</li><li>src 属性用来指明图片路径</li></ul><h2 id="2、HTML页面"><a href="#2、HTML页面" class="headerlink" title="2、HTML页面"></a>2、HTML页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li><li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li><li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li></ul><h2 id="3、常见元素"><a href="#3、常见元素" class="headerlink" title="3、常见元素"></a>3、常见元素</h2><h3 id="1-文本"><a href="#1-文本" class="headerlink" title="1) 文本"></a>1) 文本</h3><h4 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4号标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5号标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6号标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>无序列表 unordered list</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多级列表</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    北京市</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    河北省</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>石家庄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>保定<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h4><p>锚，超链接</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网页地址&quot;</span>&gt;</span>超链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同页面锚点示例</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 锚点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>此处为TOP部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span>此处为CONTENT部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>此处为FOOT部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>点击链接到TOP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#content&quot;</span>&gt;</span>点击链接到CONTENT<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#foot&quot;</span>&gt;</span>点击链接到FOOT<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-多媒体"><a href="#2-多媒体" class="headerlink" title="2) 多媒体"></a>2) 多媒体</h3><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src 格式有 3 种</p><ul><li><p>文件地址</p></li><li><p>data URL，格式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure></li><li><p>object URL，需要配合 javascript 使用</p></li></ul><h4 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-表单"><a href="#3-表单" class="headerlink" title="3) 表单"></a>3) 表单</h3><h4 id="作用与语法"><a href="#作用与语法" class="headerlink" title="作用与语法"></a>作用与语法</h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;服务器地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方式&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;数据格式&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单项 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method 请求方式有 <ul><li>get （默认）提交时，数据跟在 URL 地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定请求体的数据格式<ul><li>application&#x2F;x-www-form-urlencoded（默认）</li><li>multipart&#x2F;form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有 name 属性的表单项数据，才会被发送给服务器</li></ul></li></ul><h4 id="常见的表单项"><a href="#常见的表单项" class="headerlink" title="常见的表单项"></a>常见的表单项</h4><p>文本框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uesrname&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>密码框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>隐藏框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日期框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多选</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;逛街&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、HTTP-请求"><a href="#4、HTTP-请求" class="headerlink" title="4、HTTP 请求"></a>4、HTTP 请求</h2><h3 id="1-请求组成"><a href="#1-请求组成" class="headerlink" title="1) 请求组成"></a>1) 请求组成</h3><p>请求由三部分组成</p><ol><li>请求行</li><li>请求头</li><li>请求体</li></ol><p>可以用 telnet 程序测试</p><h3 id="2-请求方式与数据格式"><a href="#2-请求方式与数据格式" class="headerlink" title="2) 请求方式与数据格式"></a>2) 请求方式与数据格式</h3><h4 id="get-请求示例"><a href="#get-请求示例" class="headerlink" title="get 请求示例"></a>get 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><ul><li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li></ul><h4 id="post-请求示例"><a href="#post-请求示例" class="headerlink" title="post 请求示例"></a>post 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure><p>application&#x2F;x-www-form-urlencoed 格式细节：</p><ul><li>参数分成名字和值，中间用 &#x3D; 分隔</li><li>多个参数使用 &amp; 进行分隔</li><li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li></ul><h4 id="json-请求示例"><a href="#json-请求示例" class="headerlink" title="json 请求示例"></a>json 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test3 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 25</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><p>json 对象格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure><p>其中属性值可以是</p><ul><li>字符串 “”</li><li>数字</li><li>true, false</li><li>null</li><li>对象</li><li>数组</li></ul><p>json 数组格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure><h4 id="multipart-请求示例"><a href="#multipart-请求示例" class="headerlink" title="multipart 请求示例"></a>multipart 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: multipart/form-data; boundary=123</span><br><span class="line">Content-Length: 125</span><br><span class="line"></span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">lisi</span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class="line"></span><br><span class="line">30</span><br><span class="line">--123--</span><br></pre></td></tr></table></figure><ul><li>boundary&#x3D;123 用来定义分隔符</li><li>起始分隔符是 <code>--分隔符</code></li><li>结束分隔符是 <code>--分隔符--</code></li></ul><h4 id="数据格式小结"><a href="#数据格式小结" class="headerlink" title="数据格式小结"></a>数据格式小结</h4><p>客户端发送</p><ul><li>编码 <ul><li>application&#x2F;x-www-form-urlencoded ：url 编码</li><li>application&#x2F;json：utf-8 编码</li><li>multipart&#x2F;form-data：每部分编码可以不同</li></ul></li><li>表单只支持以 application&#x2F;x-www-form-urlencoded 和 multipart&#x2F;form-data 格式发送数据</li><li>文件上传需要用 multipart&#x2F;form-data 格式</li><li>js 代码可以支持任意格式发送数据</li></ul><p>服务端接收</p><ul><li>对 application&#x2F;x-www-form-urlencoded 和 multipart&#x2F;form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li><li>对于 applicaiton&#x2F;json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li></ul><h3 id="3-session-原理"><a href="#3-session-原理" class="headerlink" title="3) session 原理"></a>3) session 原理</h3><p>Http 无状态，有会话</p><ul><li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li><li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li></ul><p>服务端使用了 session 技术来暂存数据</p><p>存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /s1?name=zhang HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /s2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure><p>session 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line">participant Session</span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L -&gt;&gt; +Session : 存入用户名</span><br><span class="line">Session --&gt;&gt; -L: </span><br><span class="line">L --&gt;&gt; -Client: 登录成功</span><br><span class="line">end</span><br><span class="line">rect rgb(200, 190, 255)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求</span><br><span class="line">i -&gt;&gt; +Session : 获取用户名</span><br><span class="line">Session --&gt;&gt; -i : </span><br><span class="line">i -&gt;&gt; i: 用户名存在，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="4-jwt-原理"><a href="#4-jwt-原理" class="headerlink" title="4) jwt 原理"></a>4) jwt 原理</h3><p>jwt 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line"></span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rect rgb(150, 190, 155)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class="line">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>生成 token</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>校验 token</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /j2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure><h2 id="5、CSS"><a href="#5、CSS" class="headerlink" title="5、CSS"></a>5、CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1) 选择器"></a>1) 选择器</h3><ul><li><p>type 选择器 - 根据标签名进行匹配（元素选择器）</p></li><li><p>class 选择器 - 根据元素的 class 属性进行匹配</p></li><li><p>id 选择器  - 根据元素的 id 属性进行匹配</p></li></ul><h3 id="2-属性和值"><a href="#2-属性和值" class="headerlink" title="2) 属性和值"></a>2) 属性和值</h3><ul><li>background-color : red;</li><li>…</li><li>display</li></ul><h3 id="3-布局"><a href="#3-布局" class="headerlink" title="3) 布局"></a>3) 布局</h3><p>与布局相关的 html 元素</p><ul><li>div</li><li>template</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;内容来自“黑马程序员”(&lt;a href=&quot;https://www.bilibili.com/video/BV1Tt4y1772f&quot;&gt;https://www.bilibili.com/video/BV1Tt4y1772f&lt;/a&gt;)&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="自学笔记" scheme="http://example.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>网络工程设计02——ensp基础</title>
    <link href="http://example.com/2022/11/06/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A102/"/>
    <id>http://example.com/2022/11/06/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A102/</id>
    <published>2022-11-06T15:38:11.000Z</published>
    <updated>2022-11-10T21:24:19.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要用于快速熟悉ensp操作，完成网络工程设计拓扑设计部分，详细教程请参考：</p></blockquote><p><strong>数据传输网络-三层结构体系：</strong></p><ul><li><p><strong>核心层：</strong></p><p>核心层是互连网络的高速主干网，在设计中应增加冗余组件，使其具备高可靠性，能快速适应通信流量的变化。 设计核心层设备的功能时应避免使用数据包过滤、策略路由等降低转发速率的功能特性，使得核心层具有高速率、低延迟和良好的可管理性。核心层设备覆盖的地理范围不宜过大，连接的设备不宜过多，否则会使得网络的复杂度增大，导致网络性能降低。核心层应包括一条或多条连接外部网络的专用链路，使得可以高效地访问互联网。</p></li><li><p><strong>汇聚层：</strong></p><p>汇聚层是核心层与接入层之间的分界点，应实现资源访问控制和流量控制等功能。汇聚层应该对核心层隐藏接入层的详细信息，不管划分了多少个子网，汇聚层向核心路由器发布路由通告时，只通告各个子网汇聚后的超网地址。 如果局域网中运行了以太网和弹性分组环等不同类型的子网，或者运行了不同路由算法的区域网络，可以通过汇聚层设备完成路由汇总和协议转换功能。</p></li><li><p><strong>接入层：</strong></p><p>接入层提供网络接入服务，并解决本地网段内用户之间互相访问的需求，要提供足够的带宽，使得本地用户之间可以高速访问；接入层还应提供一部分管理功能，例如MAC地址认证、用户认证、计费管理等；接入层要负责收集用户信息（例如用户U地址、MAC地址、访问日志等），作为计费和排错的依据。</p></li></ul><blockquote><p>接口配置比较简单，正文中实验步骤都跳过了，不清楚可以百度</p></blockquote><h1 id="1、VRP基础操作"><a href="#1、VRP基础操作" class="headerlink" title="1、VRP基础操作"></a>1、VRP基础操作</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭信息提示</span></span><br><span class="line">undo info en</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看路由器基本信息</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;display version</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 display ip interface brief 命令查看接口与 IP 相关摘要信息</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]display ip interface brief</span><br><span class="line">dis ip int br</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看路由器配置信息</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;display ip routing-table</span><br></pre></td></tr></table></figure><h2 id="1-1、通过Telent登录系统"><a href="#1-1、通过Telent登录系统" class="headerlink" title="1.1、通过Telent登录系统"></a>1.1、通过Telent登录系统</h2><p>为了方便公司员工对机房设备进行远程管理和维护，需要在路由器上配置 Telnet 功能。为了提高网络安全性，用户在 Telnet 时使用密码认证，只有通过认证的用户才有权限登录设备。  </p><h3 id="拓扑及设备信息："><a href="#拓扑及设备信息：" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p><img src="https://img-blog.csdnimg.cn/460fc1b6910c445cae02aec280b92272.png" alt="请添加图片描述"></p><h3 id="1、配置-Telnet-的密码验证"><a href="#1、配置-Telnet-的密码验证" class="headerlink" title="1、配置 Telnet 的密码验证"></a>1、配置 Telnet 的密码验证</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置Telnet的密码验证</span></span><br><span class="line">[<span class="variable constant_">R1</span>]user-interface vty <span class="number">0</span> <span class="number">4</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ui-vty0-<span class="number">4</span>]authentication-mode password</span><br><span class="line"><span class="title class_">Please</span> configure the login password (maximum length <span class="number">16</span>):[此处输入密码]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在其他设备连接</span></span><br><span class="line">&lt;<span class="variable constant_">PC</span>-<span class="number">1</span>&gt;telnet <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Trying</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> ...</span><br><span class="line"><span class="title class_">Press</span> <span class="variable constant_">CTRL</span>+K to abor</span><br><span class="line"><span class="title class_">Connected</span> to <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> ...</span><br><span class="line"><span class="title class_">Login</span> authentication</span><br><span class="line"><span class="title class_">Password</span>:[此处输入密码] </span><br><span class="line"><span class="comment">//登录成功后，可以继续使用命令 display users 查看已经登录的用户信息。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]display users</span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Intf</span> <span class="title class_">Delay</span> <span class="title class_">Type</span> <span class="title class_">Network</span> <span class="title class_">Address</span> <span class="title class_">AuthenStatus</span> <span class="title class_">AuthorcmdFlag</span></span><br><span class="line">+ <span class="number">0</span> <span class="variable constant_">CON</span> <span class="number">0</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> no <span class="title class_">Username</span> : <span class="title class_">Unspecified</span></span><br><span class="line"><span class="number">34</span> <span class="variable constant_">VTY</span> <span class="number">0</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">26</span> <span class="variable constant_">TEL</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.2</span> pass no U</span><br><span class="line">sername : <span class="title class_">Unspecified</span></span><br><span class="line"><span class="number">35</span> <span class="variable constant_">VTY</span> <span class="number">1</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">30</span> <span class="variable constant_">TEL</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.1</span> pass no U</span><br><span class="line">sername : <span class="title class_">Unspecified</span></span><br></pre></td></tr></table></figure><h3 id="2、-配置-Telnet-区分不同用户的权限"><a href="#2、-配置-Telnet-区分不同用户的权限" class="headerlink" title="2、 配置 Telnet 区分不同用户的权限"></a>2、 配置 Telnet 区分不同用户的权限</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 R1 上配置 Telnet 的用户级别为 1（监控级）。普通员工仅使用密码登录设备，只能使用 display 等命令监控设备。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]user-interface vty <span class="number">0</span> <span class="number">4</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ui-vty0-<span class="number">4</span>]authentication-mode password</span><br><span class="line">[<span class="variable constant_">R1</span>-ui-vty0-<span class="number">4</span>]set authentication password cipher [此处输入密码]</span><br><span class="line">[<span class="variable constant_">R1</span>-ui-vty0-<span class="number">4</span>]user privilege level <span class="number">1</span></span><br></pre></td></tr></table></figure><p>默认情况下，VTY 用户界面的用户级别为 0（参观级），只能使用 ping、 tracert 等这些网络诊断命令。  配置完成后，将 R2 模拟成普通用户设备，测试到 R1 的 Telnet 连接。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="variable constant_">R2</span>&gt;telnet <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Trying</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> ...</span><br><span class="line"><span class="title class_">Press</span> <span class="variable constant_">CTRL</span>+K to abort</span><br><span class="line"><span class="title class_">Connected</span> to <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> ...</span><br><span class="line"><span class="title class_">Login</span> authentication</span><br><span class="line"><span class="title class_">Password</span>:</span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;system-view</span><br><span class="line">^</span><br><span class="line"><span class="title class_">Error</span>: <span class="title class_">Unrecognized</span> command found at <span class="string">&#x27;^&#x27;</span> position.</span><br><span class="line"><span class="comment">//试图进入R1的系统视图的时候被拒绝，原因是用户等级不够</span></span><br></pre></td></tr></table></figure><blockquote><p>STELNET登陆系统本次项目暂时用不上，就不写了</p></blockquote><h2 id="1-2、通过FTP进行文件操作"><a href="#1-2、通过FTP进行文件操作" class="headerlink" title="1.2、通过FTP进行文件操作"></a>1.2、通过FTP进行文件操作</h2><h3 id="拓扑及设备信息：-1"><a href="#拓扑及设备信息：-1" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p><img src="https://img-blog.csdnimg.cn/c10ec91c03e34db4bacdebf51352a799.png" alt="请添加图片描述"></p><h3 id="1、配置路由器为FTP-Client"><a href="#1、配置路由器为FTP-Client" class="headerlink" title="1、配置路由器为FTP Client"></a>1、配置路由器为FTP Client</h3><p>在电脑上创建文件夹”FTP-Huawei”作为FTP服务器的文件夹，在该路径下再创建子文件夹”Config”，该文件夹下创建测试文件test.txt。</p><p>创建完成后，将”FTP-Huawei”的路径设置为FTP服务器配置的文件根目录。</p><p><img src="https://img-blog.csdnimg.cn/5f375f204650409fbcd05767110abf6a.png" alt="请添加图片描述"></p><p>FTP Server上没有默认用户名和密码，每次在R1上连接服务器时，会自动创建新用户。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本次使用用户名 10.0.2.1，密码 huawei</span></span><br><span class="line"><span class="comment">//此处设置用户名</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;ftp <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line"><span class="title class_">Trying</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span> ...</span><br><span class="line"><span class="title class_">Press</span> <span class="variable constant_">CTRL</span>+K to abort</span><br><span class="line"><span class="title class_">Connected</span> to <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span>.</span><br><span class="line"><span class="number">220</span> <span class="title class_">FtpServerTry</span> <span class="title class_">FtpD</span> <span class="keyword">for</span> free</span><br><span class="line"><span class="title class_">User</span>(<span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span>:(none)):<span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line"><span class="number">331</span> <span class="title class_">Password</span> required <span class="keyword">for</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span> .</span><br><span class="line"><span class="comment">//此处输入密码</span></span><br><span class="line"><span class="title class_">Enter</span> <span class="attr">password</span>:<span class="comment">//[密码]</span></span><br><span class="line"><span class="number">230</span> <span class="title class_">User</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span> logged <span class="keyword">in</span> , proceed</span><br><span class="line">[<span class="variable constant_">R1</span>-ftp]</span><br></pre></td></tr></table></figure><p>连接服务器后的操作：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用命令 ls 查看 FTP 服务器文件夹状态。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ftp]ls</span><br><span class="line"><span class="number">200</span> <span class="title class_">Port</span> command okay.</span><br><span class="line"><span class="number">150</span> <span class="title class_">Opening</span> <span class="variable constant_">ASCII</span> <span class="variable constant_">NO</span>-<span class="variable constant_">PRINT</span> mode data connection <span class="keyword">for</span> ls -l.</span><br><span class="line"><span class="title class_">Config</span></span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> finished successfully. <span class="title class_">Data</span> connection closed.</span><br><span class="line"><span class="attr">FTP</span>: <span class="number">12</span> <span class="title function_">byte</span>(s) received <span class="keyword">in</span> <span class="number">0.180</span> <span class="title function_">second</span>(s) <span class="number">66.</span>66byte(s)/sec.</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令 cd 进入Config文件夹。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ftp]cd <span class="title class_">Config</span></span><br><span class="line"><span class="number">250</span> <span class="string">&quot;/config&quot;</span> is current directory.</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令 dir 查看详细的文件属性。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ftp]dir</span><br><span class="line"><span class="number">200</span> <span class="title class_">Port</span> command okay.</span><br><span class="line"><span class="number">150</span> <span class="title class_">Opening</span> <span class="variable constant_">ASCII</span> <span class="variable constant_">NO</span>-<span class="variable constant_">PRINT</span> mode data connection <span class="keyword">for</span> ls -l.</span><br><span class="line">drwxrwxrwx <span class="number">1</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span> nogroup <span class="number">3</span> <span class="title class_">Aug</span> <span class="number">21</span> <span class="number">2013</span> test.<span class="property">txt</span></span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> finished successfully. <span class="title class_">Data</span> connection closed.</span><br><span class="line"><span class="attr">FTP</span>: <span class="number">66</span> <span class="title function_">byte</span>(s) received <span class="keyword">in</span> <span class="number">0.050</span> <span class="title function_">second</span>(s) <span class="number">1.</span>32Kbyte(s)/sec.</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 get 命令下载 test 到本地路由器。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ftp]get test.<span class="property">txt</span></span><br><span class="line"><span class="number">200</span> <span class="title class_">Port</span> command okay.</span><br><span class="line"><span class="number">150</span> <span class="title class_">Sending</span> test.<span class="property">txt</span> (<span class="number">3</span> bytes). <span class="title class_">Mode</span> <span class="variable constant_">STREAM</span> <span class="title class_">Type</span> <span class="variable constant_">BINARY</span></span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> finished successfully. <span class="title class_">Data</span> connection closed.</span><br><span class="line"><span class="attr">FTP</span>: <span class="number">3</span> <span class="title function_">byte</span>(s) received <span class="keyword">in</span> <span class="number">17.450</span> <span class="title function_">second</span>(s) .17byte(s)/sec</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 put 命令上传 test 到 FTP 服务器，命名为 new.txt。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ftp]put test.<span class="property">txt</span> <span class="keyword">new</span>.<span class="property">txt</span></span><br><span class="line"><span class="number">200</span> <span class="title class_">Port</span> command okay.</span><br><span class="line"><span class="number">150</span> <span class="title class_">Opening</span> <span class="variable constant_">BINARY</span> data connection <span class="keyword">for</span> <span class="keyword">new</span>.<span class="property">txt</span></span><br><span class="line"><span class="number">226</span> <span class="title class_">Transfer</span> finished successfully. <span class="title class_">Data</span> connection closed.</span><br><span class="line"><span class="attr">FTP</span>: <span class="number">3</span> <span class="title function_">byte</span>(s) sent <span class="keyword">in</span> <span class="number">0.070</span> <span class="title function_">second</span>(s) <span class="number">42.</span>85byte(s)/sec.</span><br></pre></td></tr></table></figure><h3 id="2、配置路由器为FTP-Server"><a href="#2、配置路由器为FTP-Server" class="headerlink" title="2、配置路由器为FTP Server"></a>2、配置路由器为FTP Server</h3><p>将路由器配置为 FTP 服务器，可以使得路由器下行的客户端能够上传文件到路由<br>器上，并可直接从 Server 上获取文件。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开路由器 R1 的 FTP 服务器功能</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;system-view</span><br><span class="line">[<span class="variable constant_">R1</span>]ftp server enable</span><br><span class="line"><span class="comment">//设置 FTP 登录的用户名为 ftp， 密码为 huawei，设置文件夹目录 flash： //配置 FTP 用户可访问的目录为 fash：，用户优先级为 15，服务类型为 ftp</span></span><br><span class="line">[<span class="variable constant_">R1</span>]aaa</span><br><span class="line">[<span class="variable constant_">R1</span>-aaa]local-user ftp password cipher hawei</span><br><span class="line">[<span class="variable constant_">R1</span>-aaa]local-user ftp ftp-directory <span class="attr">flash</span>:</span><br><span class="line">[<span class="variable constant_">R1</span>-aaa]local-user ftp service-type ftp</span><br><span class="line">[<span class="variable constant_">R1</span>-aaa]local-user ftp privilege level <span class="number">15</span></span><br></pre></td></tr></table></figure><p>配置完成后， 在本地创建测试文件 test-user.txt，并设置客户端信息如下图。配置服务器地址为 10.0.1.254，用户名为 ftp，密码为 huawei，然后点击“登录”按钮。  </p><p><img src="https://img-blog.csdnimg.cn/1248a45773874cbbb19df400770f77c6.png" alt="请添加图片描述"></p><p>登录成功后，可选择文件 test-user，并点击向右箭头传送至 FTP 服务器，可观察到上传文件成功。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在R1上查看目录下的文件。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]dir</span><br><span class="line"><span class="title class_">Directory</span> <span class="keyword">of</span> <span class="attr">flash</span>:/</span><br><span class="line"><span class="title class_">Idx</span> <span class="title class_">Attr</span> <span class="title class_">Size</span>(<span class="title class_">Byte</span>) <span class="title class_">Date</span> <span class="title class_">Time</span>(<span class="variable constant_">LMT</span>) <span class="title class_">FileName</span></span><br><span class="line">……</span><br><span class="line"><span class="number">3</span> -rw- <span class="number">0</span> <span class="title class_">Sep</span> <span class="number">09</span> <span class="number">2013</span> <span class="number">03</span>:<span class="number">32</span>:<span class="number">58</span> test-user.<span class="property">txt</span></span><br><span class="line"><span class="number">4</span> -rw- <span class="number">0</span> <span class="title class_">Sep</span> <span class="number">09</span> <span class="number">2013</span> <span class="number">03</span>:<span class="number">25</span>:<span class="number">47</span> test.<span class="property">txt</span></span><br><span class="line"><span class="number">980</span>,<span class="number">052</span> <span class="variable constant_">KB</span> total (<span class="number">700</span>,<span class="number">320</span> <span class="variable constant_">KB</span> free)</span><br></pre></td></tr></table></figure><h1 id="2、交换机基础配置"><a href="#2、交换机基础配置" class="headerlink" title="2、交换机基础配置"></a>2、交换机基础配置</h1><h2 id="2-1、交换机基础配置"><a href="#2-1、交换机基础配置" class="headerlink" title="2.1、交换机基础配置"></a>2.1、交换机基础配置</h2><h3 id="拓扑及设备信息：-2"><a href="#拓扑及设备信息：-2" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>S1 和 S2 为接入层交换机， S3为汇聚层交换机。</p><p>对三台新交换机进行基本配置， 保证交换机间的接口使用全双工模式，并根据需要配置接口速率。</p><p><img src="https://img-blog.csdnimg.cn/289df1b3fb254db1834a67d1400b977f.png" alt="请添加图片描述"></p><p>###1、配置交换机双工模式</p><p>在自协商模式下，接口的双工模式是和对端接口协商得到的，但协商得到的双工模式可能与实际要求不符。可通过配置双工模式的取值范围来控制协商的结果。例如互连的两个设备对应的接口都支持全&#x2F;半双工，经自协商后工作在半双工模式，与实际要求的全双工模式不符，这时就可以执行命令 auto duplex full 使得接口的可协商双工模式为全双工模式。</p><p>缺省情况下，以太网接口自协商双工模式范围为接口所支持的双工模式。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在S1,S2,S3三台交换机接口下先通过 undo negotiation auto 命令关掉自协商功能，再手工指定双工模式为全双工</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]duplex full</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]duplex full</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S3</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]duplex full</span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]duplex full</span><br></pre></td></tr></table></figure><h3 id="2、配置接口速率"><a href="#2、配置接口速率" class="headerlink" title="2、配置接口速率"></a>2、配置接口速率</h3><p>在自协商模式下，以太网接口的速率是和对端接口协商得到的。如果协商的速率与实际要求不符，可通过配置速率的取值范围来控制协商的结果。例如互连的两个设备对应的接口经自协商后的速率为10Mbit&#x2F;s，与实际要求的100Mbit&#x2F;s不符，可通过执行命令auto speed 100配置使得接口可协商的速率为 100Mbit&#x2F;s。  </p><p>缺省情况下，以太网接口自协商速率范围为接口支持的所有速率。在非自协商模式下，需手动配置接口速率，避免发生无法正常通讯的情况。在非自协商模式时，缺省情况下，以太网接口的速率为接口支持的最大速率。</p><p>根据网络需要调整接口速率。由于网络用户较少，配置 GE 接口速率为 100Mbit&#x2F;s，Ethernet 接口配置速率为 10Mbit&#x2F;s。 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在三台交换机接口下配置速率。首先关闭接口自协商模式，并配置以太网接口的速率。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]inter <span class="title class_">Ethernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]speed <span class="number">10</span></span><br><span class="line"><span class="comment">//用同样的方法配置另外两台设备接口的速率。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]interface ethernet <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]speed <span class="number">10</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]speed <span class="number">100</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S3</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]speed <span class="number">100</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo negotiation auto</span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]speed <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="2-2、ARP及Proxy-ARP"><a href="#2-2、ARP及Proxy-ARP" class="headerlink" title="2.2、ARP及Proxy ARP"></a>2.2、ARP及Proxy ARP</h2><blockquote><p>本项目暂时用不上，了解即可。</p></blockquote><p>ARP（ Address Resolution Protocol）是用来将 IP 地址解析为 MAC 地址的协议。 ARP 表项可以分为动态和静态两种类型。 动态 ARP 是利用 ARP 广播报文，动态执行并自动进行 IP地址到以太网 MAC 地址的解析，无需网络管理员手工处理。静态 ARP，建立 IP 地址和 MAC地址之间固定的映射关系，在主机和路由器上不能动态调整此映射关系， 需要网络管理员手工添加。 设备上有一个 ARP 高速缓存（ ARP cache），用来存放 IP 地址到 MAC 地址的映射表，利用 ARP 请求和应答报文来缓存映射表，以便能正确的把三层数据包封装成二层数据正，达到快速封装数据帧，正确转发数据的目的。 另外 ARP 还有扩展应用功能，比如 Proxy ARP 功能。</p><p>Proxy ARP，即代理 ARP， 当主机上没有配置缺省网关地址（即不知道如何到达本地网络的网关设备），可以发送一个广播 ARP 请求（请求目的主机的 MAC 地址），使能 Proxy ARP功能的路由器收到这样的请求后， 在确认请求地址可达后，会使用自身的 MAC 地址作为该ARP 请求的回应，使得处于不同物理网络的同一网段的主机之间可以正常的相互通信。</p><h1 id="3、VLAN"><a href="#3、VLAN" class="headerlink" title="3、VLAN"></a>3、VLAN</h1><blockquote><p>比较简单，快速过一遍即可</p></blockquote><h2 id="3-1、VLAN-基础配置及-Access-接口"><a href="#3-1、VLAN-基础配置及-Access-接口" class="headerlink" title="3.1、VLAN 基础配置及 Access 接口"></a>3.1、VLAN 基础配置及 Access 接口</h2><p><strong>原理概述：</strong></p><p>​早期的局域网技术是基于总线型结构的，总线型拓扑结构是由一根单电缆连接着所有主机，这种局域网技术存在着冲突域问题，即所有用户都在一个冲突域中，那么同一时间内只有一台主机能发送消息，从任意设备发出的消息都会被其他所有主机接收到，用户可能收到大量不需要的报文，而且所有主机共享一条传输通道，任意主机之间都可以直接互相访问，无法控制信息的安全。</p><p>​为了避免冲突域，同时扩展传统局域网，以接入更多计算机，可以采用在局域网中使用二层交换机，交换机能有效隔离冲突域，但是由于所有计算机仍处于同一个广播域，任意设备都能接收到所有报文，不但降低了网络的效率，而且还降低了安全性，即广播域和信息安全问题依旧存在。 为了能减少广播，提高局域网安全性，人们使用虚拟局域网即 VLAN 技术把一个物理的 LAN 在逻辑上划分成多个广播域。 VLAN 内的主机间可以直接通信，而VLAN 间不能直接互通。这样，广播报文被限制在一个 VLAN 内，同时也提高了网络安全性。 不同的 VLAN 使用不同的 VLAN ID 区分， VLAN ID 的范围是 0－ 4095，可配置的值为1－ 4094， 0 和 4095 为保留值。</p><p>​Access 接口是交换机上用来连接用户主机的接口。当 Access 接口从主机收到一个不带VLAN 标签的数据帧时，会给该数据帧加上与PVID 一致的VLAN 标签（ PVID 可手工配置，默认是 1，即所有交换机上的接口默认都属于 VLAN 1）。当 Access 接口要发送一个带 VLAN标签的数据帧给主机时，首先检查该数据帧的 VLAN ID 是否与自己的 PVID 相同，若相同，则去掉 VLAN 标签后发送该数据帧给主机；若不相同，直接丢弃该数据帧。  </p><h3 id="拓扑及设备信息：-3"><a href="#拓扑及设备信息：-3" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p><img src="https://img-blog.csdnimg.cn/289df1b3fb254db1834a67d1400b977f.png" alt="请添加图片描述"></p><h3 id="1、创建VLAN"><a href="#1、创建VLAN" class="headerlink" title="1、创建VLAN"></a>1、创建VLAN</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 S1 上使用两条命令分别创建 VLAN 10 和 VLAN 20。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]vlan <span class="number">10</span></span><br><span class="line">[<span class="variable constant_">S1</span>-vlan10]vlan <span class="number">20</span></span><br><span class="line"><span class="comment">//在 S2 上使用一条命令 vlan batch 创建 VLAN 30 和 VLAN 40。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]vlan batch <span class="number">30</span> <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，在 S1 和 S2 上使用 display vlan 命令查看 VLAN 的相关信息。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display vlan</span><br><span class="line"><span class="title class_">The</span> total number <span class="keyword">of</span> vlans is : <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> common <span class="attr">UT</span>: ...</span><br><span class="line"><span class="number">10</span> common</span><br><span class="line"><span class="number">20</span> common</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]display vlan</span><br><span class="line"><span class="title class_">The</span> total number <span class="keyword">of</span> vlans is : <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> common <span class="attr">UT</span>:...</span><br><span class="line"><span class="number">30</span> common</span><br><span class="line"><span class="number">40</span> common</span><br><span class="line"><span class="comment">//可以观察到， S1 和 S2 都已经成功创建了相应 VLAN，但目前没有任何接口加入所创建的 VLAN 10 与 20 中，默认情况下交换机上所有接口都属于 VLAN 1。</span></span><br></pre></td></tr></table></figure><h3 id="2、配置Access接口"><a href="#2、配置Access接口" class="headerlink" title="2、配置Access接口"></a>2、配置Access接口</h3><p>按照拓扑，使用命令 port link-type access 配置所有 S1 和 S2 交换机上连接 PC 的接口类型为 Access 类型接口，并使用命令 port default vlan 配置接口的缺省 VLAN 并同时加入相应 VLAN 中。 缺省情况下，所有接口的缺省 VLAN ID 为1 。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">S1</span>]interface ethernet0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port link-type access</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port <span class="keyword">default</span> vlan <span class="number">10</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface ethernet0/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port link-type access</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port <span class="keyword">default</span> vlan <span class="number">10</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface ethernet0/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port link-type access</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port <span class="keyword">default</span> vlan <span class="number">20</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface ethernet0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port link-type access</span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port <span class="keyword">default</span> vlan <span class="number">30</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface ethernet0/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port link-type access</span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port <span class="keyword">default</span> vlan <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，查看 S1 与 S2 上的 VLAN 信息</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display vlan</span><br><span class="line"><span class="title class_">The</span> total number <span class="keyword">of</span> vlans is : <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="number">10</span> common <span class="attr">UT</span>:<span class="title class_">Eth0</span>/<span class="number">0</span>/<span class="number">1</span>(D) <span class="title class_">Eth0</span>/<span class="number">0</span>/<span class="number">2</span>(D)</span><br><span class="line"><span class="number">20</span> common <span class="attr">UT</span>:<span class="title class_">Eth0</span>/<span class="number">0</span>/<span class="number">3</span>(D)</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]display vlan</span><br><span class="line"><span class="title class_">The</span> total number <span class="keyword">of</span> vlans is : <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="number">30</span> common <span class="attr">UT</span>:<span class="title class_">Eth0</span>/<span class="number">0</span>/<span class="number">1</span>(D)</span><br><span class="line"><span class="number">40</span> common <span class="attr">UT</span>:<span class="title class_">Eth0</span>/<span class="number">0</span>/<span class="number">2</span>(D)</span><br></pre></td></tr></table></figure><h3 id="3、检查配置结果"><a href="#3、检查配置结果" class="headerlink" title="3、检查配置结果"></a>3、检查配置结果</h3><p>​在交换机上将不同接口加入各自不同的 VLAN 中后，属于相同 VLAN 的接口处于同一个广播域，相互之间可以直接通信。属于不同 VLAN 的接口是处于不同的广播域，相互之间不能直接通信。  </p><p>​在本实验环境中，只有同属于 IT 部门 VLAN10 的两台主机 PC-1 和 PC-2 之间可以互相通信。其他不同部门间的 PC 之间将无法通信。</p><p>​在 IT 部门的终端 PC-1 上分别测试与同部门的终端 PC-2，HR 部门的 PC-3 间的连通性。</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">PC</span>&gt;ping -c <span class="number">1</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line"><span class="variable constant_">PING</span> <span class="number">10.0</span><span class="number">.1</span><span class="number">.2</span>: <span class="number">56</span> data bytes, press <span class="variable constant_">CTRL_C</span> to <span class="keyword">break</span></span><br><span class="line"><span class="title class_">Reply</span> <span class="keyword">from</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.2</span>: bytes=<span class="number">56</span> <span class="title class_">Sequence</span>=<span class="number">1</span> ttl=<span class="number">255</span> time=<span class="number">50</span> ms</span><br><span class="line">--- <span class="number">10.1</span><span class="number">.1</span><span class="number">.2</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> <span class="title function_">packet</span>(s) transmitted</span><br><span class="line"><span class="number">1</span> <span class="title function_">packet</span>(s) received</span><br><span class="line"><span class="number">0.00</span>% packet loss</span><br><span class="line">round-trip min/avg/max = <span class="number">50</span>/<span class="number">50</span>/<span class="number">50</span> ms</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">PC</span>&gt;ping <span class="number">1</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line"><span class="title class_">From</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>: <span class="title class_">Destination</span> host unreachable</span><br><span class="line"><span class="title class_">From</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>: <span class="title class_">Destination</span> host unreachable</span><br><span class="line"><span class="title class_">From</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>: <span class="title class_">Destination</span> host unreachable</span><br><span class="line"><span class="title class_">From</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>: <span class="title class_">Destination</span> host unreachable</span><br><span class="line"><span class="title class_">From</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>: <span class="title class_">Destination</span> host unreachable</span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到，相同 VLAN 内的 PC 可以互相通信，不同 VLAN 内的 PC 间无法通信。</span></span><br></pre></td></tr></table></figure><h2 id="3-2、配置Trunk接口"><a href="#3-2、配置Trunk接口" class="headerlink" title="3.2、配置Trunk接口"></a>3.2、配置Trunk接口</h2><p><strong>原理概述</strong></p><p>​在以太网中，通过划分 VLAN 来隔离广播域和增强网络通讯的安全性。以太网通常由多台交换机组成，为了使 VLAN 的数据帧跨越多台交换机传递，交换机之间互连的链路需要配置为干道链路（ Trunk Link）。 和接入链路不同，干道链路是用来在不同的设备之间（如交换机和路由器之间、交换机和交换机之间）承载多个不同 VLAN 数据的，干道链路是不属于任何一个具体的 VLAN 的， 干道链路可以承载所有的 VLAN 数据，也可以配置为只能传输指定 VLAN 的数据。</p><p>​Trunk 端口一般用于交换机之间连接的端口， Trunk 端口可以属于多个 VLAN，可以接收和发送多个 VLAN 的报文。</p><p>​当 Trunk 端口收到数据帧时， 如果该帧不包含 802.1Q 的 VLAN 标签，将打上该 Trunk端口的 PVID；如果该帧包含 802.1Q 的 VLAN 标签，则不改变。</p><p>​当 Trunk 端口发送数据帧时， 当该所发送帧的 VLAN ID 与端口的 PVID 不同时， 检查是否允许该 VLAN 通过，若允许的话直接透传，不允许就直接丢弃；当该帧的 VLAN ID 与端口的 PVID 相同时，则剥离 VLAN 标签后转发。</p><h3 id="拓扑及设备信息：-4"><a href="#拓扑及设备信息：-4" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>​本实验模拟某公司网络场景，公司规模较大，员工 200 余名，内部网络是一个大的局域网。公司放置了多台接入交换机（如 S1 和 S2）负责员工的网络接入。接入交换机之间通过汇聚交换机 S3 相连。公司通过划分 VLAN 来隔离广播域，由于员工较多，相同部门的员工通过不同交换机接入。为了保证在不同交换机下相同部门的员工能互相通信，需要配置交换机之间链路为干道模式，实现相同 VLAN 跨交换机通信。  </p><p><img src="https://img-blog.csdnimg.cn/0f110adddfdb417692e89f216a66a01f.png" alt="请添加图片描述"></p><h3 id="1、创建VLAN，配置Access接口"><a href="#1、创建VLAN，配置Access接口" class="headerlink" title="1、创建VLAN，配置Access接口"></a>1、创建VLAN，配置Access接口</h3><p>公司内网需要通过 VLAN 的划分来隔离不同的部门。需要在三台交换机 S1， S2， S3上都分别创建 VLAN 10 和 VLAN 20，研发部员工属于 VLAN 10，市场部员工属于 VLAN 20。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">S1</span>]vlan <span class="number">10</span></span><br><span class="line"><span class="comment">//标记命令：description （参数）</span></span><br><span class="line">[<span class="variable constant_">S1</span>-vlan10]description R$D</span><br><span class="line">[<span class="variable constant_">S1</span>-vlan10]vlan <span class="number">20</span></span><br><span class="line">[<span class="variable constant_">S1</span>-vlan20]description <span class="title class_">Market</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]vlan <span class="number">10</span></span><br><span class="line">[<span class="variable constant_">S2</span>-vlan10]description R$D</span><br><span class="line">[<span class="variable constant_">S2</span>-vlan10]vlan <span class="number">20</span></span><br><span class="line">[<span class="variable constant_">S2</span>-vlan20]description <span class="title class_">Market</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S3</span>]vlan <span class="number">10</span></span><br><span class="line">[<span class="variable constant_">S3</span>-vlan10]description R$D</span><br><span class="line">[<span class="variable constant_">S3</span>-vlan10]vlan <span class="number">20</span></span><br><span class="line">[<span class="variable constant_">S3</span>-vlan20]description <span class="title class_">Market</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看VLAN信息，此处以S3为例</span></span><br><span class="line">&lt;<span class="variable constant_">S3</span>&gt;display vlan</span><br><span class="line"><span class="title class_">The</span> total number <span class="keyword">of</span> vlans is : <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> enable <span class="keyword">default</span> enable disable <span class="variable constant_">VLAN</span> <span class="number">0001</span></span><br><span class="line"><span class="number">10</span> enable <span class="keyword">default</span> enable disable R$D</span><br><span class="line"><span class="number">20</span> enable <span class="keyword">default</span> enable disable <span class="title class_">Market</span></span><br><span class="line"><span class="comment">//可以观察到相关的 VLAN 都已经配置好。也可以使用命令 display vlan summary 查看所配置 VLAN 的简要信息。</span></span><br><span class="line">&lt;<span class="variable constant_">S3</span>&gt;display vlan summary</span><br><span class="line"><span class="keyword">static</span> <span class="attr">vlan</span>:</span><br><span class="line"><span class="title class_">Total</span> <span class="number">3</span> <span class="keyword">static</span> vlan.</span><br><span class="line"><span class="number">1</span> <span class="number">10</span> <span class="number">20</span></span><br><span class="line">dynamic <span class="attr">vlan</span>:</span><br><span class="line"><span class="title class_">Total</span> <span class="number">0</span> dynamic vlan.</span><br><span class="line">reserved <span class="attr">vlan</span>:</span><br><span class="line"><span class="title class_">Total</span> <span class="number">0</span> reserved vlan.</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 S1 上配置 E 0/0/2 和 E 0/0/3 为 Access 接口，并划分到相应的 VLAN 10 内。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>]port link-type access</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>]port <span class="keyword">default</span> vlan <span class="number">10</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span>]port link-type access</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span>]port <span class="keyword">default</span> vlan <span class="number">20</span></span><br><span class="line"><span class="comment">//在 S2 上配置 E 0/0/3 和 E 0/0/4 为 Access 接口，并划分到相应的 VLAN。</span></span><br><span class="line"><span class="comment">//与S1相同，此处略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令 display port vlan 检查 VLAN 和接口配置情况。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display port vlan</span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Link</span> <span class="title class_">Type</span> <span class="variable constant_">PVID</span> <span class="title class_">Trunk</span> <span class="variable constant_">VLAN</span> <span class="title class_">List</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> hybrid <span class="number">1</span> -</span><br><span class="line"><span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> access <span class="number">10</span> -</span><br><span class="line"><span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> access <span class="number">20</span> -</span><br><span class="line">[<span class="variable constant_">S2</span>]display port vlan</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="2、配置Trunk接口"><a href="#2、配置Trunk接口" class="headerlink" title="2、配置Trunk接口"></a>2、配置Trunk接口</h3><p>​在上个步骤中已经将 PC 机所连入的交换机接口划入到了相应的部门 VLAN，现在测试相同部门中的 PC 是否能够通信。  </p><blockquote><p>几个PC互相ping，此处省略过程</p></blockquote><p>​可以观察到此时同部门的 PC 机间不能通信。<br>​目前在该跨交换机实现不同 VLAN 通信的二层组网拓扑中，虽然与 PC 端相连的交换机接口上创建并划分了 VLAN 信息，但是在交换机与交换机之间相连的接口上并没有相应的VLAN 信息，不能够识别和发送跨越交换机的 VLAN 报文，此时 VLAN 只具有在每台交换机上的本地意义，无法实现相同 VLAN 的跨交换机通信。  </p><p>​为了使得交换机间能够识别和发送跨越交换机的 VLAN 报文，需要用到 <strong>Trunk 技术</strong>，将交换机间相连的接口配置成为 Trunk 接口。 Trunk 接口是交换机上用来与其他交换机连接的接口，能实现同时传递多个VLAN 的流量。在配置的时候要明确配置被允许通过的VLAN，实现对 VLAN 流量传输的控制。  </p><p>配置Trunk：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 S1 上配置 E 0/0/1 为 Trunk 接口，允许 VLAN 10 和 VLAN 20 通过。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port link-type trunk</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port trunk allow-pass vlan <span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="comment">//在 S2 上配置 E 0/0/2 为 Trunk 接口，允许 VLAN 10 和 VLAN 20 通过。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>]port link-type trunk</span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>]port trunk allow-pass vlan <span class="number">10</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在 S3 上配置 GE 0/0/1 和 GE 0/0/2 为 Trunk 接口，允许所有 VLAN 通过。</span></span><br><span class="line">[<span class="variable constant_">S3</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port link-type trunk</span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]port trunk allow-pass vlan all</span><br><span class="line">[<span class="variable constant_">S3</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]port link-type trunk</span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]port trunk allow-pass vlan all</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后可以使用命令 display port vlan 来检查 trunk 的配置情况，这里以 S3 为例。</span></span><br><span class="line">[<span class="variable constant_">S3</span>]display port vlan</span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Link</span> <span class="title class_">Type</span> <span class="variable constant_">PVID</span> <span class="title class_">Trunk</span> <span class="variable constant_">VLAN</span> <span class="title class_">List</span></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span> trunk <span class="number">1</span> <span class="number">1</span>-<span class="number">4094</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span> trunk <span class="number">1</span> <span class="number">1</span>-<span class="number">4094</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//再次验证发现所有PC都能互通</span></span><br></pre></td></tr></table></figure><h2 id="3-3、利用单臂路由实现-VLAN-间路由"><a href="#3-3、利用单臂路由实现-VLAN-间路由" class="headerlink" title="3.3、利用单臂路由实现 VLAN 间路由"></a>3.3、利用单臂路由实现 VLAN 间路由</h2><blockquote><p>这部分不一定需要，没有VLAN跨路由通信的需求可以跳过。</p></blockquote><p><strong>原理概述</strong></p><p>以太网中，通常会使用 VLAN 技术隔离二层广播域来减少广播的影响，并增强网络安全性和网络的可管理性，但同时也严格的隔离了不同 VLAN 之间的任何二层流量，分属于不同 VLAN 的用户不能直接互相通信。在现实中，经常会出现某些用户需要跨越 VLAN 实现通信的情况，单臂路由技术就是解决 VLAN 间通信的一种方法。</p><p><strong>单臂路由的原理是通过一台路由器，使 VLAN 间互通数据通过路由器进行三层转发</strong>。如果在路由器上为每个 VLAN 分配一个单独的路由器物理接口，随着 VLAN 数量的增加，必然需要更多的接口，而路由器能提供的接口数量比较有限，所以<strong>在路由器的一个物理接口上通过配置子接口（即逻辑接口）的方式来实现以一当多的功能</strong>，将是一种非常好的方式，路由器同一物理接口的不同的子接口作为不同 VLAN 的缺省网关，当不同 VLAN 间的用户主机需要通信时，只需将数据包发送给网关，网关处理后再发送至目的主机所在 VLAN，从而实现 VLAN 间通信。 由于从拓扑结构图看，在交换机与路由器之间，数据仅通过一条物理链路传输，故形象的称之为“单臂路由”。  </p><h3 id="拓扑及设备信息：-5"><a href="#拓扑及设备信息：-5" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>本实验模拟公司网络场景，路由器 R1 是公司的出口网关，员工 PC 通过接入层交换机（如 S2 和 S3）接入公司网络，接入层交换机又通过汇聚交换机 S1 与路由器 R1 相连。公司内部网络通过划分不同的 VLAN 隔离了不同部门之间的二层通信，保证各部门间的信息安全，但是由于业务需要，经理、市场部和人事部之间需要能实现跨 VLAN 通信，网络管理员决定借助路由器的三层功能，通过配置单臂路由实现三个部门之间跨VLAN 通信的需求。  </p><p><img src="https://img-blog.csdnimg.cn/c9e5f43c72004193b744344011e11e29.png" alt="请添加图片描述"></p><h3 id="1、创建VLAN并配置Access、Trunk接口"><a href="#1、创建VLAN并配置Access、Trunk接口" class="headerlink" title="1、创建VLAN并配置Access、Trunk接口"></a>1、创建VLAN并配置Access、Trunk接口</h3><p>​公司为保证隔离不同部门间的二层通信，保障各部门的信息安全，规划不同部门的终端属于不同的 VLAN。 并对 PC 配置相应 IP 地址。  </p><blockquote><p>此处配置过程省略，可参考前两小节</p></blockquote><p>（1）在 S2 上创建 VLAN 10 和 VLAN 20，把连接 PC-1 的 E 0&#x2F;0&#x2F;1 和连接 PC-2 的 E 0&#x2F;0&#x2F;2 接口配置为 Access 类型接口，并分别划分到相应的 VLAN 中。  </p><p>（2）在 S3 上创建 VLAN 30，把连接 PC-3 的 E 0&#x2F;0&#x2F;1 接口配置为 Access 类型接口，并划分到 VLAN 30。</p><p>（3）交换机之间或交换机和路由器之间相连的接口需要传递多个 VLAN 信息，需要配置成为 Trunk 接口。将 S2 和 S3 的 GE 0&#x2F;0&#x2F;2 接口配置成为 Trunk 类型接口，并允许所有 VLAN 通过。  </p><p>（4）在 S1 上创建 VLAN 10、 VLAN 20 和 VLAN 30，并配置交换机和路由器相连的接口为Trunk，允许所有 VLAN 通过  </p><h3 id="2、配置路由器子接口和IP地址"><a href="#2、配置路由器子接口和IP地址" class="headerlink" title="2、配置路由器子接口和IP地址"></a>2、配置路由器子接口和IP地址</h3><p>由于路由器 R1 只有一个实际的物理接口与交换机 S1 相连，可以在路由器上配置不同的逻辑子接口来作为不同 VLAN 的网关，从而达到节省路由器接口的目的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 R1 上创建子接口 GE 0/0/1.1，配置 IP 地址 10.1.1.254/24，作为人事部网关地址。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1.1</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.1</span>]ip address <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> <span class="number">24</span></span><br><span class="line"><span class="comment">//在 R1 上创建子接口 GE 0/0/1.2，配置 IP 地址 20.1.1.254/24，作为市场部网关地址。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1.2</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.2</span>]ip address <span class="number">20.1</span><span class="number">.1</span><span class="number">.254</span> <span class="number">24</span></span><br><span class="line"><span class="comment">//在 R1 上创建子接口 GE 0/0/1.3，配置 IP 地址 30.1.1.254/24，作为经理的网关地址。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1.3</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.3</span>]ip address <span class="number">30.1</span><span class="number">.1</span><span class="number">.254</span> <span class="number">24</span></span><br><span class="line"><span class="comment">//在 PC-1， PC-2 和 PC-3 上配置 IP 和相应的网关地址后，在 PC-1 上测试与 PC-2 和 PC-3间的连通性。结果是无法通信，原因见3.3概述</span></span><br></pre></td></tr></table></figure><h3 id="3、配置路由器子接口封装VLAN"><a href="#3、配置路由器子接口封装VLAN" class="headerlink" title="3、配置路由器子接口封装VLAN"></a>3、配置路由器子接口封装VLAN</h3><p>​虽然目前已经创建了不同的子接口，并配置了相关 IP 地址，但是仍然无法通信。是由于处于不同VLAN下，不同网段的PC间要实现互相通信，数据包必须通过路由器进行中转。由 S1 发送到 R1 的数据都加上了 VLAN 标签，而路由器作为三层设备，默认无法处理带了VLAN 标签的数据包。因此需要在路由器上的子接口下配置对应 VLAN 的封装，使路由器能够识别和处理 VLAN 标签，包括剥离和封装 VLAN 标签。</p><p>在 R1 的子接口 GE 0&#x2F;0&#x2F;1.1 上封装 VLAN 10，在子接口 GE 0&#x2F;0&#x2F;1.2 上封装 VLAN 20，在子接口 GE 0&#x2F;0&#x2F;1.3 上封装 VLAN 30。并开启子接口的 ARP 广播功能。</p><p>使用 <strong>dot1q termination vid</strong> 命令配置子接口对一层 tag 报文的终结功能。即配置该命令后，路由器子接口在接收带有 VLAN tag 的报文时，将剥掉 tag 进行三层转发，在发送报文时，会将与该子接口对应 VLAN 的 VLAN tag 添加到报文中。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.1</span>]dot1q termination vid <span class="number">10</span></span><br></pre></td></tr></table></figure><p>使用 <strong>arp broadcast enable</strong> 命令开启子接口的 ARP 广播功能。如果不配置命令，将会导致该子接口不发送携带有 VLAN tag 的报文  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.1</span>]arp broadcast enable</span><br><span class="line"></span><br><span class="line"><span class="comment">//同理配置 R1 的子接口 GE 0/0/1.2 和 GE 0/0/1/.3。  </span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.2</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.2</span>]dot1q termination vid <span class="number">20</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.2</span>]arp broadcast enable</span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.2</span>]interface <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1.3</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.3</span>]dot1q termination vid <span class="number">30</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.3</span>]arp broadcast enable</span><br></pre></td></tr></table></figure><p>配置完成后，在路由器 R1 上查看接口状态。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">R1</span>]display ip interface brief</span><br><span class="line">*<span class="attr">down</span>: administratively down</span><br><span class="line">……</span><br><span class="line"><span class="title class_">Interface</span> <span class="variable constant_">IP</span> <span class="title class_">Address</span>/<span class="title class_">Mask</span> <span class="title class_">Physical</span> <span class="title class_">Protocol</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span> unassigned down down</span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span> unassigned up down</span><br><span class="line"><span class="comment">//三个子接口的物理状态和协议状态都正常。</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.1</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span>/<span class="number">24</span> up up</span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.2</span> <span class="number">20.1</span><span class="number">.1</span><span class="number">.254</span>/<span class="number">24</span> up up</span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.3</span> <span class="number">30.1</span><span class="number">.1</span><span class="number">.254</span>/<span class="number">24</span> up up</span><br><span class="line"><span class="title class_">NULL0</span> unassigned up <span class="title function_">up</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看路由器 R1 的路由表。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]display ip routing-table</span><br><span class="line"><span class="title class_">Route</span> <span class="title class_">Flags</span>: R - relay, D - download to fib</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Routing</span> <span class="title class_">Tables</span>: <span class="title class_">Public</span></span><br><span class="line"><span class="title class_">Destinations</span> : <span class="number">13</span> <span class="title class_">Routes</span> : <span class="number">13</span></span><br><span class="line"><span class="title class_">Destination</span>/<span class="title class_">Mask</span> <span class="title class_">Proto</span> <span class="title class_">Pre</span> <span class="title class_">Cost</span> <span class="title class_">Flags</span> <span class="title class_">NextHop</span> <span class="title class_">Interface</span></span><br><span class="line"><span class="comment">//路由表中已经有了 10.1.1.0/24、 20.1.1.0/24、 30.1.1.0/24 的路由条目，并且都是路由器 R1 的直连路由， 类似于路由器上的直连物理接口。</span></span><br><span class="line"><span class="number">10.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.1</span></span><br><span class="line">...</span><br><span class="line"><span class="number">20.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">20.1</span><span class="number">.1</span><span class="number">.254</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.2</span></span><br><span class="line">...</span><br><span class="line"><span class="number">30.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">30.1</span><span class="number">.1</span><span class="number">.254</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1.3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在PC1上分别测试与网关地址10.1.1.254和PC2之间的连通性。结果是都能通信。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 PC-1 上 Tracert PC-2。</span></span><br><span class="line"><span class="variable constant_">PC</span>&gt;tracert <span class="number">20.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">traceroute to <span class="number">20.1</span><span class="number">.1</span><span class="number">.1</span>, <span class="number">8</span> hops max</span><br><span class="line">(<span class="variable constant_">ICMP</span>), press <span class="title class_">Ctrl</span>+C to stop</span><br><span class="line"><span class="number">1</span> <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> <span class="number">62</span> ms <span class="number">47</span> ms <span class="number">31</span> ms</span><br><span class="line"><span class="number">2</span> <span class="number">20.1</span><span class="number">.1</span><span class="number">.1</span> <span class="number">125</span> ms <span class="number">94</span> ms <span class="number">94</span> ms</span><br></pre></td></tr></table></figure><p>​可以观察到，PC-1先把ping包发送给自身的网关10.1.1.254，然后再由网关发送到PC-2。<br>​现以 PC-1 ping PC-2 为例，分析单臂路由的整个运作过程。<br>两台 PC 由于处于不同的网络中，这时 PC-1 会将数据包发往自己的网关，即路由器 R1的子接口 GE 0&#x2F;0&#x2F;1.1 的地址 10.1.1.254。数据包到达路由器 R1 后，由于路由器的子接口 GE 0&#x2F;0&#x2F;1.1 已经配置了 VLAN 封装，当接收到 PC-1 发送的 VLAN 10 的数据帧时，发现数据帧的 VLAN ID 跟自身 GE 0&#x2F;0&#x2F;1&#x2F;1 接口配置的 VLAN ID 一样，便会剥离掉数据帧的 VLAN 标签后后通过三层路由转发。通过查找路由表后，发现数据包中的目的地址 20.1.1.1 所属的 20.1.1.0&#x2F;24 网段的路由条目，已经是路由器 R1 上的直连路由，且出接口为 GE 0&#x2F;0&#x2F;1.2，便将该数据包发送至 GE 0&#x2F;0&#x2F;1.2接口。当 GE 0&#x2F;0&#x2F;1.2 接口接收到一个没有带 VLAN 标签的数据帧时，便会加上自身接口所配置的 VLAN ID 20 后再进行转发，然后通过交换机将数据帧顺利转发给 PC-2。<br>​以上便是通过配置单臂路由实现不同 VLAN 间的路由的整个过程。  </p><h2 id="常用操作："><a href="#常用操作：" class="headerlink" title="常用操作："></a>常用操作：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下操作都在交换机进行</span></span><br><span class="line">vlan <span class="number">20</span><span class="comment">//创建vlan</span></span><br><span class="line">vlan batch<span class="comment">//批量创建vlan</span></span><br><span class="line">port link-type trunk<span class="comment">//配置接口类型为Trunk</span></span><br><span class="line">port link-type access<span class="comment">//配置接口类型为Access</span></span><br><span class="line">port trunk allow-pass <span class="number">10</span> <span class="number">20</span></span><br><span class="line">port trunk allow-pass vlan all<span class="comment">//允许所有或部分vlan通过</span></span><br><span class="line">display vlan<span class="comment">//检查VLAN配置情况</span></span><br><span class="line">display port vlan<span class="comment">//检查VLAN、Trunk和接口配置情况</span></span><br><span class="line">[<span class="variable constant_">S1</span>-vlan10]description [描述]<span class="comment">//标记命令</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下操作均在路由器下进行</span></span><br><span class="line">display ip interface brief<span class="comment">//查看路由器接口状态</span></span><br><span class="line">display ip routing-table<span class="comment">//查看路由表</span></span><br></pre></td></tr></table></figure><h1 id="4、生成树"><a href="#4、生成树" class="headerlink" title="4、生成树"></a>4、生成树</h1><h2 id="4-1、STP配置和选路规则"><a href="#4-1、STP配置和选路规则" class="headerlink" title="4.1、STP配置和选路规则"></a>4.1、STP配置和选路规则</h2><p>生成树协议 Spanning Tree Protocol</p><p><strong>原理概述</strong></p><p>​STP 是用来避免数据链路层出现逻辑环路的协议。使用 BPDU 传递网络信息计算出一根无环的树状网络结构，并阻塞特定端口。在网络出现故障的时候， STP 能快速发现链路故障，并尽快的找出另外一条路径用来进行数据传输。  </p><p>​交换机上运行的 STP 通过 BPDU 信息的交互，选举根交换机，然后每台非根交换机选择用来与根交换机通信的根端口，之后每个网段选择用来转发数据至根交换机的指定端口，最后剩余端口则被阻塞。  </p><p>​在 STP 工作过程中，根交换机的选举，根端口、指定端口的选举都非常重要。华为 VRP提供了各种命令，用来调整 STP 的参数，用以优化网络。例如，交换机优先级、端口优先级、端口代价值等等。  </p><h3 id="拓扑及设备信息：-6"><a href="#拓扑及设备信息：-6" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>​公司购置了 4 台交换机，组建网络。考虑到网络的可靠性，将四台交换机如拓扑图搭建。由于默认情况下，交换机之间运行 STP 后，根交换机、根端口、指定端口的选择将基于交换机的 MAC 地址的大小，带来了不确定性，极可能由此产生隐患。<br>​公司网络规划，需要 <u>S1 作为主根交换机， S2 作为 S1 的备份根交换机</u>。同时<u>对于 S4交换机， E 0&#x2F;0&#x2F;1 接口应该作为根端口</u>。<u>对于 S2 和 S3 之间的链路，应该保证 S2 的 E 0&#x2F;0&#x2F;3接口作为指定端口</u>。同时在交换机 S3 上，存在两个接口 E 0&#x2F;0&#x2F;10－ 11 连接到测试 PC，测试PC 经常上下线网络，需要<u>将交换机 S3 与之相连的对应端口定义为边缘端口，避免测试电脑上下线对网络产生的影响</u>。  </p><p><img src="https://img-blog.csdnimg.cn/c9e5f43c72004193b744344011e11e29.png" alt="请添加图片描述"></p><h3 id="1、基本配置"><a href="#1、基本配置" class="headerlink" title="1、基本配置"></a>1、基本配置</h3><p>根据实验拓扑图，在交换机上启用 STP(华为交换机默认启用 MSTP)，将交换机的 STP模式更改为普通生成树 STP。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有一丢丢不严谨，四个交换机都这么配置就行</span></span><br><span class="line">[<span class="variable constant_">S1</span> <span class="variable constant_">S2</span> <span class="variable constant_">S3</span> <span class="variable constant_">S4</span>]stp enable</span><br><span class="line">[<span class="variable constant_">S1</span> <span class="variable constant_">S2</span> <span class="variable constant_">S3</span> <span class="variable constant_">S4</span>]stp mode stp</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，缺省情况下需要等待 30s 生成树重新计算时间（ 15s Forward Delay 加 15sLearning 状态时间），使用命令 display stp 查看 S1 的生成树状态。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display stp</span><br><span class="line">-------[<span class="variable constant_">CIST</span> <span class="title class_">Global</span> <span class="title class_">Info</span>][<span class="title class_">Mode</span> <span class="variable constant_">STP</span>]-------</span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Bridge</span> :<span class="number">32768.</span>4c1f-cceb-beac</span><br><span class="line">……</span><br><span class="line"><span class="title class_">Last</span> <span class="variable constant_">TC</span> occurred :<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">----[<span class="title class_">Port1</span>(<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>)][<span class="variable constant_">FORWARDING</span>]----</span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Protocol</span> :<span class="title class_">Enabled</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Role</span> :<span class="title class_">Root</span> <span class="title class_">Port</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Priority</span> :<span class="number">128</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Cost</span>(<span class="title class_">Dot1T</span> ) :<span class="title class_">Config</span>=auto / <span class="title class_">Active</span>=<span class="number">1</span></span><br><span class="line"><span class="title class_">Designated</span> <span class="title class_">Bridge</span>/<span class="title class_">Port</span> :<span class="number">32768.</span>4c1f-ccbf-cbb5 / <span class="number">128.1</span></span><br><span class="line">……</span><br><span class="line"><span class="variable constant_">BPDU</span> <span class="title class_">Received</span> :<span class="number">50</span></span><br><span class="line"><span class="attr">TCN</span>: <span class="number">0</span>, <span class="title class_">Config</span>: <span class="number">50</span>, <span class="attr">RST</span>: <span class="number">0</span>, <span class="attr">MST</span>: <span class="number">0</span></span><br><span class="line">----[<span class="title class_">Port2</span>(<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>)][<span class="variable constant_">DISCARDING</span>]----</span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Protocol</span> :<span class="title class_">Enabled</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Role</span> :<span class="title class_">Alternate</span> <span class="title class_">Port</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Priority</span> :<span class="number">128</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Cost</span>(<span class="title class_">Dot1T</span> ) :<span class="title class_">Config</span>=auto / <span class="title class_">Active</span>=<span class="number">1</span></span><br><span class="line"><span class="title class_">Designated</span> <span class="title class_">Bridge</span>/<span class="title class_">Port</span> :<span class="number">32768.</span>4c1f-cceb-658f / <span class="number">128.2</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到 S1 的 E 0/0/1 端口为转发状态、端口角色为根端口， E 0/0/2 端口为丢弃状态，端口角色 Alternate，即替代端口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令 display stp brief 在 S2， S3， S4 上仅查看摘要信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在交换机 S2 上面所有的端口为转发状态，观察到 E0/0/1 和 E0/0/3 端口角色为指定端口，E0/0/2 为根端口</span></span><br><span class="line">[<span class="variable constant_">S2</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在交换机 S3 上 E 0/0/3 端口角色为 Alternate 端口，且状态为丢弃状态，该端口将不会转发数据流量</span></span><br><span class="line">[<span class="variable constant_">S3</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">ALTE</span> <span class="variable constant_">DISCARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="comment">//在交换机 S4 上所有的端口角色都为指定端口，且端口状态都为转发。</span></span><br><span class="line">[<span class="variable constant_">S4</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初步判断四台交换机中 S4 为根交换机，因为该交换机所有端口都为指定端口。通过命令 display stp 查看生成树详细信息</span></span><br><span class="line">[<span class="variable constant_">S4</span>]display stp</span><br><span class="line">-------[<span class="variable constant_">CIST</span> <span class="title class_">Global</span> <span class="title class_">Info</span>][<span class="title class_">Mode</span> <span class="variable constant_">STP</span>]-------</span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Bridge</span> :<span class="number">32768.</span>4c1f-ccac-<span class="number">3733</span></span><br><span class="line"><span class="title class_">Config</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line"><span class="title class_">Active</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Root</span>/<span class="variable constant_">ERPC</span> :<span class="number">32768.</span>4c1f-ccac-<span class="number">3733</span> / <span class="number">0</span></span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">RegRoot</span>/<span class="variable constant_">IRPC</span> :<span class="number">32768.</span>4c1f-ccac-<span class="number">3733</span> / <span class="number">0</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到“CIST Root”和“CIST Bridge”相同，即目前根交换机 ID 与自身的交换机ID 相同，说明目前 S4 为根交换机。</span></span><br></pre></td></tr></table></figure><p>​生成树运算第一步就是通过比较每台交换机的交换机 ID 选举根交换机，交换机 ID 由交换机优先级和 MAC 地址组成。首先比较交换机优先级，数值最低的为根交换机，如果优先级一样，则比较 MAC 地址，同样数值最低的选举为根交换机。<br>​目前在该公司的二层拓扑中，四台交换机的生成树都刚刚开始运行，交换机优先级都为默认值，即都相同，故根据每台交换机的 MAC 地址来选举，通过比较，最终 S4 为根交换机。  </p><h3 id="2、配置网络中的根交换机"><a href="#2、配置网络中的根交换机" class="headerlink" title="2、配置网络中的根交换机"></a>2、配置网络中的根交换机</h3><p>​根交换机的在网络当中的位置是非常重要的，如果选择了一台性能较差的交换机，或者是部署在接入层的交换机作为根交换机，会影响到整个网络的通信质量及数据传输。所以确定根交换机的位置极为重要，根交换机选举依据是根交换机 ID（优先级与 MAC 地址组成），值越小越优先，交换机默认的优先级为 32768，当然该值是可以修改的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//现在将 S1 配置为主根交换机， S2 为备份根交换机，将 S1 的优先级改为 0， S2 的优先级改为 4096。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]stp priority <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]stp priority <span class="number">4096</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后查看 S1 和 S2 的 STP 状态信息。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display stp</span><br><span class="line">-------[<span class="variable constant_">CIST</span> <span class="title class_">Global</span> <span class="title class_">Info</span>][<span class="title class_">Mode</span> <span class="variable constant_">STP</span>]-------</span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Bridge</span> :<span class="number">0</span> .4c1f-cceb-beac</span><br><span class="line"><span class="title class_">Config</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line"><span class="title class_">Active</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Root</span>/<span class="variable constant_">ERPC</span> :<span class="number">0</span> .4c1f-cceb-beac / <span class="number">0</span></span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">RegRoot</span>/<span class="variable constant_">IRPC</span> :<span class="number">0</span> .4c1f-cceb-beac / <span class="number">0</span></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]display stp</span><br><span class="line">-------[<span class="variable constant_">CIST</span> <span class="title class_">Global</span> <span class="title class_">Info</span>][<span class="title class_">Mode</span> <span class="variable constant_">STP</span>]-------</span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Bridge</span> :<span class="number">4096</span> .4c1f-ccbf-cbb5</span><br><span class="line"><span class="title class_">Config</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line"><span class="title class_">Active</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Root</span>/<span class="variable constant_">ERPC</span> :<span class="number">0</span> .4c1f-cceb-beac / <span class="number">1</span></span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">RegRoot</span>/<span class="variable constant_">IRPC</span> :<span class="number">4096</span> .4c1f-ccbf-cbb5 / <span class="number">0</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//通过观察发现 S1 的优先级变为了 0，为根交换机，而 S2 的优先级变为了 4096，为备份根交换机。</span></span><br></pre></td></tr></table></figure><p>也可以使用另外一种方式配置主根交换机和备份根交换机。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除在 S1 上所配置的优先级，使用命令 stp root primary 配置主根交换机。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]undo stp priority</span><br><span class="line">[<span class="variable constant_">S1</span>]stp root primary</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除在 S2 上所配置的优先级，使用命令 stp root secondary 配置备份根交换机。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]undo stp priority</span><br><span class="line">[<span class="variable constant_">S2</span>]stp root secondary</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后查看 STP 的状态信息。——结果与第一种方法一样，此处不展示了</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>到这里配置部分就结束了，需要的功能都已经基本实现，之后3、4的部分是理解STP原理以及端口选举的详细设置，不需要的话可跳过。</p></blockquote><h3 id="3、理解根端口的选举"><a href="#3、理解根端口的选举" class="headerlink" title="3、理解根端口的选举"></a>3、理解根端口的选举</h3><p>​生成树在选举出根交换机之后，将在每台非根交换机上选举根端口。选举时首先比较该交换机上每个端口到达根交换机的根路径开销，路径开销最小的端口将成为根端口。如果根路径开销值相同，则比较每个端口所在链路上的上行交换机的交换机 ID，如果该交换机 ID也相同，则比较每个端口所在链路上的上行端口的端口 ID。每台交换机上只能拥有一个根端口。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据上一步骤，目前 S1 为主根交换机，而 S2 为备份根交换机，查看 S4 上生成树信息。</span></span><br><span class="line">[<span class="variable constant_">S4</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">ALTE</span> <span class="variable constant_">DISCARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="comment">//可以观察到，现在 S4 的 E 0/0/2 为根端口，状态为转发状态。这是由于在 S4 选举根端口时，首先比较根路径开销，由于拓扑中所有链路都是相同的百兆以太网链路， S4 经过 S3到 S1 与经过 S2 到 S1 的开销值相同，接下来比较 S4 的两台上行链路的交换机 S2 和 S3 的交换机标识， S2 目前的交换机优先级为 4096，而 S3 为默认的 32768，所以与 S2 连接 S4的 E0/0/2 接口被选为根端口。  </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看 S4 的 E 0/0/2 接口开销值。</span></span><br><span class="line">&lt;<span class="variable constant_">S4</span>&gt;display stp interface <span class="title class_">Ethernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">----[<span class="title class_">Port2</span>(<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>)][<span class="variable constant_">FORWARDING</span>]----</span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Protocol</span> :<span class="title class_">Enabled</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Role</span> :<span class="title class_">Root</span> <span class="title class_">Port</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Priority</span> :<span class="number">128</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Cost</span>(<span class="title class_">Dot1T</span> ) :<span class="title class_">Config</span>=auto / <span class="title class_">Active</span>=<span class="number">1</span></span><br><span class="line"><span class="title class_">Designated</span> <span class="title class_">Bridge</span>/<span class="title class_">Port</span> :<span class="number">4096.</span>4c1f-ccbf-cbb5 / <span class="number">128.2</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到，接口路径开销采用的是 Dot1t 的计算方法， Config 是指手工配置的路径开销， Active 是实际使用的路径开销，开销值为 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置 S4 的 E 0/0/2 接口的代价值为 2000，即增加该接口默认的代价值。</span></span><br><span class="line">[<span class="variable constant_">S4</span>]interface ethernet0/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S4</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>]stp cost <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后再次查看 S4 的 E 0/0/2 接口开销值以及 STP 状态摘要信息。</span></span><br><span class="line">&lt;<span class="variable constant_">S4</span>&gt;display stp interface <span class="title class_">Ethernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">----[<span class="title class_">Port2</span>(<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>)][<span class="variable constant_">DISCARDING</span>]----</span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Protocol</span> :<span class="title class_">Enabled</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Role</span> :<span class="title class_">Alternate</span> <span class="title class_">Port</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Priority</span> :<span class="number">128</span></span><br><span class="line"><span class="title class_">Port</span> <span class="title class_">Cost</span>(<span class="title class_">Dot1T</span> ) :<span class="title class_">Config</span>=<span class="number">2000</span> / <span class="title class_">Active</span>=<span class="number">2000</span></span><br><span class="line"><span class="title class_">Designated</span> <span class="title class_">Bridge</span>/<span class="title class_">Port</span> :<span class="number">4096.</span>4c1f-ccbf-cbb5 / <span class="number">128.2</span></span><br><span class="line">……</span><br><span class="line">[<span class="variable constant_">S4</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">ALTE</span> <span class="variable constant_">DISCARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发现此时 E 0/0/1 端口角色变成了根端口，而 E 0/0/2 变成了 Alternate 端口。这是由于将 E 0/0/2 接口的开销修改为 2000 之后，在选举根端口时，其到根路径开销大于 E 0/0/1 的根路径开销。</span></span><br></pre></td></tr></table></figure><h3 id="4、理解指定端口的选举"><a href="#4、理解指定端口的选举" class="headerlink" title="4、理解指定端口的选举"></a>4、理解指定端口的选举</h3><p>​生成树协议在每台非根交换机选举出根端口之后，将在每个网段上选举指定端口，选举的比较规则和选举根端口类似。</p><p>​现在网络管理员需要确保 S2 连接 S3 的 E 0&#x2F;0&#x2F;3 接口被选择为指定端口，可以通过修改端口开销值来实现。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了模拟该场景，将 S2 的优先级恢复为默认的 32768。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]undo stp root</span><br><span class="line"><span class="comment">//配置完成后，查看 S2 的 STP 状态信息。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]display stp</span><br><span class="line">-------[<span class="variable constant_">CIST</span> <span class="title class_">Global</span> <span class="title class_">Info</span>][<span class="title class_">Mode</span> <span class="variable constant_">STP</span>]-------</span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Bridge</span> :<span class="number">32768.</span>4c1f-ccfa-a769</span><br><span class="line"><span class="title class_">Config</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">//S2 的优先级已经变成了 32768</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看 S2 与 S3 的 STP 状态摘要信息。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">ALTE</span> <span class="variable constant_">DISCARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line">[<span class="variable constant_">S3</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">10</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">11</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="comment">//通过观察发现在 S2 与 S3 间的链路上，选择了 S3 的 E 0/0/3 接口为指定端口，而 S2 的E 0/0/3 接口为 Alternate 端口。这是由于在选举指定端口时，首先比较两个端口的根路径开销，目前都相同，接着比较上行交换机的交换机 ID，此时 S2 和 S3 的交换机优先级相同，故比较 MAC 地址，最后通过比较 MAC 地址得出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看 S2 和 S3 的 E 0/0/3 接口信息。</span></span><br><span class="line">&lt;<span class="variable constant_">S2</span>&gt;display interface <span class="title class_">Ethernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line"><span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> current state : <span class="variable constant_">UP</span></span><br><span class="line">……</span><br><span class="line"><span class="title class_">Current</span> system <span class="attr">time</span>: <span class="number">2013</span>-<span class="number">08</span>-<span class="number">30</span> <span class="number">13</span>:<span class="number">48</span>:<span class="number">06</span>-<span class="number">08</span>:<span class="number">00</span></span><br><span class="line"><span class="title class_">Hardware</span> address is 4c1f-ccbf-cbb5</span><br><span class="line"><span class="title class_">Last</span> <span class="number">300</span> seconds input rate <span class="number">0</span> bytes/sec, <span class="number">0</span> packets/sec</span><br><span class="line">……</span><br><span class="line">&lt;<span class="variable constant_">S3</span>&gt;display interface <span class="title class_">Ethernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line"><span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> current state : <span class="variable constant_">UP</span></span><br><span class="line">……</span><br><span class="line"><span class="title class_">Current</span> system <span class="attr">time</span>: <span class="number">2013</span>-<span class="number">08</span>-<span class="number">30</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">15</span>-<span class="number">08</span>:<span class="number">00</span></span><br><span class="line"><span class="title class_">Hardware</span> address is 4c1f-cc00-58df</span><br><span class="line"><span class="title class_">Last</span> <span class="number">300</span> seconds input rate <span class="number">0</span> bytes/sec, <span class="number">0</span> packets/sec</span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到， S2 上 E 0/0/3 接口的 MAC 地址大于 S3 上 E0/0/3 接口的 MAC 地址，所以该网段上 S3 的 E0/0/3 接口成为指定接口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改 S3 的 E 0/0/2 接口的开销值，将该值增大（默认为 1），即增大该端口上的根路径开销，确保让 S2 的 E 0/0/3 接口成为指定端口</span></span><br><span class="line">[<span class="variable constant_">S3</span>]interface <span class="title class_">Ethernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S3</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span>]stp cost <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后查看 S2 的 STP 状态摘要信息。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="comment">//根据 STP 计算规则选择指定端口时，最终选择 S2 的 E0/0/3 接口作为指定端口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为了验证现在能够确保S2的E0/0/3接口能成为指定端口，将S3的优先级调整为4096，并查看。</span></span><br><span class="line">[<span class="variable constant_">S3</span>]stp priority <span class="number">4096</span></span><br><span class="line">[<span class="variable constant_">S3</span>]display stp</span><br><span class="line">-------[<span class="variable constant_">CIST</span> <span class="title class_">Global</span> <span class="title class_">Info</span>][<span class="title class_">Mode</span> <span class="variable constant_">STP</span>]-------</span><br><span class="line"><span class="variable constant_">CIST</span> <span class="title class_">Bridge</span> :<span class="number">4096</span> .4c1f-cc00-58df</span><br><span class="line"><span class="title class_">Config</span> <span class="title class_">Times</span> :<span class="title class_">Hello</span> 2s <span class="title class_">MaxAge</span> 20s <span class="title class_">FwDly</span> 15s <span class="title class_">MaxHop</span> <span class="number">20</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//配置完成后观察到 S3 的优先级已调整为 4096。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//再次查看 S2 和 S3 的 STP 状态。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line">[<span class="variable constant_">S3</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">ALTE</span> <span class="variable constant_">DISCARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//通过观察，即使修改了 S3 的优先级，目前比 S2 的优先级值更低，但是 S2 的 E 0/0/3接口仍然为指定端口，而 S3 的 E 0/0/3 接口还是 Alternate 端口。验证了在选举指定端口时首先比较根路径开销的规则。</span></span><br></pre></td></tr></table></figure><p><strong>在选举指定端口时首先比较根路径开销</strong></p><blockquote><p>RSTP和MSTP在STP的基础上进行了改进，本次项目暂时不需要新增的功能，因此跳过这一部分。</p></blockquote><h1 id="5、其他交换技术"><a href="#5、其他交换技术" class="headerlink" title="5、其他交换技术"></a>5、其他交换技术</h1><h2 id="5-1、Eth-Trunk链路交换技术"><a href="#5-1、Eth-Trunk链路交换技术" class="headerlink" title="5.1、Eth-Trunk链路交换技术"></a>5.1、Eth-Trunk链路交换技术</h2><p><strong>原理概述：</strong></p><p>​在没有使用 Eth-Trunk 前，百兆以太网的双绞线在两个互连的网络设备间的带宽仅为100Mbit&#x2F;s。若想达到更高的数据传输速率，则需要更换传输媒介，使用千兆光纤或升级成为千兆以太网。这样的解决方案成本较高。如果采用 Eth-Trunk 技术把多个接口捆绑在一起，则可以以较低的成本满足提高接口带宽的需求。例如，把 3 个 100Mbit&#x2F;s 的全双工接口捆绑在一起，就可以达到 300Mbit&#x2F;s 的最大带宽。</p><p>​Eth-Trunk 是一种捆绑技术，它将多个物理接口捆绑成一个逻辑接口，这个逻辑接口就称为 Eth-Trunk 接口，捆绑在一起的每个物理接口称为成员接口。 Eth-Trunk 只能由以太网链路构成。 Trunk 的优势在于：</p><p>​负载分担， 在一个 Eth-Trunk 接口内，可以实现流量负载分担；</p><p>​提高可靠性， 当某个成员接口连接的物理链路出现故障时，流量会切换到其他可用的链路上，从而提高整个 Trunk 链路的可靠性；</p><p>​增加带宽，Trunk 接口的总带宽是各成员接口带宽之和。</p><p>​Eth-Trunk 在逻辑上把多条物理链路捆绑等同于一条逻辑链路，对上层数据透明传输。所有 Eth-Trunk 中物理接口的参数必须一致， Eth-Trunk 链路两端要求一致的物理参数有：<strong>Eth-Trunk 链路两端相连的物理接口类型、物理接口数量、 物理接口的速率、 物理接口的双工方式以及物理接口的流控方式</strong>  </p><p>###拓扑及设备信息：</p><p>本实验模拟企业网络环境， S1 和 S2 为企业核心交换机， PC-1 属于 A 部门终端设备，PC-2 属于 B 部门终端设备。 根据企业规划， S1 和 S2 之间线路原由 1 条光纤线路相连，但是由于带宽和冗余角度考虑需要对其进行升级， 需要使用 Eth-Trunk 实现此需求。  </p><p><img src="https://img-blog.csdnimg.cn/4e7e1884ecc446cc82bb1d9152b2a6aa.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/75ca076d9135417eadf915d38f958c19.png" alt="请添加图片描述"></p><h3 id="1、基本配置-1"><a href="#1、基本配置-1" class="headerlink" title="1、基本配置"></a>1、基本配置</h3><p>检测连通性，此处省略</p><p>由于本实验场景需要，请首先将 S1 与 S2 上互连的 GE 0&#x2F;0&#x2F;2 和 GE 0&#x2F;0&#x2F;5 接口关闭。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]shutdown</span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">5</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">5</span>]shutdown</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]shutdown</span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">5</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">5</span>]shutdown</span><br></pre></td></tr></table></figure><h3 id="2、未配置Eth-Trunk时的现象验证"><a href="#2、未配置Eth-Trunk时的现象验证" class="headerlink" title="2、未配置Eth-Trunk时的现象验证"></a>2、未配置Eth-Trunk时的现象验证</h3><p>通过增加链路的方式来提升带宽。在原有的网络基础上再增加一条链路来提高带宽，原链路只有一条，带宽为 1Gb&#x2F;s，再增加一条链路，将带宽增加到 2Gb&#x2F;s。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟链路增加，开启 S1 和 S2 上的 GE 0/0/2 接口。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo shutdown</span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加链路后，在该组网拓扑下，默认开启的 STP 协议一定会将其中一条链路阻塞掉</span></span><br><span class="line"><span class="comment">//查看 S1 和 S2 的 STP 状态信息。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line">[<span class="variable constant_">S2</span>]display stp brief</span><br><span class="line"><span class="variable constant_">MSTID</span> <span class="title class_">Port</span> <span class="title class_">Role</span> <span class="variable constant_">STP</span> <span class="title class_">State</span> <span class="title class_">Protection</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="variable constant_">ROOT</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="variable constant_">ALTE</span> <span class="variable constant_">DISCARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="number">0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">3</span> <span class="variable constant_">DESI</span> <span class="variable constant_">FORWARDING</span> <span class="variable constant_">NONE</span></span><br><span class="line"><span class="comment">//可以观察到 S2 的 GE 0/0/2 接口处于丢弃状态。如果要实质性的增加 S1 和 S2 之间的带宽，显然单靠增加链路条数是不够的。 生成树会阻塞多余接口， 使得目前 S1 与 S2 之间的数据仍然仅通过 GE 0/0/1 接口传输。</span></span><br></pre></td></tr></table></figure><h3 id="3、配置Eth-Trunk实现链路聚合（手工负载分担模式）"><a href="#3、配置Eth-Trunk实现链路聚合（手工负载分担模式）" class="headerlink" title="3、配置Eth-Trunk实现链路聚合（手工负载分担模式）"></a>3、配置Eth-Trunk实现链路聚合（手工负载分担模式）</h3><p>​通过上一步骤，发现仅靠简单增加互联的链路，不但无法解决目前带宽不够用的问题，还会再切换时带来断网的问题，显然是不合理的。此时通过配置 Eth-Trunk 链路聚合来增加链路带宽，并可确保冗余链路被使用。</p><p><strong>Eth-Trunk 工作模式可以分为两种：</strong></p><ul><li>手工负载分担模式：需要手动创建链路聚合组，并配置多个接口加入到所创建的Eth-trunk 中。</li><li>静态 LACP 模式：该模式通过 LACP 协议协商 Eth-trunk 参数后并自主选择活动接口。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 S1 和 S2 上配置链路聚合，创建 Eth-Trunk 1 接口，并指定为手工负载分担模式。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]mode manual load-balance</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]mode manual load-balance</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 S1 和 S2 的 GE 0/0/1 和 GE 0/0/2 分别加入到 Eth-Trunk 1 接口。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]eth-trunk <span class="number">1</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]eth-trunk <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后， 使用 display eth-trunk 命令查看 S1 和 S2 的 Eth-Trunk 1 接口状态。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display eth-trunk <span class="number">1</span></span><br><span class="line"><span class="title class_">Eth</span>-<span class="title class_">Trunk1</span><span class="string">&#x27;s state information is:</span></span><br><span class="line"><span class="string">WorkingMode: NORMAL Hash arithmetic: According to SIP-XOR-DIP</span></span><br><span class="line"><span class="string">Least Active-linknumber: 1 Max Bandwidth-affected-linknumber: 8</span></span><br><span class="line"><span class="string">Operate status: up Number Of Up Port In Trunk: 2</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">PortName Status Weight</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/1 Up 1</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/2 Up 1</span></span><br><span class="line"><span class="string">[S2]display eth-trunk 1</span></span><br><span class="line"><span class="string">Eth-Trunk1&#x27;</span>s state information <span class="attr">is</span>:</span><br><span class="line"><span class="title class_">WorkingMode</span>: <span class="variable constant_">NORMAL</span> <span class="title class_">Hash</span> <span class="attr">arithmetic</span>: <span class="title class_">According</span> to <span class="variable constant_">SIP</span>-<span class="variable constant_">XOR</span>-<span class="variable constant_">DIP</span></span><br><span class="line"><span class="title class_">Least</span> <span class="title class_">Active</span>-<span class="attr">linknumber</span>: <span class="number">1</span> <span class="title class_">Max</span> <span class="title class_">Bandwidth</span>-affected-<span class="attr">linknumber</span>: <span class="number">8</span></span><br><span class="line"><span class="title class_">Operate</span> <span class="attr">status</span>: up <span class="title class_">Number</span> <span class="title class_">Of</span> <span class="title class_">Up</span> <span class="title class_">Port</span> <span class="title class_">In</span> <span class="title class_">Trunk</span>: <span class="number">2</span></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">PortName</span> <span class="title class_">Status</span> <span class="title class_">Weight</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="title class_">Up</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="title class_">Up</span> <span class="number">1</span></span><br><span class="line"><span class="comment">//可以观察到，S1与S2的工作模式为NORMAL（手工负载分担方式），GE 0/0/1与GE 0/0/2接口已经添加到 Eth-Trunk 1 中，并且处于 UP 状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 display interface eth-trunk 命令查看 S2 的 Eth-Trunk 1 接口信息。</span></span><br><span class="line">[<span class="variable constant_">S2</span>]display interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">Eth</span>-<span class="title class_">Trunk1</span> current state : <span class="variable constant_">UP</span></span><br><span class="line"><span class="title class_">Line</span> protocol current state : <span class="variable constant_">UP</span></span><br><span class="line"><span class="title class_">Description</span>:</span><br><span class="line"><span class="title class_">Switch</span> <span class="title class_">Port</span>, <span class="variable constant_">PVID</span> : <span class="number">1</span>, <span class="title class_">Hash</span> arithmetic : <span class="title class_">According</span> to <span class="variable constant_">SIP</span>-<span class="variable constant_">XOR</span>-<span class="variable constant_">DIP</span>,<span class="title class_">Maximal</span> <span class="attr">BW</span>:</span><br><span class="line"><span class="number">4294967.</span>29G, <span class="title class_">Current</span> <span class="attr">BW</span>: <span class="number">4294967.</span>29G, <span class="title class_">The</span> <span class="title class_">Maximum</span> <span class="title class_">Frame</span> <span class="title class_">Length</span> is <span class="number">9216</span></span><br><span class="line"><span class="variable constant_">IP</span> <span class="title class_">Sending</span> <span class="title class_">Frames</span><span class="string">&#x27; Format is PKTFMT_ETHNT_2, Hardware address is 4c1f-cc71-68d4</span></span><br><span class="line"><span class="string">Current system time: 2013-06-29 22:34:26-08:00</span></span><br><span class="line"><span class="string">Input bandwidth utilization : 0%</span></span><br><span class="line"><span class="string">Output bandwidth utilization : 0%</span></span><br><span class="line"><span class="string">-----------------------------------------------------</span></span><br><span class="line"><span class="string">PortName Status Weight</span></span><br><span class="line"><span class="string">-----------------------------------------------------</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/1 UP 1</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/2 UP 1</span></span><br><span class="line"><span class="string">-----------------------------------------------------</span></span><br><span class="line"><span class="string">The Number of Ports in Trunk : 2</span></span><br><span class="line"><span class="string">The Number of UP Ports in Trunk : 2</span></span><br><span class="line"><span class="string">//可以观察到，目前该接口的总带宽，是 GE 0/0/1 和 GE 0/0/2 接口带宽之和:Maximal BW:</span></span><br><span class="line"><span class="string">4294967.29G</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//查看 S2 接口的生成树状态。</span></span><br><span class="line"><span class="string">[S2]display stp brief</span></span><br><span class="line"><span class="string">MSTID Port Role STP State Protection</span></span><br><span class="line"><span class="string">0 GigabitEthernet0/0/3 DESI FORWARDING NONE</span></span><br><span class="line"><span class="string">0 Eth-Trunk1 ROOT FORWARDING NONE</span></span><br><span class="line"><span class="string">//可以观察到， S2 的 2 个接口被捆绑成一个 Eth-Trunk 接口，并且该接口现在处于转发状态。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//使用 ping 命令持续测试，同时将 S2 的 GE 0/0/1 或者 GE 0/0/2 接口关闭模拟故障发生。</span></span><br><span class="line"><span class="string">PC&gt;ping 10.0.1.2 -t</span></span><br><span class="line"><span class="string">Ping 10.0.1.2: 32 data bytes, Press Ctrl_C to break</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=1 ttl=128 time=63 ms</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=2 ttl=128 time=31 ms</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=3 ttl=128 time=31 ms</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=4 ttl=128 time=16 ms</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=5 ttl=128 time=31 ms</span></span><br><span class="line"><span class="string">Request timeout!</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=7 ttl=128 time=47 ms</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=8 ttl=128 time=15 ms</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=9 ttl=128 time=31 ms</span></span><br><span class="line"><span class="string">From 10.0.1.2: bytes=32 seq=10 ttl=128 time=16 ms</span></span><br><span class="line"><span class="string">//可以观察到，当链路故障发生时，链路立刻进行切换，数据包仅丢了一个，并且只要物理链路有一条是正常的， Eth-Trunk 接口就不会断开，仍然可以保证数据的转发。 Eth-Trunk在提高了带宽的情况下，也实现了链路冗余。 模拟完成后将 S2 接口恢复。</span></span><br></pre></td></tr></table></figure><h3 id="4、配置Eth-Trunk实现链路聚合（静态LACP模式）"><a href="#4、配置Eth-Trunk实现链路聚合（静态LACP模式）" class="headerlink" title="4、配置Eth-Trunk实现链路聚合（静态LACP模式）"></a>4、配置Eth-Trunk实现链路聚合（静态LACP模式）</h3><pre><code>    在上一步骤中，两条链路中，假设一条链路出现了故障，只有一条链路正常工作的情况</code></pre><p>下无法保证带宽。现在再部署一条链路作为备份链路，并采用静态 LACP模式配置 Eth-Trunk 实现两条链路同时转发，一条链路备份，当其中一条转发链路出现问题的时候，备份链路可立即进行数据转发 。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启 S1 与 S2 上的 GE 0/0/5 接口模拟增加了一条新链路。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">5</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">5</span>]undo shutdown</span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">5</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">5</span>]undo shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 S1 和 S2 上的 Eth-Trunk 1 接口下，将工作模式改为静态 LACP 模式。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]mode lacp-<span class="keyword">static</span></span><br><span class="line"><span class="title class_">Error</span>: <span class="title class_">Error</span> <span class="keyword">in</span> changing trunk working mode. <span class="title class_">There</span> <span class="title function_">is</span>(are) <span class="title function_">port</span>(s) <span class="keyword">in</span> the trunk.</span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]mode lacp-<span class="keyword">static</span></span><br><span class="line"><span class="title class_">Error</span>: <span class="title class_">Error</span> <span class="keyword">in</span> changing trunk working mode. <span class="title class_">There</span> <span class="title function_">is</span>(are) <span class="title function_">port</span>(s) <span class="keyword">in</span> the trunk.</span><br><span class="line"></span><br><span class="line"><span class="comment">//发现报错，此时需要将先前已经加入到 Eth-Trunk 接口下的物理接口先删除。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]undo eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo eth-trunk <span class="number">1</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]undo eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]undo eth-trunk <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除完成后，再在 S1 和 S2 上的 Eth-Trunk 1 接口下，将工作模式改为静态 LACP 模式，并将 S1 和 S2 的 GE 0/0/1， GE 0/0/2 和 GE 0/0/5 接口分别加入到 Eth-Trunk 1 接口。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]mode lacp-<span class="keyword">static</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">5</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">5</span>]eth-trunk <span class="number">1</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">S2</span>]interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]mode lacp-<span class="keyword">static</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]eth-trunk <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">5</span></span><br><span class="line">[<span class="variable constant_">S2</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">5</span>]eth-trunk <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，查看 S1 的 Eth-Trunk 1 接口状态。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display eth-trunk <span class="number">1</span></span><br><span class="line"><span class="title class_">Eth</span>-<span class="title class_">Trunk1</span><span class="string">&#x27;s state information is:</span></span><br><span class="line"><span class="string">Local:</span></span><br><span class="line"><span class="string">LAG ID: 1 WorkingMode: STATIC</span></span><br><span class="line"><span class="string">Preempt Delay: Disabled Hash arithmetic: According to SIP-XOR-DIP</span></span><br><span class="line"><span class="string">System Priority: 32768 System ID: 4c1f-cc55-b90f</span></span><br><span class="line"><span class="string">Least Active-linknumber: 1 Max Active-linknumber: 8</span></span><br><span class="line"><span class="string">Operate status: up Number Of Up Port In Trunk: 3</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">//可以观察到，三个接口默认都处于活动状态（ Selected）。</span></span><br><span class="line"><span class="string">ActorPortName Status PortType PortPri PortNo PortKey PortState Weight</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/2 Selected 1000TG 32768 3 401 10111100 1</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/1 Selected 1000TG 32768 2 401 10111100 1</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/5 Selected 1000TG 32768 6 401 10111100 1</span></span><br><span class="line"><span class="string">Partner:</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">ActorPortName SysPri SystemID PortPri PortNo PortKey PortState</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/2 32768 4c1f-cc71-68d4 32768 3 401 10111100</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/1 32768 4c1f-cc71-68d4 32768 2 401 10111100</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/5 32768 4c1f-cc71-68d4 32768 6 401 10111100</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//将 S1 的系统优先级从默认的 32768 改为 100，使其成为主动端（值越低优先级越高）。按照主动端设备的接口来选择活动接口。 两端设备选出主动端后， 两端都会以主动端的接口优先级来选择活动接口。两端设备选择了一致的活动接口，活动链路组便可以建立起来，从这些活动链路中以负载分担的方式转发数据。</span></span><br><span class="line"><span class="string">[S1]lacp priority 100</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//配置完成后，查看 S1 的 Eth-Trunk 1 接口状态。</span></span><br><span class="line"><span class="string">[S1]display eth-trunk 1</span></span><br><span class="line"><span class="string">Eth-Trunk1&#x27;</span>s state information <span class="attr">is</span>:</span><br><span class="line"><span class="title class_">Local</span>:</span><br><span class="line"><span class="variable constant_">LAG</span> <span class="attr">ID</span>: <span class="number">1</span> <span class="title class_">WorkingMode</span>: <span class="variable constant_">STATIC</span></span><br><span class="line"><span class="title class_">Preempt</span> <span class="title class_">Delay</span>: <span class="title class_">Disabled</span> <span class="title class_">Hash</span> <span class="attr">arithmetic</span>: <span class="title class_">According</span> to <span class="variable constant_">SIP</span>-<span class="variable constant_">XOR</span>-<span class="variable constant_">DIP</span></span><br><span class="line"><span class="title class_">System</span> <span class="title class_">Priority</span>: <span class="number">100</span> <span class="title class_">System</span> <span class="attr">ID</span>: 4c1f-cc55-b90f</span><br><span class="line"><span class="title class_">Least</span> <span class="title class_">Active</span>-<span class="attr">linknumber</span>: <span class="number">1</span> <span class="title class_">Max</span> <span class="title class_">Active</span>-<span class="attr">linknumber</span>: <span class="number">8</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到，已经将 S1 的 LACP 系统优先级改为 100，而 S2 没修改，仍为默认值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在 S1 上配置活动接口上限阈值为 2。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">Eth</span>-<span class="title class_">Trunk</span> <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">Eth</span>-<span class="title class_">Trunk1</span>]max active-linknumber <span class="number">2</span></span><br><span class="line"><span class="comment">//在 S1 上配置接口的优先级确定活动链路。</span></span><br><span class="line"><span class="comment">//配置接口的活动优先级将默认的 32768 改为 100，目的是为了使得 GE 0/0/1 和 GE 0/0/2接口成为活动状态。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]lacp priority <span class="number">100</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line">[<span class="variable constant_">S1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span>]lacp priority <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，查看 S1 的 Eth-Trunk 1 接口状态。</span></span><br><span class="line">[<span class="variable constant_">S1</span>]display eth-trunk <span class="number">1</span></span><br><span class="line"><span class="title class_">Eth</span>-<span class="title class_">Trunk1</span><span class="string">&#x27;s state information is:</span></span><br><span class="line"><span class="string">Local:</span></span><br><span class="line"><span class="string">LAG ID: 1 WorkingMode: STATIC</span></span><br><span class="line"><span class="string">Preempt Delay: Disabled Hash arithmetic: According to SIP-XOR-DIP</span></span><br><span class="line"><span class="string">System Priority: 100 System ID: 4c1f-cc55-b90f</span></span><br><span class="line"><span class="string">Least Active-linknumber: 1 Max Active-linknumber: 2</span></span><br><span class="line"><span class="string">Operate status: up Number Of Up Port In Trunk: 2</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">ActorPortName Status PortType PortPri PortNo PortKey PortState Weight</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/2 Selected 1000TG 100 3 401 10111100 1</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/1 Selected 1000TG 100 2 401 10111100 1</span></span><br><span class="line"><span class="string">GigabitEthernet0/0/5 Unselect 1000TG 32768 6 401 10100000 1</span></span><br><span class="line"><span class="string">Partner:</span></span><br><span class="line"><span class="string">……</span></span><br><span class="line"><span class="string">//可以观察到，由于将接口的阈值改为 2（默认活动接口最大阈值为 8），该 Eth-Trunk 接口下将只有两个成员处于活动状态，并且具有负载分担能力。而 GE 0/0/5 接口已处于不活动状态（ Unselect），该链路作为备份链路。当活动链路出现故障时，备份链路将会替代故障链路，保持数据传输的可靠性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//将 S1 的 GE 0/0/1 接口关闭，验证 Eth-Trunk 链路聚合信息。</span></span><br><span class="line"><span class="string">[S1]interface GigabitEthernet 0/0/1</span></span><br><span class="line"><span class="string">[S1-GigabitEthernet0/0/1]shutdown</span></span><br><span class="line"><span class="string">[S1-GigabitEthernet0/0/1]display eth-trunk 1</span></span><br><span class="line"><span class="string">Eth-Trunk1&#x27;</span>s state information <span class="attr">is</span>:</span><br><span class="line"><span class="title class_">Local</span>:</span><br><span class="line"><span class="variable constant_">LAG</span> <span class="attr">ID</span>: <span class="number">1</span> <span class="title class_">WorkingMode</span>: <span class="variable constant_">STATIC</span></span><br><span class="line"><span class="title class_">Preempt</span> <span class="title class_">Delay</span>: <span class="title class_">Disabled</span> <span class="title class_">Hash</span> <span class="attr">arithmetic</span>: <span class="title class_">According</span> to <span class="variable constant_">SIP</span>-<span class="variable constant_">XOR</span>-<span class="variable constant_">DIP</span></span><br><span class="line"><span class="title class_">System</span> <span class="title class_">Priority</span>: <span class="number">100</span> <span class="title class_">System</span> <span class="attr">ID</span>: 4c1f-cc27-e139</span><br><span class="line"><span class="title class_">Least</span> <span class="title class_">Active</span>-<span class="attr">linknumber</span>: <span class="number">1</span> <span class="title class_">Max</span> <span class="title class_">Active</span>-<span class="attr">linknumber</span>: <span class="number">2</span></span><br><span class="line"><span class="title class_">Operate</span> <span class="attr">status</span>: up <span class="title class_">Number</span> <span class="title class_">Of</span> <span class="title class_">Up</span> <span class="title class_">Port</span> <span class="title class_">In</span> <span class="title class_">Trunk</span>: <span class="number">2</span></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">ActorPortName</span> <span class="title class_">Status</span> <span class="title class_">PortType</span> <span class="title class_">PortPri</span> <span class="title class_">PortNo</span> <span class="title class_">PortKey</span> <span class="title class_">PortState</span> <span class="title class_">Weight</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="title class_">Unselect</span> 1GE <span class="number">100</span> <span class="number">2</span> <span class="number">305</span> <span class="number">10100010</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">2</span> <span class="title class_">Selected</span> 1GE <span class="number">100</span> <span class="number">3</span> <span class="number">305</span> <span class="number">10111100</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">5</span> <span class="title class_">Selected</span> 1GE <span class="number">32768</span> <span class="number">6</span> <span class="number">305</span> <span class="number">10111100</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">Partner</span>:</span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到， S1 的 GE 0/0/1 接口已经处于不活动状态，而 GE 0/0/5 接口为活动状态。将 S1 的 GE 0/0/1 接口开启后，又会恢复为活动状态，GE 0/0/5 则为不活动状态，现象省略。</span></span><br></pre></td></tr></table></figure><p>至此，完成了整个 Eth-Trunk 的部署。  </p><h1 id="6、OSPF"><a href="#6、OSPF" class="headerlink" title="6、OSPF"></a>6、OSPF</h1><p>开放式最短路径优先（Open Shortest Path First，OSPF）是广泛使用的一种动态路由协议，它属于链路状态路由协议，具有路由变化收敛速度快、无路由环路、支持变长子网掩码（VLSM）和汇总、层次区域划分等优点。</p><h2 id="6-1、OSPF单区域设置"><a href="#6-1、OSPF单区域设置" class="headerlink" title="6.1、OSPF单区域设置"></a>6.1、OSPF单区域设置</h2><p><strong>原理概述：</strong></p><p>​OSPF 作为基于链路状态的协议，具有收敛快、路由无环、 扩展性好等优点， 被快速接受并广泛使用。 链路状态算法路由协议互相通告的是链路状态信息，每台路由器都将自己的链路状态信息（包含接口的 IP 地址和子网掩码、 网络类型、 该链路的开销等）发送给其他路由器， 并在网络中泛洪， 当每台路由器收集到网络内所有链路状态信息后，就能拥有整个网络的拓扑情况，然后根据整网拓扑情况运行 SPF 算法，得出到所有网段的最短路径。  </p><p>​OSPF 支持区域的划分， 区域是从逻辑上将路由器划分为不同的组，每个组用区域号（ Area ID）来标识。一个网段（链路）只能属于一个区域，或者说每个运行 OSPF 的接口必须指明属于哪一个区域。 区域 0 为骨干区域，骨干区域负责在非骨干区域之间发布区域间的路由信息， 在一个 OSPF 区域中只能有一个骨干区域。  </p><h3 id="拓扑及设备信息：-7"><a href="#拓扑及设备信息：-7" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>本实验模拟企业网络场景，该公司有三大办公区，每个办公区放置了一台路由器， R1<br>放在办公区 A， A 区经理的 PC-1 直接连接 R1； R2 放在办公区 B， B 区经理的 PC-2 直接连<br>接到 R2； R3 放在办公区 C， C 区经理的 PC-3 直接连接到 R3；三台路由器都互相直连，为<br>了能使整个公司网络互相通信，需要在所有路由器上部署路由协议，考虑到公司未来的发展<br>（部门的增加和分公司的成立）， 为了适应不断扩展的网络的需求，公司在所有路由器上部<br>署 OSPF 协议，且现在所有路由器都属于骨干区域。  </p><p><img src="https://img-blog.csdnimg.cn/e76f99f341b44bc784a55b461d69d969.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/f1b140333d0a430c8ae23b35f5d1c4f6.png" alt="请添加图片描述"></p><h3 id="1、部署单区域OSPF网络"><a href="#1、部署单区域OSPF网络" class="headerlink" title="1、部署单区域OSPF网络"></a>1、部署单区域OSPF网络</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先使用命令 ospf 创建并运行 OSPF。</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;system-view</span><br><span class="line">[<span class="variable constant_">R1</span>]ospf <span class="number">1</span></span><br><span class="line"><span class="comment">//1代表的是进程号，如果没有写明进程号，默认是 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接着使用命令 area 创建区域并进入 OSPF 区域视图， 输入要创建的区域 ID。由于本实验为 OSPF 单区域配置，所以使用骨干区域，即区域 0 即可。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//再使用 network 命令来指定运行 OSPF 协议的接口和接口所属的区域。本实验中 R1 上的三个物理接口都需要指定。配置中需注意， 尽量精确匹配所通告的网段</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.10</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.20</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后使用命令 display ospf interface 检查 OSPF 接口通告是否正确。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]display ospf interface</span><br><span class="line"><span class="variable constant_">OSPF</span> <span class="title class_">Process</span> <span class="number">1</span> <span class="keyword">with</span> <span class="title class_">Router</span>-<span class="variable constant_">ID</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Interfaces</span></span><br><span class="line"><span class="title class_">Area</span>: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> (<span class="variable constant_">MPLS</span> <span class="variable constant_">TE</span> not enabled)</span><br><span class="line"><span class="variable constant_">IP</span> <span class="title class_">Address</span> <span class="title class_">Type</span> <span class="title class_">State</span> <span class="title class_">Cost</span> <span class="title class_">Pri</span> <span class="variable constant_">DR</span> <span class="variable constant_">BDR</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span> <span class="title class_">Broadcast</span> <span class="variable constant_">DR</span> <span class="number">1</span> <span class="number">1</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.10</span><span class="number">.1</span> <span class="title class_">Broadcast</span> <span class="variable constant_">DR</span> <span class="number">1</span> <span class="number">1</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.1</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.20</span><span class="number">.1</span> <span class="title class_">Broadcast</span> <span class="variable constant_">DR</span> <span class="number">1</span> <span class="number">1</span> <span class="number">172.16</span><span class="number">.20</span><span class="number">.1</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">//可以观察到本地 OSPF 进程使用的 Router-ID 是 172.16.1.254。 在此进程下， 有三个接口加入了 OSPF 进程。 网络类型为以太网默认的广播网络类型。 State 为该接口当前的状态，显示为 DR 状态，即表示为这三个接口在它们所在的网段中都被选举为 DR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在 R2 和 R3 上做相应配置，配置方法和 R1 相同，不再赘述</span></span><br><span class="line">&lt;<span class="variable constant_">R2</span> <span class="variable constant_">R3</span>&gt;system-view</span><br><span class="line">[<span class="variable constant_">R2</span> <span class="variable constant_">R3</span>]ospf <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R2</span> <span class="variable constant_">R3</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R2</span> <span class="variable constant_">R3</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.10</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R2</span> <span class="variable constant_">R3</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.30</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R2</span> <span class="variable constant_">R3</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.2</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br></pre></td></tr></table></figure><h3 id="2、检查OSPF单区域的配置结果"><a href="#2、检查OSPF单区域的配置结果" class="headerlink" title="2、检查OSPF单区域的配置结果"></a>2、检查OSPF单区域的配置结果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以 R1 为例使用 display ospf peer 命令查看 OSPF 邻居状态。</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;display ospf peer</span><br><span class="line"><span class="variable constant_">OSPF</span> <span class="title class_">Process</span> <span class="number">1</span> <span class="keyword">with</span> <span class="title class_">Router</span>-<span class="variable constant_">ID</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Neighbors</span></span><br><span class="line"><span class="title class_">Area</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> interface <span class="number">172.16</span><span class="number">.10</span><span class="number">.1</span>(<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>)<span class="string">&#x27;s neighbors</span></span><br><span class="line"><span class="string">Router-ID: 172.16.2.254 Address: 172.16.10.2</span></span><br><span class="line"><span class="string">State: Full Mode:Nbr is Master Priority: 1</span></span><br><span class="line"><span class="string">DR: 172.16.10.1 BDR: 172.16.10.2 MTU: 0</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Neighbors</span></span><br><span class="line"><span class="string">Area 0.0.0.0 interface 172.16.20.1(GigabitEthernet0/0/1)&#x27;</span>s neighbors</span><br><span class="line"><span class="title class_">Router</span>-<span class="attr">ID</span>: <span class="number">172.16</span><span class="number">.3</span><span class="number">.254</span> <span class="title class_">Address</span>: <span class="number">172.16</span><span class="number">.20</span><span class="number">.3</span></span><br><span class="line"><span class="title class_">State</span>: <span class="title class_">Full</span> <span class="title class_">Mode</span>:<span class="title class_">Nbr</span> is <span class="title class_">Master</span> <span class="title class_">Priority</span>: <span class="number">1</span></span><br><span class="line"><span class="attr">DR</span>: <span class="number">172.16</span><span class="number">.20</span><span class="number">.1</span> <span class="attr">BDR</span>: <span class="number">172.16</span><span class="number">.20</span><span class="number">.3</span> <span class="attr">MTU</span>: <span class="number">0</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">//通过 Router-ID 可以查看邻居的路由器标识</span></span><br><span class="line"><span class="comment">//通过 Address 可以查看邻居的 OSPF 接口 IP 地址</span></span><br><span class="line"><span class="comment">//通过 State 可以查看目前与该路由器的OSPF 邻居状态</span></span><br><span class="line"><span class="comment">//通过 Priority 可以查看当前该邻居 OSPF 接口的 DR 优先级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 display ip routing-table protocol ospf 命令查看 R1 上的 OSPF 路由表</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;display ip routing-table protocol ospf</span><br><span class="line"><span class="title class_">Route</span> <span class="title class_">Flags</span>: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Public</span> routing table : <span class="variable constant_">OSPF</span></span><br><span class="line"><span class="title class_">Destinations</span> : <span class="number">3</span> <span class="title class_">Routes</span> : <span class="number">4</span></span><br><span class="line"><span class="variable constant_">OSPF</span> routing table status : &lt;<span class="title class_">Active</span>&gt;</span><br><span class="line"><span class="title class_">Destinations</span> : <span class="number">3</span> <span class="title class_">Routes</span> : <span class="number">4</span></span><br><span class="line"><span class="title class_">Destination</span>/<span class="title class_">Mask</span> <span class="title class_">Proto</span> <span class="title class_">Pre</span> <span class="title class_">Cost</span> <span class="title class_">Flags</span> <span class="title class_">NextHop</span> <span class="title class_">Interface</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> <span class="variable constant_">OSPF</span> <span class="number">10</span> <span class="number">2</span> D <span class="number">172.16</span><span class="number">.10</span><span class="number">.2</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span> <span class="variable constant_">OSPF</span> <span class="number">10</span> <span class="number">2</span> D <span class="number">172.16</span><span class="number">.20</span><span class="number">.3</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.30</span><span class="number">.0</span>/<span class="number">24</span> <span class="variable constant_">OSPF</span> <span class="number">10</span> <span class="number">2</span> D <span class="number">172.16</span><span class="number">.10</span><span class="number">.2</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"><span class="variable constant_">OSPF</span> <span class="number">10</span> <span class="number">2</span> D <span class="number">172.16</span><span class="number">.20</span><span class="number">.3</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="variable constant_">OSPF</span> routing table status : &lt;<span class="title class_">Inactive</span>&gt;</span><br><span class="line"><span class="title class_">Destinations</span> : <span class="number">0</span> <span class="title class_">Routes</span> : <span class="number">0</span></span><br><span class="line"><span class="comment">//“Destination/Mask” 标识了目的网段的前缀及掩码</span></span><br><span class="line"><span class="comment">//“Proto”标识了此路由信息是通过 OSPF 协议获取到的</span></span><br><span class="line"><span class="comment">//“Pre” 标识了路由优先级</span></span><br><span class="line"><span class="comment">//“Cost” 标识了开销值</span></span><br><span class="line"><span class="comment">//“NextHop” 标识了下一跳地址</span></span><br><span class="line"><span class="comment">//“Interface” 标识了此前缀的出接口</span></span><br></pre></td></tr></table></figure><p>此时 R1 的路由表中已经拥有了去往网络中所有其他网段的路由条目。 R2 与 R3 上的现<br>象一样，此处不再赘述。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在PC-1上用ping命令测试与PC-3间的连通性</span></span><br><span class="line"><span class="variable constant_">PC</span>&gt;ping <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span></span><br><span class="line"><span class="title class_">Ping</span> <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span>: <span class="number">32</span> data bytes, <span class="title class_">Press</span> <span class="title class_">Ctrl</span>_C to <span class="keyword">break</span></span><br><span class="line"><span class="title class_">From</span> <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">1</span> ttl=<span class="number">126</span> time=<span class="number">31</span> ms</span><br><span class="line"><span class="title class_">From</span> <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">2</span> ttl=<span class="number">126</span> time=<span class="number">32</span> ms</span><br><span class="line"><span class="title class_">From</span> <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">3</span> ttl=<span class="number">126</span> time=<span class="number">15</span> ms</span><br><span class="line"><span class="title class_">From</span> <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">4</span> ttl=<span class="number">126</span> time=<span class="number">16</span> ms</span><br><span class="line"><span class="title class_">From</span> <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">5</span> ttl=<span class="number">126</span> time=<span class="number">16</span> ms</span><br><span class="line">--- <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span> ping statistics ---</span><br><span class="line"><span class="number">5</span> <span class="title function_">packet</span>(s) transmitted</span><br><span class="line"><span class="number">5</span> <span class="title function_">packet</span>(s) received</span><br><span class="line"><span class="number">0.00</span>% packet loss</span><br><span class="line">round-trip min/avg/max = <span class="number">15</span>/<span class="number">22</span>/<span class="number">32</span> ms</span><br><span class="line"><span class="comment">//通信正常，其他测试省略</span></span><br></pre></td></tr></table></figure><blockquote><p>OSPF 多区域配置等功能本项目暂时不使用，此处省略 </p></blockquote><h3 id="6-2、使用OSPF默认路由"><a href="#6-2、使用OSPF默认路由" class="headerlink" title="6.2、使用OSPF默认路由"></a>6.2、使用OSPF默认路由</h3><p><strong>原理概述：</strong></p><p>​默认路由是指目的地址和掩码都是 0 的路由条目。当路由器无精确匹配的路由时，就可以通过默认路由进行报文转发。 如果报文的目的地址不在路由表的默认路由中，那么该报文将被路由器丢弃，并向源端返回一个 ICMP 报文，报告该目的地址或网络不可达。</p><p>​合理使用默认路由，可以很大程度减小本地路由表的大小，节约设备资源。 默认路由可以在路由器上手工配置，也可以由路由协议自动发布。  </p><blockquote><p>此处参考博客：<a href="https://blog.csdn.net/weixin_45728716/article/details/104433800">https://blog.csdn.net/weixin_45728716/article/details/104433800</a></p></blockquote><h3 id="1、OSPF下放默认路由的方法"><a href="#1、OSPF下放默认路由的方法" class="headerlink" title="1、OSPF下放默认路由的方法"></a>1、OSPF下放默认路由的方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default-route-advise always</span><br></pre></td></tr></table></figure><h3 id="2、OSPF下放默认路由的方法"><a href="#2、OSPF下放默认路由的方法" class="headerlink" title="2、OSPF下放默认路由的方法"></a>2、OSPF下放默认路由的方法</h3><p><strong>在出口路由器R1中下放默认路由：</strong></p><p>如图，在内网运行ospf，现在访问ISP上的一个地址8.8.8.8，R1作为出口路由器配置了一条默认路由。R1可以正常访问8.8.8.8。</p><p><img src="https://img-blog.csdnimg.cn/20200224092002741.png?x-oss-process=image"></p><p>R1可以正常访问8.8.8.8，但是R2、R3是没有去8.8.8.8的路由的，所以此时需要在R1上下放默认路由。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">R1</span>]ospf</span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>]<span class="keyword">default</span>-route-advertise</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看R2、R3的路由表是否收到默认路由</span></span><br><span class="line">[<span class="variable constant_">R2</span> <span class="variable constant_">R3</span>]dis ip rout</span><br><span class="line">...</span><br><span class="line"><span class="title class_">Destination</span>/<span class="title class_">Mask</span>  <span class="title class_">Proto</span>  <span class="title class_">Pre</span>  <span class="title class_">Cost</span>  <span class="title class_">Flags</span>  <span class="title class_">NextHop</span>  <span class="title class_">Interface</span></span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>         <span class="variable constant_">O_ASE</span>  <span class="number">150</span>    <span class="number">1</span>     D    <span class="number">12.1</span><span class="number">.1</span><span class="number">.1</span> <span class="title class_">Gig</span>...</span><br><span class="line">...</span><br><span class="line">[<span class="variable constant_">R3</span>]dis ip routing-table</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="7、VRRP"><a href="#7、VRRP" class="headerlink" title="7、VRRP"></a>7、VRRP</h1><p>虚拟路由冗余协议（Virtual Router Redundancy Protocol，简称VRRP）是由IETF提出的解决局域网中配置静态网关出现单点失效现象的路由协议，1998年已推出正式的RFC2338协议标准。VRRP广泛应用在边缘网络中，它的设计目标是支持特定情况下IP数据流量失败转移不会引起混乱，允许主机使用单路由器，以及即使在实际第一跳路由器使用失败的情形下仍能够维护路由器间的连通性。</p><h2 id="7-1、VRRP基本配置"><a href="#7-1、VRRP基本配置" class="headerlink" title="7.1、VRRP基本配置"></a>7.1、VRRP基本配置</h2><p><strong>原理概述：</strong></p><p>​随着 Internet 的发展，人们对网络可靠性的要求越来越高。对于用户来说，能够时刻与外部网络保持通信非常重要，但内部网络中的所有主机通常只能设置一个网关 IP 地址，通过该出口网关实现主机与外部网络的通信。若此时出口网关设备发生故障，主机与外部网络的通信就会中断， 所以配置多个出口网关是提高网络可靠性的常用方法。 为此 IETF 组织推出了 VRRP 协议， 使得在多个出口网关的情况下主机仅需配置一个虚拟网关 IP 地址作为出口网关即可， 解决了局域网主机访问外部网络的可靠性问题。  </p><p>​VRRP（ Virtual Router Redundancy Protocol）全称是虚拟路由冗余协议， 它是一种容错协议。该协议通过把几台路由设备联合组成一台虚拟的路由设备， 该虚拟路由器在本地局域网拥有唯一的一个虚拟 ID 和虚拟 IP 地址。实际上该虚拟路由器是由一个 Master 设备和若干 Backup 设备组成。正常情况下，业务全部由 Master 承担，所有客户端仅需设置此虚拟 IP为网关地址。当 Master 出现故障时， Backup 接替工作，及时将业务切换到备份路由器，从而保持通讯的连续性和可靠性。 而客户端无需做任何配置更改，对故障无感知。</p><p>​VRRP 的 Master 选举基于优先级，优先级取值范围是 0－ 255，缺省情况下，配置优先级为 100，在接口上可以配置优先级的大小来手工选择 Master 设备。  </p><h3 id="拓扑及设备信息：-8"><a href="#拓扑及设备信息：-8" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>​本实验模拟企业网络场景，公司内员工如 PC-1、 PC-2 通过交换机 LSW1 连接到公司网络， LSW1 连接到公司出口网关路由器。 为了提高网络的可靠性，公司使用两台路由器 R2与 R3 作为双出口连接到外网路由器 R1。 R1、 R2、 R3 之间运行 OSPF 协议。在双网关的情况下，如果在 PC 上配置 R2 或 R3 的真实 IP 地址作为网关，当其中一台路由器故障时，就需要手动更改 PC 的网关 IP，若网络中有大量 PC 则需要耗费大量时间和人力去更改配置，且会带来一定时间的断网影响。 为了能够使故障所造成的断网影响达到最小化， 增强网络的可靠性，网络管理员在 R2 与 R3 之间部署 VRRP 协议，可以使得当任一网关发生故障时能自动切换而无需更改 PC 的网关 IP 地址。</p><p><img src="https://img-blog.csdnimg.cn/4280fefecab8427f815d75f2c6c4999b.png" alt="请添加图片描述"></p><h3 id="1、部署OSPF网络"><a href="#1、部署OSPF网络" class="headerlink" title="1、部署OSPF网络"></a>1、部署OSPF网络</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在公司的出口网关路由器 R1，R2，和外网路由器 R3 上配置 OSPF 协议，使用进程号 1，且所有网段均通告进区域 0 中。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]ospf <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.2</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.3</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">R2</span>]ospf <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R2</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R2</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R2</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.2</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">R3</span>]ospf <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R3</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R3</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R3</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">172.16</span><span class="number">.3</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，在 R1 上检查 OSPF 邻居建立情况。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]display ospf peer brief</span><br><span class="line"><span class="variable constant_">OSPF</span> <span class="title class_">Process</span> <span class="number">1</span> <span class="keyword">with</span> <span class="title class_">Router</span>-<span class="variable constant_">ID</span> <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Peer</span> <span class="title class_">Statistic</span> <span class="title class_">Information</span></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Area</span> <span class="title class_">Id</span> <span class="title class_">Interface</span> <span class="title class_">Neighbor</span> id <span class="title class_">State</span></span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.100</span> <span class="title class_">Full</span></span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.200</span> <span class="title class_">Full</span></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//可以观察到，此时 R1 已经于 R2， R3 成功建立起了 OSPF 邻居关系。</span></span><br></pre></td></tr></table></figure><h3 id="2、配置VRRP协议"><a href="#2、配置VRRP协议" class="headerlink" title="2、配置VRRP协议"></a>2、配置VRRP协议</h3><p>为了提高网络的可靠性，针对两台出口网关路由器实现主备备份。即正常情况下，只有主网关工作，当其发生故障时能够自动切换到备份网关。现在通过配置 VRRP 协议来实现这样的需求。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 R2 和 R3 上配置 VRRP 协议， 使用命令 vrrp vrid virtual-ip 创建 VRRP 备份组，指定即R1和R2处于同一个VRRP 备份组内，VRRP 备份组号为 1，配置虚拟 IP 为172.16.1.254。注意虚拟 IP 地址必须和当前接口在同一网段。</span></span><br><span class="line">[<span class="variable constant_">R2</span>]interface ethernet <span class="number">1</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R2</span>-<span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span>]vrrp vrid <span class="number">1</span> virtual-ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">R3</span>]interface ethernet <span class="number">1</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R3</span>-<span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span>]vrrp vrid <span class="number">1</span> virtual-ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="comment">//经过这样的配置后， PC 将使用虚拟路由器 IP 地址作为默认网关。</span></span><br></pre></td></tr></table></figure><p>​在 VRRP 协议中，优先级决定路由器在备份组中的角色，优先级高者成为 Master。 如果优先级相同，比较接口的 IP 地址大小，较大的成为 Master。优先级值缺省为 100， 0 被系统保留， 255 保留给 IP 地址拥有者使用。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//现在配置R2的优先级为120，R3的优先级保持默认100不变，这将使得R2成为Master，R3 为 Backup。</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">R2</span>-<span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span>]vrrp vrid <span class="number">1</span> priority <span class="number">120</span></span><br><span class="line"><span class="comment">//配置完成后，在 R2 和 R3 上使用 display vrrp 查看 VRRP 信息。</span></span><br><span class="line">[<span class="variable constant_">R2</span>]display vrrp</span><br><span class="line"><span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span> | <span class="title class_">Virtual</span> <span class="title class_">Router</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">State</span> : <span class="title class_">Master</span></span><br><span class="line"><span class="title class_">Virtual</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Master</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.100</span></span><br><span class="line"><span class="title class_">PriorityRun</span> : <span class="number">120</span></span><br><span class="line"><span class="title class_">PriorityConfig</span> : <span class="number">120</span></span><br><span class="line"><span class="title class_">MasterPriority</span> : <span class="number">120</span></span><br><span class="line"><span class="title class_">Preempt</span> : <span class="variable constant_">YES</span> <span class="title class_">Delay</span> <span class="title class_">Time</span> : <span class="number">0</span> s</span><br><span class="line">……</span><br><span class="line">[<span class="variable constant_">R3</span>]display vrrp</span><br><span class="line"><span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span> | <span class="title class_">Virtual</span> <span class="title class_">Router</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">State</span> : <span class="title class_">Backup</span></span><br><span class="line"><span class="title class_">Virtual</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Master</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.100</span></span><br><span class="line"><span class="title class_">PriorityRun</span> : <span class="number">100</span></span><br><span class="line"><span class="title class_">PriorityConfig</span> : <span class="number">100</span></span><br><span class="line"><span class="title class_">MasterPriority</span> : <span class="number">120</span></span><br><span class="line"><span class="title class_">Preempt</span> : <span class="variable constant_">YES</span> <span class="title class_">Delay</span> <span class="title class_">Time</span> : <span class="number">0</span> s</span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到现在 R2 的 VRRP 状态是 Master，R3 是 Backup。两者都处在 VRRP 备份组1 中，且都是 E 0/0/1 接口运行在 VRRP 协议中。输出信息中的 PriorityRun 表示设备当前的运行优先级，PriorityConfig 表示为该设备配置的优先级，MasterPriority 为该备份组中Master的优先级。</span></span><br><span class="line"><span class="comment">//般配置优先级就是运行优先级，但个别情况下可能运行优先级和配置优先级会不一样</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//也可以使用命令display vrrp brief 或 display vrrp interface来显示VRRP的工作状态，以 R2 为例</span></span><br><span class="line">[<span class="variable constant_">R2</span>]display vrrp brief</span><br><span class="line"><span class="variable constant_">VRID</span> <span class="title class_">State</span> <span class="title class_">Interface</span> <span class="title class_">Type</span> <span class="title class_">Virtual</span> <span class="variable constant_">IP</span></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> <span class="title class_">Master</span> <span class="title class_">Eth1</span>/<span class="number">0</span>/<span class="number">1</span> <span class="title class_">Normal</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="title class_">Total</span>:<span class="number">1</span> <span class="title class_">Master</span>:<span class="number">1</span> <span class="title class_">Backup</span>:<span class="number">0</span> <span class="title class_">Non</span>-<span class="attr">active</span>:<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="variable constant_">R2</span>]display vrrp interface ethernet1/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span> | <span class="title class_">Virtual</span> <span class="title class_">Router</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">State</span> : <span class="title class_">Master</span></span><br><span class="line"><span class="title class_">Virtual</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Master</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.100</span></span><br><span class="line"><span class="title class_">PriorityRun</span> : <span class="number">120</span></span><br><span class="line"><span class="title class_">PriorityConfig</span> : <span class="number">120</span></span><br><span class="line"><span class="title class_">MasterPriority</span> : <span class="number">120</span></span><br><span class="line"><span class="title class_">Preempt</span> : <span class="variable constant_">YES</span> <span class="title class_">Delay</span> <span class="title class_">Time</span> : <span class="number">0</span> s</span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试 PC 机访问公网时的数据包转发路径。</span></span><br><span class="line"><span class="variable constant_">PC</span>&gt;tracert <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span></span><br><span class="line">traceroute to <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span>, <span class="number">8</span> hops max</span><br><span class="line">(<span class="variable constant_">ICMP</span>), press <span class="title class_">Ctrl</span>+C to stop</span><br><span class="line"><span class="number">1</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.100</span> <span class="number">32</span> ms <span class="number">31</span> ms <span class="number">15</span> ms</span><br><span class="line"><span class="number">2</span> <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span> <span class="number">63</span> ms <span class="number">62</span> ms <span class="number">47</span> ms</span><br><span class="line"><span class="comment">//可以观察此时都是通过 R2 转发。</span></span><br></pre></td></tr></table></figure><h3 id="3、验证VRRP主备切换"><a href="#3、验证VRRP主备切换" class="headerlink" title="3、验证VRRP主备切换"></a>3、验证VRRP主备切换</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//现在手动模拟网络出现故障，将 LSW1 的 E 0/0/1 接口关闭。</span></span><br><span class="line">[<span class="title class_">LSW1</span>]interface ethernet <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="title class_">LSW1</span>-<span class="title class_">Ethernet0</span>/<span class="number">0</span>/<span class="number">1</span>]shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment">//经过 3 秒钟左右后， 使用 display vrrp 查看 R3 的 VRRP 信息。</span></span><br><span class="line">[<span class="variable constant_">R3</span>]display vrrp</span><br><span class="line"><span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span> | <span class="title class_">Virtual</span> <span class="title class_">Router</span> <span class="number">1</span></span><br><span class="line"><span class="title class_">State</span> : <span class="title class_">Master</span></span><br><span class="line"><span class="title class_">Virtual</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Master</span> <span class="variable constant_">IP</span> : <span class="number">172.16</span><span class="number">.1</span><span class="number">.200</span></span><br><span class="line"><span class="title class_">PriorityRun</span> : <span class="number">100</span></span><br><span class="line"><span class="title class_">PriorityConfig</span> : <span class="number">100</span></span><br><span class="line"><span class="title class_">MasterPriority</span> : <span class="number">100</span></span><br><span class="line"><span class="title class_">Preempt</span> : <span class="variable constant_">YES</span> <span class="title class_">Delay</span> <span class="title class_">Time</span> : <span class="number">0</span> s</span><br><span class="line">……</span><br><span class="line"><span class="comment">//可以观察到 R3 切换成为了 Master，从而能够确保用户对公网的访问，几乎感知不到故障的发生。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试 PC 机访问公网时的数据包转发路径。</span></span><br><span class="line"><span class="variable constant_">PC</span>&gt;tracert <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span></span><br><span class="line">traceroute to <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span>, <span class="number">8</span> hops max</span><br><span class="line">(<span class="variable constant_">ICMP</span>), press <span class="title class_">Ctrl</span>+C to stop</span><br><span class="line"><span class="number">1</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.200</span> <span class="number">63</span> ms <span class="number">15</span> ms <span class="number">32</span> ms</span><br><span class="line"><span class="number">2</span> <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span> <span class="number">62</span> ms <span class="number">62</span> ms <span class="number">32</span> ms</span><br><span class="line"><span class="comment">//发现数据包发送路径已经切换到 R3。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果 R2 从故障中恢复，手动开启 LSW1 的 E 0/0/1 接口。</span></span><br><span class="line">[<span class="title class_">LWS1</span>]interface ethernet <span class="number">1</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="title class_">LSW1</span>-<span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span>]undo shutdown</span><br><span class="line"><span class="comment">//查看 R2 和 R3 的 VRRP 工作状态。</span></span><br><span class="line">[<span class="variable constant_">R2</span>]display vrrp brief</span><br><span class="line"><span class="title class_">Total</span>:<span class="number">1</span> <span class="title class_">Master</span>:<span class="number">1</span> <span class="title class_">Backup</span>:<span class="number">0</span> <span class="title class_">Non</span>-<span class="attr">active</span>:<span class="number">0</span></span><br><span class="line"><span class="variable constant_">VRID</span> <span class="title class_">State</span> <span class="title class_">Interface</span> <span class="title class_">Type</span> <span class="title class_">Virtual</span> <span class="variable constant_">IP</span></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> <span class="title class_">Master</span> <span class="title class_">Eth1</span>/<span class="number">0</span>/<span class="number">1</span> <span class="title class_">Normal</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line">[<span class="variable constant_">R3</span>]display vrrp brief</span><br><span class="line"><span class="title class_">Total</span>:<span class="number">1</span> <span class="title class_">Master</span>:<span class="number">1</span> <span class="title class_">Backup</span>:<span class="number">0</span> <span class="title class_">Non</span>-<span class="attr">active</span>:<span class="number">0</span></span><br><span class="line"><span class="variable constant_">VRID</span> <span class="title class_">State</span> <span class="title class_">Interface</span> <span class="title class_">Type</span> <span class="title class_">Virtual</span> <span class="variable constant_">IP</span></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> <span class="title class_">Backup</span> <span class="title class_">Eth1</span>/<span class="number">0</span>/<span class="number">1</span> <span class="title class_">Normal</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="comment">//可以观察到 Master 设备又立刻重新切换回至 R2。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试 PC 机访问公网时的数据包转发路径。</span></span><br><span class="line"><span class="variable constant_">PC</span>&gt;tracert <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span></span><br><span class="line">traceroute to <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span>, <span class="number">8</span> hops max</span><br><span class="line">(<span class="variable constant_">ICMP</span>), press <span class="title class_">Ctrl</span>+C to stop</span><br><span class="line"><span class="number">1</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.100</span> <span class="number">47</span> ms <span class="number">47</span> ms <span class="number">46</span> ms</span><br><span class="line"><span class="number">2</span> <span class="number">172.16</span><span class="number">.2</span><span class="number">.254</span> <span class="number">78</span> ms <span class="number">78</span> ms <span class="number">62</span> ms</span><br><span class="line"><span class="comment">//可以验证也切换回 R2 转发。而这整个过程对于用户来说是透明的。</span></span><br></pre></td></tr></table></figure><blockquote><p>VRRP多备份组等功能暂时不需要，此处略过。感兴趣可查看官方文档</p></blockquote><h1 id="8、DHCP"><a href="#8、DHCP" class="headerlink" title="8、DHCP"></a>8、DHCP</h1><p>动态主机配置协议（Dynamic Host Configuration Protocol）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p><h2 id="8-1、配置基于接口地址池的DHCP"><a href="#8-1、配置基于接口地址池的DHCP" class="headerlink" title="8.1、配置基于接口地址池的DHCP"></a>8.1、配置基于接口地址池的DHCP</h2><p><strong>原理概述：</strong></p><p>​随着网络规模的扩大和网络复杂程度的提高，经常出现计算机位置变化（如便携机或无线网络）和计算机数量超过可分配的 IP 地址的情况。 DHCP（ Dynamic Host Configuration Protocol，动态主机配置协议）就是为满足这些需求而发展起来的。 DHCP 协议采用客户端&#x2F;服务器（ Client&#x2F;Server）方式工作，DHCP Client 向 DHCP Server动态地请求配置信息， DHCP Server 根据策略返回相应的配置信息（如 IP 地址等）。</p><p>​DHCP 客户端首次登录网络时，主要通过四个阶段与 DHCP 服务器建立联系。</p><p>​发现阶段，即 DHCP 客户端寻找 DHCP 服务器的阶段。客户端以广播方式发送DHCP_Discover 报文，只有 DHCP 服务器才会进行响应；</p><p>​提供阶段，即 DHCP 服务器提供 IP 地址的阶段。 DHCP 服务器接收到客户端的DHCP_Discover 报文后，从 IP 地址池中挑选一个尚未分配的 IP 地址分配给客户端，向该客户端发送包含出租 IP 地址和其它设置的 DHCP_Offer 报文；  </p><p>​选择阶段，即 DHCP 客户端选择 IP 地址的阶段。如果有多台 DHCP 服务器向该客户端发来 DHCP_Offer 报文，客户端只接受第一个收到的 DHCP_Offer 报文，然后以广播方式向各 DHCP 服务器回应 DHCP_Request 报文。</p><p>​确认阶段，即 DHCP 服务器确认所提供 IP 地址的阶段。当 DHCP 服务器收到 DHCP 客户端回答的 DHCP_Request 报文后，便向客户端发送包含它所提供的 IP 地址和其它设置的DHCP_ACK 确认报文。</p><h3 id="拓扑及设备信息：-9"><a href="#拓扑及设备信息：-9" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>​本实验将路由器 R1 模拟成为公司 DHCP Server，该公司两个部门市场部和财务部下的PC 通过 DHCP 的方式自动配置 IP 地址。网络管理员配置客户端 PC 通过接口地址池的方式自动获取 IP 地址。  </p><p><img src="https://img-blog.csdnimg.cn/eaf73ff96307461699db3e2f44b7ba15.png" alt="请添加图片描述"></p><h3 id="1、基本配置-2"><a href="#1、基本配置-2" class="headerlink" title="1、基本配置"></a>1、基本配置</h3><p>​根据实验编址表进行相应的基本 IP 地址配置，由于 PC 是通过 DHCP 自动获取地址，暂时无法测试连通性。交换机为二层设备，无需配置 IP 地址。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[R1]interface GigabitEthernet 0/0/0</span><br><span class="line">[R1-GigabitEthernet0/0/0]ip address 192.168.1.254 24</span><br><span class="line">[R1-GigabitEthernet0/0/0]interface GigabitEthernet 0/0/1</span><br><span class="line">[R1-GigabitEthernet0/0/1]ip address 192.168.2.254 24</span><br></pre></td></tr></table></figure><h3 id="2、基于接口配置DHCP-Server-功能"><a href="#2、基于接口配置DHCP-Server-功能" class="headerlink" title="2、基于接口配置DHCP Server 功能"></a>2、基于接口配置DHCP Server 功能</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 R1 上开启 DHCP 功能。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]dhcp enable</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 R1 的 GE 0/0/0 和 GE 0/0/1 接口，配置命令 dhcp select interface 开启接口的 DHCP服务功能，指定从接口地址池分配地址。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]dhcp select interface</span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]dhcp select interface</span><br></pre></td></tr></table></figure><p>​接口地址池可动态分配 IP 地址，范围就是接口的 IP 地址所在网段，且只在此接口下有效。当 DHCP 服务器接收到 DHCP 客户端的请求报文后， DHCP 服务器将会使用该接口的地址网段给客户端分配地址。  </p><h3 id="3、配置基于接口的DHCP-Server-租期-x2F-DNS-服务器地址"><a href="#3、配置基于接口的DHCP-Server-租期-x2F-DNS-服务器地址" class="headerlink" title="3、配置基于接口的DHCP Server 租期&#x2F;DNS 服务器地址"></a>3、配置基于接口的DHCP Server 租期&#x2F;DNS 服务器地址</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 R1 的 GE 0/0/0 接口上使用命令 dhcp server lease 配置 DHCP 服务器接口地址池中 IP地址的租用有效期限为 2 天， GE 0/0/1 接口不修改，使用默认值 1 天，超过租期后该地址将会重新分配。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]dhcp server lease day <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在 GE 0/0/0 接口上使用命令 dhcp server excluded-ip-address 配置接口地址池中不参与自动分配的 IP 地址范围为 192.168.1.1 到 192.168.1.10。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]dhcp server excluded-ip-address <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span></span><br></pre></td></tr></table></figure><p>​有些地址需要分配给其他的服务，如 DNS 服务器或 HTTP 服务器等需要手工静态配置的 IP 地址，就不能再动态分配给客户端使用，可以执行该命令配置地址池中不参与自动分配的 IP 地址（默认该地址池所有地址参与自动分配，此命令作为可选命令）。</p><p>​当 DHCP 服务器收到客户端的 DHCP 请求时， DPCP 服务器将会选择地址池中空闲的IP 地址分配给客户端。 GE 0&#x2F;0&#x2F;0 接口地址池中 192.168.1.1-192.168.1.10 不参与分配， 而 GE0&#x2F;0&#x2F;1 接口没有配置该命令，因此可以分配的 IP 地址范围 192.168.2.1-192.168.2.253（不包括本接口地址）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 GE 0/0/1 接口上使用命令 dhcp server dns-list 指定接口地址池下的 DNS 服务器，为PC-2 自动分配 DNS 服务器地址为 8.8.8.8</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]dhcp server dns-list <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><h3 id="4、配置DHCP-Client"><a href="#4、配置DHCP-Client" class="headerlink" title="4、配置DHCP Client"></a>4、配置DHCP Client</h3><p>设置PC使用DHCP配置地址：</p><p>打开PC-1的基础配置界面，在IPv4配置栏中选择DHCP，点击右下角“应用”；</p><p>选择PC-1中的“命令行”界面，输入命令ipconfig查看接口的IP地址；</p><p>通过观察发现PC-1已经通过DHCP Server获取到一个IPv4地址，192.168.1.xxx，网关地址为路由器的接口地址192.168.1.254。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 R1 上使用命令 display ip pool 查看 DHCP 地址池当中的地址分配情况。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]display ip pool</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Pool</span>-name : <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"><span class="title class_">Pool</span>-<span class="title class_">No</span> : <span class="number">0</span></span><br><span class="line"><span class="title class_">Position</span> : <span class="title class_">Interface</span> <span class="title class_">Status</span> : <span class="title class_">Unlocked</span></span><br><span class="line"><span class="title class_">Gateway</span>-<span class="number">0</span> : <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Mask</span> : <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"><span class="variable constant_">VPN</span> instance : --</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Pool</span>-name : <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="title class_">Pool</span>-<span class="title class_">No</span> : <span class="number">1</span></span><br><span class="line"><span class="title class_">Position</span> : <span class="title class_">Interface</span> <span class="title class_">Status</span> : <span class="title class_">Unlocked</span></span><br><span class="line"><span class="title class_">Gateway</span>-<span class="number">0</span> : <span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Mask</span> : <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"><span class="variable constant_">VPN</span> instance : --</span><br><span class="line"><span class="variable constant_">IP</span> address <span class="title class_">Statistic</span></span><br><span class="line"><span class="title class_">Total</span> :<span class="number">506</span></span><br><span class="line"><span class="title class_">Used</span> :<span class="number">1</span> <span class="title class_">Idle</span> :<span class="number">495</span></span><br><span class="line"><span class="title class_">Expired</span> :<span class="number">0</span> <span class="title class_">Conflict</span> :<span class="number">0</span> <span class="title class_">Disable</span> :<span class="number">10</span></span><br><span class="line"><span class="comment">//通过该命令观察到目前为基于接口的地址池， 由于有两个接口启用 DHCP 功能，所以地址池也有两个， Pool-name 分别为 GE 0/0/0， GE 0/0/1。 在 DHCP Server 地址池中，网关为 192.168.1.254，掩码为 255.255.255.0， IP 地址池总共可以分配 506 个地址（除了路由器接口地址），已经使用了一个，空闲地址为 495 个，其中地址池中有 10 个地址是不参与分配的。</span></span><br></pre></td></tr></table></figure><p>PC-2的配置与测试方式与PC-1相同，此处省略。</p><h2 id="8-2、配置基于全局地址池的DHCP"><a href="#8-2、配置基于全局地址池的DHCP" class="headerlink" title="8.2、配置基于全局地址池的DHCP"></a>8.2、配置基于全局地址池的DHCP</h2><p><strong>原理概述：</strong></p><p>​基于接口地址池的 DHCP 服务器，连接这个接口网段的用户都从该接口地址池中获取IP 地址等配置信息，由于地址池绑定在特定的接口上，可以限制用户的使用条件，在保障了安全性的同时也存在一定局限性。当用户从不同接口接入 DHCP 服务器且需要从同一个地址池里获取 IP 地址时，就需要配置基于全局地址池的 DHCP。</p><p>​配置基于全局地址池的 DHCP 服务器，从所有接口上连接的用户都可以选择该地址池中的地址， 也就是说全局地址池是一个公共地址池。 在 DHCP 服务器上创建地址池并配置相关属性（ 包括地址范围、地址租期、不参与自动分配的 IP 地址等），在配置接口工作在全局地址池模式。 路由器支持工作在全局地址池模式的接口有三层接口及其子接口、三层Ethernet 接口及其子接口、三层 Eth-trunk 接口及其子接口和 VLANIF 接口。</p><h3 id="拓扑及设备信息：-10"><a href="#拓扑及设备信息：-10" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h3><p>​本实验将路由器 R1 模拟成为公司 DHCP Server， 配置全局地址池， 该公司两个部门市场部和财务部下的 PC 通过 DHCP 的方式自动配置 IP 地址。  </p><p><img src="https://img-blog.csdnimg.cn/f9245ce7a86641abb67957806930873f.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/fb8d95fdcd744c3592924ff0d545c98f.png" alt="请添加图片描述"></p><h3 id="1、基本配置："><a href="#1、基本配置：" class="headerlink" title="1、基本配置："></a>1、基本配置：</h3><p>​根据实验编址表进行相应的基本 IP 地址配置，由于 PC 是通过 DHCP 自动获取地址，暂时无法测试连通性。交换机为二层设备，无需配置 IP 地址。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]ip address <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span> <span class="number">24</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]ip address <span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span> <span class="number">24</span></span><br></pre></td></tr></table></figure><h3 id="2、配置基于全局地址池的DHCP-Server"><a href="#2、配置基于全局地址池的DHCP-Server" class="headerlink" title="2、配置基于全局地址池的DHCP Server"></a>2、配置基于全局地址池的DHCP Server</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 R1 上开启 DHCP 功能。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]dhcp enable</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令 ip pool 创建一个全局地址池，地址池名称为 huawei1。缺省情况下，设备上没有创建任何全局地址池。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]ip pool huawei1</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令 network 配置全局地址池 huawei1 可动态分配的网段范围为 192.168.1.0，如果不指定掩码，默认使用自然掩码，即 24 位掩码。该网段必需与路由器接口 GE 0/0/0 的 IP地址为同一网段。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei1]network <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span> <span class="comment">//掩码默认为24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命令 lease day 配置 DHCP 全局地址池下的地址租期。缺省情况下， IP 地址租期为1 天，对于不同的地址池， DHCP 服务器可以指定不同的地址租用期限，但是同一地址池中的地址具有相同的租期。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei1]lease day <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置 DHCP 客户端的出口网关地址。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei]gateway-list <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置地址池中 192.168.1.250 到 192.168.1.253 这些地址不参与自动分配。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei1]excluded-ip-address <span class="number">192.168</span><span class="number">.1</span><span class="number">.250</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.253</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于地址 192.168.1.250 到 192.168.1.253 不参与自动分配，而网关地址也不参与自动分配。 DHCP 服务器将会从地址池中由 192.168.1.249 开始往前分配。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置 DNS 服务器地址。</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei1]dns-list <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启接口的 DHCP 功能。使用该命令配置设备指定接口采用全局地址池为客户端分配IP 地址。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span>]dhcp select <span class="variable language_">global</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于路由器需要为两个不同部门分配 IP 地址，即需要两个全局地址池。</span></span><br><span class="line"><span class="comment">//为财务部配置的全局地址池名称为： huawei2， IP 网段为 192.168.2.0，网关地址为192.168.2.254， DNS 服务器地址为 8.8.8.8，配置完成后在 GE 0/0/1 接口下面启用全局地址池的 DHCP 服务器模式。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]ip pool huawei2</span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei2]network <span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei2]lease day <span class="number">2</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei2]gateway-list <span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei2]dns-list <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ip-pool-huawei2]interface <span class="title class_">GigabitEthernet</span> <span class="number">0</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">1</span>]dhcp select <span class="variable language_">global</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，查看 IP 地址池信息。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]display ip pool</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Pool</span>-name : huawei1</span><br><span class="line"><span class="title class_">Pool</span>-<span class="title class_">No</span> : <span class="number">0</span></span><br><span class="line"><span class="title class_">Position</span> : <span class="title class_">Local</span> <span class="title class_">Status</span> : <span class="title class_">Unlocked</span></span><br><span class="line"><span class="title class_">Gateway</span>-<span class="number">0</span> : <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Mask</span> : <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"><span class="variable constant_">VPN</span> instance : --</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Pool</span>-name : huawei2</span><br><span class="line"><span class="title class_">Pool</span>-<span class="title class_">No</span> : <span class="number">1</span></span><br><span class="line"><span class="title class_">Position</span> : <span class="title class_">Local</span> <span class="title class_">Status</span> : <span class="title class_">Unlocked</span></span><br><span class="line"><span class="title class_">Gateway</span>-<span class="number">0</span> : <span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span></span><br><span class="line"><span class="title class_">Mask</span> : <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"><span class="variable constant_">VPN</span> instance : --</span><br><span class="line"><span class="variable constant_">IP</span> address <span class="title class_">Statistic</span></span><br><span class="line"><span class="title class_">Total</span> :<span class="number">506</span></span><br><span class="line"><span class="title class_">Used</span> :<span class="number">0</span> <span class="title class_">Idle</span> :<span class="number">502</span></span><br><span class="line"><span class="title class_">Expired</span> :<span class="number">0</span> <span class="title class_">Conflict</span> :<span class="number">0</span> <span class="title class_">Disable</span> :<span class="number">4</span></span><br><span class="line"><span class="comment">//通过命令观察到有两个地址池，其中一个地址池为huawei1，另外一个地址池为huawei2，地址池的总数为 506 个，使用了 0 个，空闲 502 个，有 4 个地址不参与分配。</span></span><br></pre></td></tr></table></figure><h3 id="3、配置DHCP-Client"><a href="#3、配置DHCP-Client" class="headerlink" title="3、配置DHCP Client"></a>3、配置DHCP Client</h3><p>设置PC-1使用DHCP配置地址，详细步骤见8.1，此处省略。</p><h2 id="8-3、配置DHCP中继"><a href="#8-3、配置DHCP中继" class="headerlink" title="8.3、配置DHCP中继"></a>8.3、配置DHCP中继</h2><blockquote><p>做完才发现本项目不需要使用到DHCP中继，不想看可跳过</p></blockquote><p><strong>原理概述：</strong></p><p>​由于在 IP 地址动态获取的过程中，客户端采用广播方式发送请求报文， 而广播报文不能跨网段传送， 因此 DHCP 只适用于 DHCP 客户端和服务器处于同一个网段内的情况。 当多个网段都需要进行动态 IP 地址分配时， 就需要在所有网段上都设置一个 DHCP 服务器，这显然是不易管理和维护的。</p><p>​DHCP 中继使客户端可以通过 DHCP 中继与其他网段的 DHCP 服务器通信，最终获取到 IP 地址。 解决了 DHCP 客户端不能跨网段向服务器动态获取 IP 地址的问题， 这样， 在多个不同网络上的 DHCP 客户端可以使用同一个 DHCP 服务器， 这样既节省了成本，又便于进行集中管理和维护。</p><p>​路由器或三层交换机都可以充当 DHCP 中继设备。 DHCP 中继设备可以转发客户端和服务器间的 DHCP 报文，完成对客户端 IP 地址的动态分配。  </p><h2 id="拓扑及设备信息：-11"><a href="#拓扑及设备信息：-11" class="headerlink" title="拓扑及设备信息："></a>拓扑及设备信息：</h2><p>​本实验模拟企业网络场景， 某公司分部的网络由交换机 S1 和网关路由器 R1 组成，员工终端 PC-1 和 PC-2 都连接在 S1 上。公司要求分部内所有员工主机的 IP 地址都通过总部的 DHCP 服务器自动获取。分部网关路由器 R1 通过公网路由器 R2 访问公司总部的 DHCP服务器 R3。由于公司分部与总部不在同一个子网，需要在 R1 上配置 DHCP 中继，使分部内主机能跨网段从总部的 DHCP 服务器自动获取 IP 地址。</p><p><img src="https://img-blog.csdnimg.cn/a1107fdf82fd4e2292093878309ac000.png" alt="请添加图片描述"></p><h3 id="1、搭建DHCP网络"><a href="#1、搭建DHCP网络" class="headerlink" title="1、搭建DHCP网络"></a>1、搭建DHCP网络</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在公司路由器 R1， R2， R3 上都配置运行 OSPF 协议，所有网段都发布到区域 0 中。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]ospf <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">200.1</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R1</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">10.1</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R2</span>]ospf <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R2</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R2</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">200.1</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R2</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">100.1</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line">[<span class="variable constant_">R3</span>]ospf <span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R3</span>-ospf-<span class="number">1</span>]area <span class="number">0</span></span><br><span class="line">[<span class="variable constant_">R3</span>-ospf-<span class="number">1</span>-area-<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">100.1</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置完成后，查看路由表信息。</span></span><br><span class="line">&lt;<span class="variable constant_">R1</span>&gt;display ip routing-table</span><br><span class="line"><span class="title class_">Route</span> <span class="title class_">Flags</span>: R - relay, D - download to fib</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="title class_">Routing</span> <span class="title class_">Tables</span>: <span class="title class_">Public</span></span><br><span class="line"><span class="title class_">Destinations</span> : <span class="number">7</span> <span class="title class_">Routes</span> : <span class="number">7</span></span><br><span class="line"><span class="title class_">Destination</span>/<span class="title class_">Mask</span> <span class="title class_">Proto</span> <span class="title class_">Pre</span> <span class="title class_">Cost</span> <span class="title class_">Flags</span> <span class="title class_">NextHop</span> <span class="title class_">Interface</span></span><br><span class="line"><span class="number">10.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span> <span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="number">10.1</span><span class="number">.1</span><span class="number">.254</span>/<span class="number">32</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="number">100.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> <span class="variable constant_">OSPF</span> <span class="number">10</span> D <span class="number">200.1</span><span class="number">.1</span><span class="number">.2</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="title class_">InLoopBack0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="title class_">InLoopBack0</span></span><br><span class="line"><span class="number">200.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">200.1</span><span class="number">.1</span><span class="number">.1</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"><span class="number">200.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">32</span> <span class="title class_">Direct</span> <span class="number">0</span> <span class="number">0</span> D <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="title class_">GigabitEthernet0</span>/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="variable constant_">R2</span>&gt;display ip routing-table</span><br><span class="line">...</span><br><span class="line">&lt;<span class="variable constant_">R3</span>&gt;display ip routing-table</span><br><span class="line">...</span><br><span class="line"><span class="comment">//可以观察到，目前每台设备都可以正常获得路由信息，连通性测试省略。</span></span><br></pre></td></tr></table></figure><h3 id="2、配置DHCP服务器"><a href="#2、配置DHCP服务器" class="headerlink" title="2、配置DHCP服务器"></a>2、配置DHCP服务器</h3><p>​总部路由器 R3 配置为 DHCP 服务器，负责为分部的网络分配 IP 地址。在 R3 上使用命令dhcp enable开启DHCP功能，创建全局地址池dhcp-pool，可分配IP地址范围为10.1.1.0&#x2F;24，出口网关地址为 10.1.1.254。并在面向 DHCP 中继设备的接口上开启 DHCP 服务功能，指定从全局地址池分配地址。 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="variable constant_">R3</span>]dhcp enable</span><br><span class="line"><span class="title class_">Info</span>: <span class="title class_">The</span> operation may take a few seconds. <span class="title class_">Please</span> wait <span class="keyword">for</span> a moment.<span class="property">done</span>.</span><br><span class="line">[<span class="variable constant_">R3</span>]ip pool dhcp-pool</span><br><span class="line"><span class="title class_">Info</span>:<span class="title class_">It</span><span class="string">&#x27;s successful to create an IP address pool.</span></span><br><span class="line"><span class="string">[R3-ip-pool-dhcp-pool]network 10.1.1.0 mask 255.255.255.0</span></span><br><span class="line"><span class="string">[R3-ip-pool-dhcp-pool]gateway-list 10.1.1.254</span></span><br><span class="line"><span class="string">[R3-ip-pool-dhcp-pool]interface GigabitEthernet0/0/1</span></span><br><span class="line"><span class="string">[R3-GigabitEthernet0/0/1]dhcp select global</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//配置完成后，使用命令 display ip pool 查看 IP 地址池配置情况。</span></span><br><span class="line"><span class="string">[R3]display ip pool</span></span><br><span class="line"><span class="string">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Pool-name : dhcp-pool</span></span><br><span class="line"><span class="string">Pool-No : 0</span></span><br><span class="line"><span class="string">Position : Local Status : Unlocked</span></span><br><span class="line"><span class="string">Gateway-0 : 10.1.1.254</span></span><br><span class="line"><span class="string">Mask : 255.255.255.0</span></span><br><span class="line"><span class="string">VPN instance : --</span></span><br><span class="line"><span class="string">IP address Statistic</span></span><br><span class="line"><span class="string">Total :253</span></span><br><span class="line"><span class="string">Used :0 Idle :253</span></span><br><span class="line"><span class="string">Expired :0 Conflict :0 Disable :0</span></span><br><span class="line"><span class="string">//可以观察到，当前可用的地址除去网关 IP 以外还剩下 253 个可用， 目前还没有 PC 动态申请 IP 地址。</span></span><br></pre></td></tr></table></figure><h3 id="3、配置DHCP中继"><a href="#3、配置DHCP中继" class="headerlink" title="3、配置DHCP中继"></a>3、配置DHCP中继</h3><p>​配置 R1 为 DHCP 中继设备，指定 DHCP 服务器为 R3。</p><p>​这时如果 R1 从 E 0&#x2F;0&#x2F;1 接口收到 PC 的 DHCP 广播请求包， R1 作为 DHCP 中继设备会以单播形式转发请求包到中继所指明的 DHCP 服务器 R3，服务器 R3 收到 DHCP 请求包后，会把分配的 IP 地址通过单播包返回给 DHCP 中继设备 R1，中继设备 R1 再把地址信息发送给 PC。所以在 DHCP 中继上需要指定所代理的 DHCP 服务器的地址。</p><p>​配置指定 DHCP 服务器有两种方式，<u>一种方式是在面向 PC 的接口下直接配置 DHCP服务器 IP 地址</u>。另外<u>一种方式是在面向 PC 的接口下调用全局定义的 DHCP 服务器组</u>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种配置方法：直接在 R1 的 E 0/0/1 接口下开启 DHCP 中继功能，并直接指定 DHCP服务器 IP 地址为 100.1.1.1。  </span></span><br><span class="line">[<span class="variable constant_">R1</span>]dhcp enable</span><br><span class="line">[<span class="variable constant_">R1</span>]interface <span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span>]dhcp select relay</span><br><span class="line">[<span class="variable constant_">R1</span>-<span class="title class_">Ethernet1</span>/<span class="number">0</span>/<span class="number">1</span>]dhcp relay server-ip <span class="number">100.1</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二种配置方法：在 R1 上创建 DHCP 服务器组，指定组名为 dhcp-group，并使用dhcp-server 命令添加远端的 DHCP 服务器地址。接着在 E 0/0/1 接口下开启 DHCP 中继功能并配置所对应的 DHCP 服务器组。</span></span><br><span class="line">[<span class="variable constant_">R1</span>]dhcp server group dhcp-group</span><br><span class="line"><span class="title class_">Info</span>:<span class="title class_">It</span><span class="string">&#x27;s successful to create a DHCP server group.</span></span><br><span class="line"><span class="string">[R1-dhcp-server-group-dhcp-group]dhcp-server 100.1.1.1</span></span><br><span class="line"><span class="string">[R1-dhcp-server-group-dhcp-group]interface Ethernet1/0/1</span></span><br><span class="line"><span class="string">[R1-Ethernet1/0/1]dhcp select relay</span></span><br><span class="line"><span class="string">[R1-Ethernet1/0/1]dhcp relay server-select dhcp-group</span></span><br></pre></td></tr></table></figure><p>​两种方式均能达到同样的配置要求。相比而言，在接口下直接指定 DHCP 服务器 IP 地址的方式较简单，但如果中继设备上有多个接口需要配置 DHCP 中继功能，则要在所有接口上重复同样的配置，产生的配置量较大。而如果使用服务器组的方式，则可以仅在全局定义一次，在每个接口重复调用，尤其是当有多个 DHCP 服务器或者服务器 IP 地址需要更改的时候尤为方便。</p><h3 id="4、配置PC获取地址方式为DHCP"><a href="#4、配置PC获取地址方式为DHCP" class="headerlink" title="4、配置PC获取地址方式为DHCP"></a>4、配置PC获取地址方式为DHCP</h3><p>详细方法见8.1，配置完成后测试连通性。</p><p>​整个配置过程，仅在网关路由器 R1 上开启 DHCP 中继功能，在分部没有其它过多的DHCP 配置。 在网络设计和管理中灵活使用 DHCP 中继功能能够使网络运行更加高效和方便。</p><h1 id="9、其他配置"><a href="#9、其他配置" class="headerlink" title="9、其他配置"></a>9、其他配置</h1><p><strong>配置Server-DNS：</strong><a href="https://blog.csdn.net/weixin_53466908/article/details/125400356">https://blog.csdn.net/weixin_53466908/article/details/125400356</a></p><p><strong>关于DMZ区域：</strong><a href="https://blog.csdn.net/weixin_42563968/article/details/108789588">https://blog.csdn.net/weixin_42563968/article/details/108789588</a></p><p><strong>AC+AP配置参考：</strong><a href="https://blog.csdn.net/weixin_50281314/article/details/125028672">https://blog.csdn.net/weixin_50281314/article/details/125028672</a></p><p><strong>DHCP配置：</strong><a href="https://blog.csdn.net/tryheart/article/details/107792913">https://blog.csdn.net/tryheart/article/details/107792913</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要用于快速熟悉ensp操作，完成网络工程设计拓扑设计部分，详细教程请参考：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据传输网络-三层结构体系：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;核心层：&lt;/</summary>
      
    
    
    
    <category term="网络工程设计" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="自学笔记" scheme="http://example.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="esnp" scheme="http://example.com/tags/esnp/"/>
    
  </entry>
  
  <entry>
    <title>网络工程设计01——计算机网络基础</title>
    <link href="http://example.com/2022/11/05/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A101/"/>
    <id>http://example.com/2022/11/05/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A101/</id>
    <published>2022-11-04T19:16:05.000Z</published>
    <updated>2022-11-06T15:44:16.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、概论"><a href="#0、概论" class="headerlink" title="0、概论"></a>0、概论</h2><blockquote><p>这部分知道个大概即可</p></blockquote><h3 id="0-1、计算机网络的概念"><a href="#0-1、计算机网络的概念" class="headerlink" title="0.1、计算机网络的概念"></a>0.1、计算机网络的概念</h3><p><strong>计算机网络的定义：</strong></p><p>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p><p><strong>计算机网络的组成：</strong></p><ul><li>终端系统：提供共享的软件资源和硬件资源</li><li>通信子网：提供信息交换的网络节点和通信线路</li></ul><p><strong>计算机网络的类型：</strong></p><ul><li><strong>按照拓扑分类</strong>（图片可以参考这篇博客：<a href="https://blog.csdn.net/weixin_46013401/article/details/110789567">计算机网络：计算机网络拓扑结构的五种分类方式</a><ul><li>星型结构</li><li>树形结构</li><li>总线型结构</li><li>环形结构</li><li>网状结构</li></ul></li><li><strong>按照范围分类</strong><ul><li>局域网LAN（Local Area Network）<ul><li>局域网和以太网<br>以太网是一种计算机局域网技术。<br>IEEE组织的IEEE 802.3标准制定了以太网的技术标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是目前应用最普遍的局域网技术，取代了其他局域网技术如令牌环、FDDI和ARCNET</li><li>LAN、WLAN、WIFI<br>无线局域网，简称WLAN。<br>是在几千米范围内的公司楼群或是商场内的计算机互相连接所组建的计算机网络，一个无线局域网能支持几台到几千台计算机的使用。<br>无线局域网的一个标准称为IEEE 802.11，俗称WIFI。</li></ul></li><li>城域网MAN（Metropolitan Area Network）</li><li>广域网WAN（Wide Area Network）</li></ul></li><li><strong>按照传输方式分类</strong><ul><li>有线网络：IEEE802.3</li><li>无线网络：<ul><li>IEEE802.11</li><li>WLAN无线局域网</li><li>WPAN无线个域网</li></ul></li></ul></li></ul><h3 id="0-2、计算机网络体系结构"><a href="#0-2、计算机网络体系结构" class="headerlink" title="0.2、计算机网络体系结构"></a>0.2、计算机网络体系结构</h3><p><strong>传输方式</strong></p><ul><li>按照传输方向分<ul><li>单工：只能单方向传输的工作模式</li><li>双工：在同一时间，线路上只能允许一个方向的数据通过</li><li>全双工：双方可以同时进行数据通信</li></ul></li><li>按照传输对象分<ul><li>单播：1对1</li><li>多播：1对多</li><li>广播：1对all</li></ul></li></ul><p><strong>数据交换</strong></p><ul><li>电路交换：整个报文从源头到终点连续的传输</li><li>报文交换：整个报文先传送到相邻结点，全部存储下来，查找转发表再转发到下一个结点</li><li>分组交换：将一个报文分成多个分组，传送到相邻结点，再查找转发表，再转发到下一个结点</li></ul><p><strong>通信协议和体系结构（重要）</strong></p><ul><li><p>网络协议三要素：语法、语义、时序</p></li><li><p><strong>OSI参考模型：</strong></p><ul><li><strong>物理层</strong>：单位：bit。利用传输介质为通信的网络结点之间的建立</li><li><strong>数据链路层</strong>：单位：帧。在物理层的基础之上，提供结点到结点之间的服务，采取差错控制和流量控制的方法，实现网络互联</li><li><strong>网络层</strong>：单位：分组。在数据链路层的基础之上，提供点到点之间的通信，提供路由功能，实现拥塞控制、网络互联等功能。</li><li><strong>传输层</strong>：提供端到端之间的数据传输服务，实现对数据进行控制和操作的功能。</li><li><strong>会话层</strong>：负责维护通信中两个节点之间的会话建立维护和断开，以及数据的交换。</li><li><strong>表示层</strong>：表示层用于处理交互数据的表示方式，例如格式转换、数据的加密和解密、数据压缩和恢复等功能。</li><li><strong>应用层</strong>：使用应用程序通过网络服务</li></ul></li><li><p><strong><font color='red'>TCP&#x2F;IP参考模型:</font></strong></p><ul><li>网络接口层——物理层和数据链路层</li><li>网际层——网络层</li><li>传输层——传输层</li><li>应用层——会话层、表示层、应用层</li></ul></li></ul><h2 id="1、物理层"><a href="#1、物理层" class="headerlink" title="1、物理层"></a>1、物理层</h2><p><strong>四大特性：</strong>机械特性、电气特性、功能特性、过程特性</p><p><strong>两种信号：</strong>数字信号和模拟信号</p><p><strong>调制和编码：</strong></p><ul><li>调制：将任意信号调整成模拟信号</li><li>编码：将任意信号编码成为数字信号</li></ul><p><strong>传输介质：</strong></p><ul><li>双绞线：传输距离100-500米（集线器）速度按照类别区分</li><li>光纤：多模光纤和单模光纤。多模几千米；单模几十到上百千米</li></ul><p><strong>三个传输部分：</strong>源系统、传输系统、目的系统</p><p><strong>四种复用技术：</strong>频分、时分、码分、波分（光）</p><p><strong>传输方式：</strong></p><ul><li>同时间传输数量——并行传输和串行传输</li><li>通信时双方反应——同步传输和异步传输</li><li>通过传输的信号类型——基带传输和频带传输</li><li>方向和对象——单工，双工…；单播，多播…</li></ul><h2 id="2、数据链路层（重要）"><a href="#2、数据链路层（重要）" class="headerlink" title="2、数据链路层（重要）"></a>2、数据链路层（重要）</h2><blockquote><p>属于数据链路层的设备有：<strong>网卡、网桥</strong></p></blockquote><h3 id="2-1、数据链路层基础概论"><a href="#2-1、数据链路层基础概论" class="headerlink" title="2.1、数据链路层基础概论"></a>2.1、数据链路层基础概论</h3><p><strong>数据链路层概念：</strong>数据链路层是在物理层和网络层之间的协议，提供相邻结点的可靠数据传输。</p><p><strong>“帧”的概念：</strong></p><ul><li>数据链路层的协议数据单元</li><li>组成<ul><li>帧头：源MAC地址、目的MAC地址、类型</li><li>数据</li><li>帧尾：校验</li></ul></li></ul><p><strong>以太网数据帧中的MAC和LLC</strong></p><ul><li><strong>MAC</strong><ul><li>介质访问控制Medium Access Control</li><li>作用：数据帧的<u>封装&#x2F;卸装</u>，帧的<u>寻址和识别</u>，帧的<u>接收与发送</u>，<u>链路的管理</u>，帧的<u>差错控制</u>等。MAC子层的存在屏蔽了不同物理链路种类的差异性。</li></ul></li><li><strong>LLC</strong><ul><li>逻辑控制访问Logical Access Control</li><li>LLC子层的主要功能为<u>传输可靠性保障和控制</u>，数据包的<u>分段与重组</u>，数据包的<u>顺序传输</u>。</li></ul></li><li>注解：该协议位于OSI七层协议中数据链路层，数据链路层分为上层LLC（逻辑链路控制），和下层的MAC（媒体访问控制），MAC主要负责控制与连接物理层的物理介质。在发送数据的时候，MAC协议可以事先判断是否可以发送数据，如果可以发送将给数据加上一些控制信息，最终将数据以及控制信息以规定的格式发送到物理层；在接收数据的时候，MAC协议首先判断输入的信息并是否发生传输错误，如果没有错误，则去掉控制信息发送至LLC（逻辑链路控制）层。</li></ul><p><strong>数据链路层的两种传输方式：</strong>单播、广播</p><p><strong>数据链路层的三个基本问题：</strong></p><ul><li><strong>封装成帧：</strong>封装成帧就是在一段数据的前后分别添加首部和尾部，这样就构成了一个帧，接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</li><li><strong>透明传输：</strong>透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。</li><li><strong>差错检测：</strong>收到正确的帧就要向发送端发送确认，发送端在一定的期限内若没有收到对方的确认，就认为出现了差错，因而就进行重传，直到收到对方的确认为止。</li></ul><p><strong>以太网中的设备：</strong></p><ul><li><strong>集线器：</strong>集线器的英文称为“Hub”。“Hub”是“中心”的意思，集线器的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。</li><li><strong>交换机：</strong>交换机（Switch）意为“开关”是一种用于电（光）信号转发的网络设备。它可以为接入交换机的任意两个网络节点提供独享的电信号通路。最常见的交换机是以太网交换机。</li><li><strong>网桥：</strong>两个端口的交换机</li></ul><h3 id="2-2、数据链路层通信协议"><a href="#2-2、数据链路层通信协议" class="headerlink" title="2.2、数据链路层通信协议"></a>2.2、数据链路层通信协议</h3><p><strong>冲突域和广播域：</strong></p><ul><li><strong>冲突域：</strong>交换机的每一个端口都是一个冲突域；冲突域只能发生在一个网段</li><li><strong>广播域：</strong>交换机的所有端口都在一个广播域；广播域在一个或多个网段内发生。</li><li>区别：<ol><li>广播域可以跨网段；</li><li>在冲突域中所有的数据传输都是以广播形式；在广播域中，只有广播帧才会被所有主机接收；</li><li>冲突域是基于第一层（物理层），而广播域是机于第二层（数据链路层） ；</li><li>HUB 所有端口都在同一个广播域，冲突域内。Swith所有端口都在同一个广播域内，而每一个端口就是一个冲突域。</li></ol></li></ul><p><strong>VLAN 虚拟局域网（实验）</strong></p><ul><li><p>VLAN（Virtual Local Area Network）即虚拟局域网<br>是将一个物理的LAN再逻辑上划分成多个广播域的通信技术。VLAN内的主机间可以直接通信，而VLAN间不能直接通信，从而将广播报文限制在一个VLAN内。</p></li><li><p>优点和目的</p><ol><li>划分广播域</li><li>增强局域网的安全性</li><li>提高健壮性</li><li>灵活构建工作组</li></ol></li><li><p>划分VLAN的方式</p><ul><li><p>基于端口</p><p>给交换机的每个接口配置不同的PVID，当一个数据帧进入交换机接口时，如果没有带VLAN标签，且该接口上配置了PVID，那么，该数据帧就会被打上接口的PVID。如果进入的帧已经带有VLAN标签，那么交换机不会再增加VLAN标签，即使接口已经配置了PVID。</p><ul><li>Access——只允许通过一个VLAN</li><li>Trunk——允许通过多个VLAN</li><li>hybird</li></ul></li><li><p>基于子网</p><p>配置好子网与VLAN映射表，如果交换设备收到的是untagged（不带VLAN标签）帧，交换设备根据报文中的源IP地址信息，确定添加的VLAN ID。将指定网段或IP地址发出的报文在指定的VLAN中传输，减轻了网络管理者的任务量，且有利于管理。</p></li><li><p>基于MAC地址</p><p>先配置好MAC地址和VLAN ID映射关系表，当终端用户的物理位置发生改变，不需要重新配置VLAN。提高了终端用户的安全性和接入的灵活性。</p></li><li><p>基于协议</p><p>将网络中提供的服务类型与VLAN相绑定，方便管理和维护。需要对网络中所有的协议类型和VLAN ID的映射关系表进行初始配置。需要分析各种协议的地址格式并进行相应的转换，消耗交换机较多的资源，速度上稍具劣势。</p></li><li><p>基于匹配策略</p><p>先在交换机上配置好终端的MAC地址和IP地址，并与VLAN关联。只有符合条件的终端才能加入指定VLAN。符合策略的终端加入指定VLAN后，严禁修改IP地址或MAC地址，否则会导致终端从指定VLAN中退出。</p></li></ul></li></ul><p><strong>CSMA&#x2F;CD</strong></p><ul><li>CSMA&#x2F;CD即“载波侦听多路访问&#x2F;冲突检测”，是广播型信道中采用一种随机访问技术的竞争型访问方法，具有多目标地址的特点。用于总线型网络传输数据。</li><li>四大要点<ol><li>先听再发</li><li>边听边发</li><li>冲突停止</li><li>延迟后发</li></ol></li></ul><p><strong>PPP</strong></p><ul><li>点对点通信是一对一信道，因此不会发生碰撞，因此比较简单，采用PPP协议；其中PPP协议就是用户计算机和ISP(互联网服务提供商)进行通信时使用的数据链路层的协议</li><li>PPP 最初设计是为两个对等节点之间的 IP 流量传输提供一种封装协议。</li></ul><p><strong>CRC</strong></p><ul><li>循环冗余校验</li><li>是数据通信领域中最常用的一种查错校验码，其特征是信息字段和校验字段的长度可以任意选定。循环冗余检查（CRC）是一种数据传输检错功能，对数据进行多项式计算，并将得到的结果附在帧的后面，接收设备也执行类似的算法，以保证数据传输的正确性和完整性。</li></ul><h2 id="3、网络层（重要）"><a href="#3、网络层（重要）" class="headerlink" title="3、网络层（重要）"></a>3、网络层（重要）</h2><p><strong>网路层的作用：</strong>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。</p><h3 id="3-1、网际层IP协议"><a href="#3-1、网际层IP协议" class="headerlink" title="3.1、网际层IP协议"></a>3.1、网际层IP协议</h3><ul><li>ARP地址解析协议：<ul><li>根据IP地址获取物理地址</li></ul></li><li>ICMP网际控制报文协议：<ul><li>通过ICMP传输控制消息，控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。</li></ul></li><li>IGMP网际组管理协议<ul><li>是用于管理网路协议多播组成员的一种通信协议。IP主机和相邻的路由器利用IGMP来创建多播组的组成员。组播方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费。</li></ul></li></ul><h3 id="3-2、IP地址"><a href="#3-2、IP地址" class="headerlink" title="3.2、IP地址"></a>3.2、IP地址</h3><p><strong>IP地址的概念：</strong></p><ul><li><p>IP地址：IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p></li><li><p>组成：一个IP地址由4个字节，32位组成，一般用点分十进制的方式表现。</p></li><li><p>IP地址和MAC地址的区别：</p><ol><li>IP地址是一个<u>逻辑地址</u>，MAC地址是<u>物理地址</u></li><li>MAC地址是唯一的但是IP地址不是唯一的</li><li>MAC地址主要是工作在第二层（数据链路层），IP地址在网络层</li><li>MAC地址是48位，IP地址一般是32位（v6是128位）</li><li>IP地址的分配取决于网络拓扑，MAC地址分配取决于制造商。</li></ol></li></ul><p><strong>IP地址的组成：</strong></p><ul><li>主机地址&#x2F;主机号：标识某一台设备的地址</li><li>网络地址&#x2F;网络号：标识某一个网段的地址</li><li>子网掩码：<ul><li>它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。<u>子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。</u></li><li>网络掩码一般与IP地址结合使用，其中值为1的比特对应IP地址中的网络位；值为0的比特对应IP地址中的主机位，以此来辅助我们识别一个IP地址中的网络位与主机位。即网络掩码中1的个数就是IP地址的网络号的位数，0的个数就是IP地址的主机号的位数。</li></ul></li></ul><p><strong>IP地址的分类：</strong></p><ul><li>A类：<br>一个A类IP地址是指， 在IP地址的四段号码中，第一段号码为网络号码，剩下的三段号码为本地计算机的号码。<br>A类IP地址中网络的标识长度为8位，主机标识的长度为24位，A类网络地址数量较少，有126个网络，每个网络可以容纳主机数达1600多万台。<br><strong>A类IP地址范围1.0.0.1到127.255.255.254</strong><br>网络号第一位是0；</li><li>B类：<br>一个B类IP地址是指，在IP地址的四段号码中，前两段号码为网络号码。B类IP地址中网络的标识长度为16位，主机标识的长度为16位，B类网络地址适用于中等规模的网络，有16384个网络，每个网络所能容纳的计算机数为6万多台。<br><strong>B类IP地址范围128.0.0.1-191.255.255.254</strong><br>网络号前两位是10；</li><li>C类：<br>一个C类IP地址是指，在IP地址的四段号码中，前三段号码为网络号码，剩下的一段号码为本地计算机的号码。C类IP地址中网络的标识长度为24位，主机标识的长度为8位，C类网络地址数量较多，有209万余个网络。适用于小规模的局域网络，每个网络最多只能包含254台计算机。<br><strong>C类IP地址范围192.0.0.1-223.255.255.254</strong><br>网络号前三位是110；</li><li>D类：<br>D类IP地址在历史上被叫做多播地址，即组播地址。在以太网中，多播地址命名了一组应该在这个网络中应用接收到一个分组的站点。<br><strong>多播地址的最高位必须是“1110”，范围从224.0.0.0到239.255.255.255</strong></li><li>E类：保留</li><li>特殊地址：<ul><li>网络地址：主机号为全0的地址不可用</li><li>广播地址：主机号为全1的地址不可用</li><li>回环地址：127.0.0.0</li></ul></li></ul><p><strong>IPV6：</strong>因为IPv4地址满足不了需求，出现匮乏的情况，所以诞生了IPv6地址继续使用。v6地址由128位，16个字节组成，一般表现形式为十六进制。</p><h3 id="3-3、子网划分"><a href="#3-3、子网划分" class="headerlink" title="3.3、子网划分"></a>3.3、子网划分</h3><p><strong>子网划分：</strong></p><ul><li><p>概念：把基于每类的IP网络进一步分成更小的网络，每个子网由路由器界定并分配一个新的子网网络地址，子网地址是借用基于每类的网络地址的主机部分创建的。划分子网后，通过使用掩码，把子网隐藏起来，使得从外部看网络没有变化，这就是子网掩码。即，将一个大的有类网络，划分成若干个小的子网，使得IP地址的使用更为科学。</p></li><li><p>通过修改子网掩码，能起到更加精细划分网络号和主机号的作用</p></li><li><p>网络掩码一般与IP地址结合使用，其中值为1的比特对应IP地址中的网络位；值为0的比特对应IP地址中的主机位，以此来辅助我们识别一个IP地址中的网络位与主机位。即网络掩码中1的个数就是IP地址的网络号的位数，0的个数就是IP地址的主机号的位数。</p></li></ul><p><strong>VLSM：</strong></p><p>可变长子网掩码（Variable Length Subnet Mask），是为了有效使用CIDR（无类别域间路由）和路由汇聚（route summary）来控制路由表的大小，它是网络管理员常用的IP寻址技术，可以对子网进行层次化编址，以便最有效的利用现有的地址空间。</p><h3 id="3-4、网络层的路由"><a href="#3-4、网络层的路由" class="headerlink" title="3.4、网络层的路由"></a>3.4、网络层的路由</h3><p><strong>路由：</strong></p><ul><li>定义：路由（routing）是指分组从源到目的地时，决定端到端路径的网络范围的进程 。路由是指导报文转发的路径信息，通过路由可以确认转发IP报文的路径。</li><li>路由器：<ul><li>网络层的基本设备</li><li>负责数据转发</li><li>一个端口代表一个网段，路由器中存放着通往各个网段的表格，叫做路由表</li></ul></li><li>路由表（routing table）：<ul><li>又称路由择域信息库（RIB, Routing Information Base），是一个存储在路由器或者联网计算机中的电子表格（文件）或类数据库。路由表存储着指向特定网络地址的路径。</li></ul></li><li>网关（Gateway）<ul><li>又称网间连接器、协议转换器。用于两个高层协议不同的网络互联。网管既可以用于广域网互联，也可以用于局域网互连。</li></ul></li><li>路由获取方式<ul><li>直连路由</li><li>静态路由</li><li>动态路由</li></ul></li></ul><p><strong>路由的配置方式</strong></p><ul><li>静态路由<ul><li>静态路由：由管理员手工配置、配置方便，对系统要求低，适用于拓扑结构简单稳定的小型网络。</li><li>缺省路由：是一种特殊的路由，当报文没有在路由表中找到匹配的具体表项时才能使用的路由。</li></ul></li><li>动态路由：<ul><li>动态路由<ul><li>通过动态路由协议来实现不同网段的路由互通</li><li>动态路由协议由自己的路由算法，能够自动适应网络拓扑的变化，适用于具有一定数量的<u>三层设备的网络</u>。</li></ul></li><li>动态路由协议：<ul><li><strong>RIP</strong><ul><li>路由信息协议（Routing Information Protocol）</li><li>基于矢量的动态路由协议（优先跳数最少）</li><li>适用于中小规模的网络拓扑，最大跳数为15</li></ul></li><li><strong>OSPF</strong><ul><li>开放式最短路径优先（Open Shortest Path First）</li><li>基于链路状态的协议</li><li>使用SPF算法，计算最短路径。树形协议</li></ul></li><li>BGP<ul><li>BGP是自治系统间的路由协议。自治系统之间的路由协议。</li></ul></li><li>IS-IS<ul><li>IS-IS（Intermediate System-to-Intermediate System，中间系统到中间系统）与OSPF类似，通。IS-IS是基于路由路划分区域、OSPF利用接口划分。</li></ul></li><li>RIP和OSPF的区别<ol><li>RIP是基于矢量的协议，OSPF是基于链路状态.</li><li>RIP适用于中小型网络拓扑，OSPF适用于较大规模的网络.</li><li>OSPF支持可变长度子网掩码（VLSM），RIP不支持（RIPv2支持）</li><li>OSPF的收敛速度比RIP的更加迅速.</li></ol></li></ul></li></ul></li></ul><h2 id="4、传输层"><a href="#4、传输层" class="headerlink" title="4、传输层"></a>4、传输层</h2><h3 id="4-1、传输层概论"><a href="#4-1、传输层概论" class="headerlink" title="4.1、传输层概论"></a>4.1、传输层概论</h3><p><strong>传输层：</strong></p><ul><li>传输层提供端到端服务</li><li>从通信和信息处理的角度看，传输层向上层应用层提供通信服务。</li><li>所谓的端口，就好像是门牌号一样，客户端可以通过ip地址找到对应的服务器端，但是服务器端是有很多端口的，每个应用程序对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。为了对端口进行区分，将每个端口进行了编号，这就是端口号</li></ul><p><strong>端口号：</strong></p><ul><li>FTP：21(20)——文件传输协议<ul><li>21连接；20传输数据</li></ul></li><li>TELNET：23——远程登录</li><li>SMTP：25——电子邮件传输协议<ul><li>POP3（邮局协议版本3）：110</li></ul></li><li>DNS：53——域名系统</li><li>TFTP：69——简单文件传输协议</li><li>HTTP：80——超文本传输协议</li><li>SNMP：161——简单网络管理协议</li><li>HTTPS：443——超文本传输安全协议</li></ul><h3 id="4-2、传输层的两个重要协议"><a href="#4-2、传输层的两个重要协议" class="headerlink" title="4.2、传输层的两个重要协议"></a>4.2、传输层的两个重要协议</h3><p><strong>TCP：</strong></p><ul><li><p>传输控制协议 Transmission Control Protocol</p></li><li><p>TCP是传输层最重要的协议</p></li><li><p><strong>TCP的主要特点是：</strong></p><ol><li>面向连接的传输层协议</li><li>提供<u>可靠的</u>交付服务</li><li>每一条连接只能由两个端点</li><li>提供全双工通信</li><li>面向字节流</li></ol></li><li><p>窗口</p><ul><li><p>固定窗口：</p><p>如果窗口过小，当传输比较大的数据的时候需要不停的对数据进行确认，这个时候就会造成很大的延迟。</p></li><li><p>滑动窗口：</p><p>滑动窗口通俗来讲就是一种流量控制技术。<br>它本质上是描述接收方的TCP数据报缓冲区大小的数据，发送方根据这个数据来计算自己最多能发送多长的数据，如果发送方收到接收方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接收方发送窗口大小不为0的数据报的到来</p></li><li><p>拥塞处理和流量控制</p></li></ul></li><li><p>TCP的三次握手和四次挥手（重要，但此处不展开）</p></li></ul><p><strong>UDP：</strong></p><ul><li>用户数据报协议 User Datagram Protocol</li><li>UDP是在IP数据报服务之上增加了一些功能，增加了复用和分用的功能以及差错检测的功能。</li><li>UDP的主要特点是：<ol><li>无连接</li><li>尽最大努力交付</li><li>面向报文且没有拥塞控制</li><li>开销较小，传输效率较高</li></ol></li></ul><h2 id="5、应用层"><a href="#5、应用层" class="headerlink" title="5、应用层"></a>5、应用层</h2><h3 id="5-1、应用层的作用"><a href="#5-1、应用层的作用" class="headerlink" title="5.1、应用层的作用"></a>5.1、应用层的作用</h3><p>通过位于不同主机中的多个应用进程之间的通信和协同工作来完成。应用层的内容就是具体定义通信规则。</p><h3 id="5-2、应用层中常见的协议"><a href="#5-2、应用层中常见的协议" class="headerlink" title="5.2、应用层中常见的协议"></a>5.2、应用层中常见的协议</h3><ul><li><p>域名系统 DNS</p><ul><li><p>域名结构：</p><p>每一个域名用标号隔开<br>mail.cctv.com<br>三级域名.二级域名.顶级域名</p></li><li><p>域名服务器的使用方式：</p><ul><li>迭代</li><li>递归</li></ul></li></ul></li><li><p>文件传输协议 FTP</p><ul><li>使用TCP连接，传输数据</li><li>端口号是21(20)，20负责发送数据</li></ul></li><li><p>远程终端协议 TELNET</p><ul><li>使用TCP连接，远程登录到远地的另一台主机上</li><li>端口号是23</li></ul></li><li><p>万维网和HTTP协议</p><ul><li>超文本传输协议，是一个简单的“请求-响应协议”</li><li>端口号是80</li></ul></li><li><p>电子邮件协议</p><ul><li>SMTP电子邮件传输协议——端口号25</li><li>POP3邮局协议版本3——端口号110</li></ul></li><li><p>DHCP动态主机配置协议</p><ul><li>指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码</li><li>端口号68</li></ul></li></ul><h2 id="6、网络安全"><a href="#6、网络安全" class="headerlink" title="6、网络安全"></a>6、网络安全</h2><h3 id="6-1、网络安全概论"><a href="#6-1、网络安全概论" class="headerlink" title="6.1、网络安全概论"></a>6.1、网络安全概论</h3><p><strong>网络安全：</strong></p><p>网络安全（Cyber Security）是指网络系统的硬件、软件及其系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠正常地运行，网络服务不中断。</p><p><strong>两大类网络威胁</strong></p><ul><li><p>主动攻击：</p><ul><li><p>主动的去做一些在网络基础上的恶意行为。恶意篡改信息数据，发布恶意程序脚本等等。</p></li><li><p>篡改、恶意程序、拒绝服务……</p></li></ul></li><li><p>被动攻击：</p><ul><li><p>被动攻击主要是收集信息而不是进行访问。不改变数据本身的结构，也不对软硬件数据造成影响。</p></li><li><p>截获、窃取、流量分析……</p></li></ul></li></ul><p><strong>网络系统的特性</strong></p><ul><li>保密性<ul><li>信息不泄露给非授权用户、实体或过程，或供其利用的特性。</li></ul></li><li>完整性<ul><li>数据未经授权不能进行改变的特性。即信息在存储或传输过程中保持不被修改、不被破坏和丢失的特性。</li></ul></li><li>可用性<ul><li>可被授权实体访问并按需求使用的特性。即当需要时能否存取所需的信息。例如网络环境下拒绝服务、破坏网络和有关系统的正常运行等都属于对可用性的攻击。</li></ul></li><li>可靠性<ul><li>对信息的传播及内容具有控制能力。</li></ul></li><li>不可依赖性<ul><li>出现安全问题时提供依据与手段。</li></ul></li></ul><h3 id="6-2、加密和交互"><a href="#6-2、加密和交互" class="headerlink" title="6.2、加密和交互"></a>6.2、加密和交互</h3><p><strong>加密和解密</strong></p><ul><li>加密<ul><li>以某种特殊的算法改变原有的信息数据，使得未授权的用户即使获得了已加密的信息，但因不知解密的方法，仍然无法了解信息的内容。 </li><li>加密手段<ul><li>MD5加密（信息-摘要算法）——128位</li><li>AES加密（又称密钥加密）——128、192、256位</li><li>SHA1加密（安全哈希算法）——160位</li><li>RSA加密——公钥加密、私钥解密——1024位</li></ul></li></ul></li><li>解密<ul><li>加密的逆过程就是解密</li></ul></li></ul><p><strong>公钥和私钥</strong></p><ul><li><p>对称加密</p></li><li><p>采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p></li><li><p>非对称加密</p><ul><li><p>使用非对称的加密方式时，会生成两把钥匙以。发送方利用自己的公钥加密，接收方利用自己的私钥解密。</p></li><li><p>数字签名的四大特点</p><ul><li><p>防止重放攻击</p><p>攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。在数字签名中，如果采用了对签名报文加盖时戳等或添加流水号等技术，就可以有效防止重放攻击。</p></li><li><p>防止数据伪造</p><p>其他人不能伪造对消息的签名，因为私有密钥只有签名者自己知道，所以其他人不可以构造出正确的签名结果数据。</p></li><li><p>防止数据被篡改</p><p>数字签名与原始文件或摘要一起发送给接收者，一旦信息被篡改，接收者可通过计算摘要和验证签名来判断该文件无效，从而保证了文件的完整性。</p></li><li><p>防止数据抵赖</p><p>数字签名即可以作为身份认证的依据，也可以作为签名者签名操作的证据。要防止接收者抵赖，可以在数字签名系统中要求接收者返回一个自己签名的表示收到的报文，给发送者或受信任第三方。如果接收者不返回任何消息，此次通信可终止或重新开始，签名方也没有任何损失，由此双方均不可抵赖。</p></li></ul></li></ul></li></ul><p><strong>防火墙</strong></p><ul><li><p>防火墙是一种访问控制技术，可以严格控制进出网络边界的分组，禁止任何不必要的通信，来减少潜在入侵的发生。</p></li><li><p><strong>防火墙的区域</strong></p><ul><li>Local 本地区域<ul><li>顶级安全区域，安全优先级为100</li><li>local就是防火墙本身的区域比如ping指令等网际控制协议的回复，需要local域的权限凡是由防火墙主动发出的报文均可认为是从Local区域中发出凡是需要防火墙响应并处理(而不是转发)的报文均可认为是由Local区域接收</li></ul></li><li>Trust 受信区<ul><li>高级级安全区域，安全优先级为85</li><li>通常用来定义内部用户所在的网络，也可以理解为应该是防护最严密的地区。</li></ul></li><li>DMZ 非军事化区<ul><li>中级安全区域，安全优先级为50</li><li>通常用来定义内部服务器所在网络</li><li>作用是把WEB、E-mail，等允许外部访问的服务器单独接在该区端口，使整个需要保护的内部网络接在信任区端口后，不允许任何访问，实现内外网分离，达到用户需求。DMZ可以理解为一个不同于外网或内网的特殊网络区域，DMZ内通常放置一些不含机密信 息的公用服务器，比如Web、Mail、 FTP等。 这样来自外网的访问者可以访问DMZ中的服务，但不可能接触到存放在内网中的公司机密或私人信息等,即使DMZ中服务器受到破坏，也不会对内网中的机密信启造成影响。</li></ul></li><li>Untrust 非受信区<ul><li>低级安全区域，安全优先级为5</li><li>通常用来定义Internet等不安全的网络，用于网络入口线的接入。</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0、概论&quot;&gt;&lt;a href=&quot;#0、概论&quot; class=&quot;headerlink&quot; title=&quot;0、概论&quot;&gt;&lt;/a&gt;0、概论&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这部分知道个大概即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0-1、计算机网络的概念</summary>
      
    
    
    
    <category term="网络工程设计项目" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="自学笔记" scheme="http://example.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Mysql基础</title>
    <link href="http://example.com/2022/10/30/Mysql%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/10/30/Mysql%E5%9F%BA%E7%A1%80/</id>
    <published>2022-10-29T16:47:01.000Z</published>
    <updated>2022-10-29T16:53:03.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、初识MySQL"><a href="#1、初识MySQL" class="headerlink" title="1、初识MySQL"></a>1、初识MySQL</h1><h2 id="1-1、什么是数据库"><a href="#1-1、什么是数据库" class="headerlink" title="1.1、什么是数据库"></a>1.1、什么是数据库</h2><ul><li><p>数据库：DB，DataBase</p></li><li><p>概念：数据仓库，软件，安装在操作系统（windows、linux、mac…）之上</p></li><li><p>作用：存储数据，管理数据</p></li></ul><h2 id="1-2、数据库分类"><a href="#1-2、数据库分类" class="headerlink" title="1.2、数据库分类"></a>1.2、数据库分类</h2><p><strong>关系数据库：</strong>（SQL）</p><ul><li>MySQL，Oracle，Sql Server，DB2，SQLlite</li><li>通过表和表之间、行和列之间的关系进行数据的存储</li></ul><p><strong>非关系型数据库：</strong>（NoSQL）Not Only SQL</p><ul><li>Redis，MongDB</li><li>对象存储，通过对象的自身属性来决定</li></ul><p><strong><font color='red'>DBMS（数据库管理系统）：</font></strong></p><ul><li><p>数据库管理软件，科学有效地管理我们的数据。维护数据</p></li><li><p>MySQL是数据库管理系统</p></li></ul><h2 id="1-3、MySQL简介"><a href="#1-3、MySQL简介" class="headerlink" title="1.3、MySQL简介"></a>1.3、MySQL简介</h2><p>MySQL<strong>是一个关系型数据库</strong></p><p>前：瑞典MySQL AB公司</p><p>现：属于Oracle旗下产品</p><p>MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>开源的数据库软件</p><p>体积小、速度快、总体拥有成本低</p><p>中小型网站（或者大型网站），可用<strong>集群</strong></p><h2 id="1-4、连接数据库"><a href="#1-4、连接数据库" class="headerlink" title="1.4、连接数据库"></a>1.4、连接数据库</h2><p>命令行连接</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p <span class="comment">-- 连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>)<span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">-- 修改用户密码</span></span><br><span class="line"></span><br><span class="line">flush privileges; <span class="comment">-- 刷新权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- 所有语句都用分号“；”结尾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看所有的数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use school <span class="comment">-- 切换数据库 use 数据库名</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables; <span class="comment">-- 查看数据库中所有的表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">describe</span> student; <span class="comment">-- 显示数据库中所有表的信息</span></span><br><span class="line"></span><br><span class="line">creat database westos; <span class="comment">-- 创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit; <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释（SQL本来的注释）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQl多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>数据库语言</strong> CRUD增删改查</p><ul><li>DDL 定义</li><li>DML 操作</li><li>DQL 查询</li><li>DCL 控制</li></ul><h1 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h1><table><thead><tr><th><strong>名称</strong></th><th><strong>解释</strong></th><th align="left"><strong>命令</strong></th></tr></thead><tbody><tr><td>DDL（数据定义语言）<br />Data Definition Language</td><td>定义和管理数据对象，如：数据库、数据表</td><td align="left">CREATE、DROP、ALTER</td></tr><tr><td>DML（数据操作语言）<br />Data Manipulation Language</td><td>用于操作数据库对象中包含的数据</td><td align="left">INSERT、UPDATE、DELETE</td></tr><tr><td>DQL（数据查询语言）<br />Data Query Language</td><td>用于查询数据库数据</td><td align="left">SELECT（重点）</td></tr><tr><td>DCL（数据控制语言）<br />Data Control Language</td><td>用于管理数据库的语言，包括管理权限和数据更改</td><td align="left">GRANT、commit、rollback</td></tr></tbody></table><h2 id="2-1、操作数据库（了解）"><a href="#2-1、操作数据库（了解）" class="headerlink" title="2.1、操作数据库（了解）"></a>2.1、操作数据库（了解）</h2><p>1.创建数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名</span><br></pre></td></tr></table></figure><p>2.删除数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] 数据库名</span><br></pre></td></tr></table></figure><p>3.查看数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES<span class="comment">-- 查看所有的数据库</span></span><br></pre></td></tr></table></figure><p>4.使用数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE 数据库名</span><br></pre></td></tr></table></figure><p><strong>学习方法：</strong></p><ul><li>对照SQLyog工具自动生成的语句学习</li><li>固定语法中的单词需要记忆（SELECT）</li></ul><h2 id="2-2、数据库的列类型"><a href="#2-2、数据库的列类型" class="headerlink" title="2.2、数据库的列类型"></a>2.2、数据库的列类型</h2><blockquote><p>数值</p></blockquote><ul><li>tinyint十分小的数据1个字节</li><li>smallint较小的数据2个字节</li><li>mediumint中等大小的数据3个字节</li><li><strong>int标准的整数4个字节</strong></li><li>bigint较大的数据8个字节</li><li>float浮点数（单）4个字节</li><li>double浮点数（双）8个字节（考虑精度问题）</li><li><u>decimal字符串形式的浮点数金融相关的计算，一般使用decimal</u></li></ul><blockquote><p>字符串</p></blockquote><ul><li>char字符串，固定大小0-255</li><li><strong>varchar可变字符串0-65535常用的变量</strong>（相当于Java中的String）</li><li>tinytext微型文本2^8-1</li><li><strong>text文本串2^16-1保存大文本</strong></li></ul><blockquote><p>时间和日期</p></blockquote><ul><li>dateYYYY-MM-DD日期格式</li><li>timeHH:mm:ss 时间格式</li><li><strong>datetimeYYYY-MM-DD HH:mm:ss最常用的时间格式</strong></li><li><strong>timestamp时间戳，1970.1.1到现在的毫秒数！</strong></li><li>year年份表示</li></ul><blockquote><p>NULL</p></blockquote><ul><li>没有值，位置</li><li><font color='red'>注意！不要使用NULL进行运算，结果必定为NULL</font></li></ul><h2 id="2-3、数据库的字段属性（重点）"><a href="#2-3、数据库的字段属性（重点）" class="headerlink" title="2.3、数据库的字段属性（重点）"></a>2.3、数据库的字段属性（重点）</h2><p><font color='red'>Unsigned：</font></p><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><p><font color='red'>Zerofill：</font></p><ul><li>0填充的</li><li>不足的位数，使用0来填充<ul><li>eg: int(3)，5—&gt;005</li></ul></li></ul><p><font color='red'>Auto Increment（自增）：</font> </p><ul><li>自动在上一条记录的基础上+1（默认）</li><li>通常用来设计唯一的主键（比如 index）</li><li>可以自定义设计主键自增的起始值和步长</li></ul><p><font color='red'>Not Null（非空）：</font></p><ul><li>假设设置为Not Null，如果不赋值，就会报错</li><li>Null，如果不填写值，默认为null</li></ul><p><font color='red'>Default（默认）：</font></p><ul><li>设置默认的值</li><li>如果不指定该列的值，则会有默认值</li></ul><h2 id="2-4、创建数据库表（重点）"><a href="#2-4、创建数据库表（重点）" class="headerlink" title="2.4、创建数据库表（重点）"></a>2.4、创建数据库表（重点）</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表（列，字段）使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int,登陆密码varchar(20),姓名，性别varchar(2),出生日期(datatime),家庭住址,邮箱(email)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点：使用英文括号(),表的 名称和字段 尽量使用反引号``括起来</span></span><br><span class="line"><span class="comment">-- 字符串使用 单引号&#x27;&#x27;括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加逗号, 最后一句不用加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY（主键），一般一个表只有唯一一个主键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT<span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;匿名&#x27;</span> COMMENT<span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;123456&#x27;</span> COMMENT<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;女&#x27;</span> COMMENT<span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>格式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]<span class="string">&#x27;表名&#x27;</span>(</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span>列类型[属性][索引][注释],</span><br><span class="line">    <span class="string">&#x27;字段名&#x27;</span>列类型[属性][索引][注释],</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span>列类型[属性][索引][注释],</span><br><span class="line">......</span><br><span class="line">    <span class="string">&#x27;字段名&#x27;</span>列类型[属性][索引][注释]<span class="comment">-- 最后一句不需要逗号</span></span><br><span class="line">)[表类型][字符集设置][注释]</span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `school` <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` <span class="comment">-- 查看创建表的语句</span></span><br><span class="line"><span class="keyword">DESC</span> school <span class="comment">-- 显示的表的结构</span></span><br></pre></td></tr></table></figure><h2 id="2-5数据表的类型"><a href="#2-5数据表的类型" class="headerlink" title="2.5数据表的类型"></a>2.5数据表的类型</h2><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p><p>常见的 MyISAM 与 InnoDB 类型：</p><table><thead><tr><th></th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为两倍</td></tr></tbody></table><p>适用场合：</p><ul><li>适用 MyISAM : 节约空间，响应较快</li><li>适用 InnoDB : 安全性 , 事务处理，多用户操作数据表</li></ul><blockquote><p>数据表的存储位置</p></blockquote><p>MySQL数据表以文件方式存放在磁盘中</p><ul><li>包括表文件 , 数据文件 , 以及数据库的选项文件</li><li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 .</li></ul><p>注意 :</p><ul><li>frm – 表结构定义文件</li><li>MYD – 数据文件 ( data )</li><li>MYI – 索引文件 ( index )</li><li>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</li><li>MyISAM类型数据表对应三个文件</li></ul><blockquote><p>设置数据表字符集编码</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET <span class="operator">=</span> utf8</span><br></pre></td></tr></table></figure><p>如果不设置，MySQL使用默认字符集编码（不支持中文！）</p><p>MySQL默认编码是Latin1，不支持中文</p><h2 id="2-6、修改数据库"><a href="#2-6、修改数据库" class="headerlink" title="2.6、修改数据库"></a>2.6、修改数据库</h2><blockquote><p>修改表 ( ALTER TABLE )</p></blockquote><p><strong>修改表名：</strong>ALTER TABLE 旧表名 RENAME AS 新表名</p><p><strong>添加字段</strong> ：ALTER TABLE 表名 ADD字段名 列属性[属性]</p><p><strong>修改字段 :</strong></p><ul><li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li><li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li></ul><p><strong>删除字段 :</strong>  ALTER TABLE 表名 DROP 字段名</p><blockquote><p><strong>删除数据表</strong></p></blockquote><p>语法：DROP TABLE [IF EXISTS] 表名</p><ul><li>IF EXISTS为可选 , 判断是否存在该数据表</li><li>如删除不存在的数据表会抛出错误</li></ul><p><strong>eg:</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改数据库(alter table)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> university RENAME <span class="keyword">AS</span> school</span><br><span class="line"><span class="comment">-- 增加表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> university <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段（重命名、修改约束）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school MODIFY age <span class="type">VARCHAR</span>(<span class="number">11</span>)<span class="comment">-- 修改约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school CHANGE age age1 <span class="type">INT</span>(<span class="number">3</span>)<span class="comment">-- 字段重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school <span class="keyword">DROP</span> age1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> teacher</span><br></pre></td></tr></table></figure><p><strong>所有创建和删除操作尽量加上判断，以免报错！！！</strong></p><blockquote><p>其他</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span> 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 <span class="comment">/* 注释内容 */</span></span><br><span class="line">    单行注释 <span class="comment">-- 注释内容        (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span></span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> 模式通配符：</span><br><span class="line">    _    任意单个字符</span><br><span class="line">    <span class="operator">%</span>    任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 \<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span></span><br><span class="line"><span class="string">6. SQL对大小写不敏感 （关键字）</span></span><br><span class="line"><span class="string">7. 清除已有语句：\c</span></span><br></pre></td></tr></table></figure><h1 id="三、MySQL数据管理"><a href="#三、MySQL数据管理" class="headerlink" title="三、MySQL数据管理"></a>三、MySQL数据管理</h1><h2 id="3-1、外键（了解）"><a href="#3-1、外键（了解）" class="headerlink" title="3.1、外键（了解）"></a>3.1、外键（了解）</h2><blockquote><p>外键概念</p></blockquote><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。</p><ul><li><p><strong>主表</strong>（父表）：</p><p>在数据库中建立的表格即Table，其中存在<a href="https://www.baidu.com/s?wd=%E4%B8%BB%E9%94%AE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">主键</a>(primary key)用于与其它表相关联，并且作为在主表中的唯一性标识</p></li><li><p><strong>从表</strong>（子表）：</p><p>以主表的<a href="https://www.baidu.com/s?wd=%E4%B8%BB%E9%94%AE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">主键</a>（primary key）值为<a href="https://www.baidu.com/s?wd=%E5%A4%96%E9%94%AE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">外键</a> (Foreign Key)的表，可以通过<a href="https://www.baidu.com/s?wd=%E5%A4%96%E9%94%AE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">外键</a>与主表进行关联查询。从表与主表通过<a href="https://www.baidu.com/s?wd=%E5%A4%96%E9%94%AE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">外键</a>进行关联查询。</p></li><li><p><strong>关系及用法概述：</strong></p><p>从表数据依赖于主表，一般最后查询数据时把主表与从表进行关联查询。</p></li><li><p><strong>外键作用：</strong></p><p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据，即<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p></li></ul><blockquote><p>方式一：在创建表的时候，增加约束（麻烦，比较复杂）</p></blockquote><p>删除有外键关系的表（主表和从表）的时候，必须先删除从表（引用方），再删除主表（被引用方）</p><blockquote><p>方式二：创建表成功后，添加外键约束</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `grade`( </span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>, </span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`) </span><br><span class="line">  )ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8; </span><br><span class="line"><span class="comment">-- 学生表的gradeid字段，引用年级表的gradeid字段</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给外键添加约束（执行引用） reference 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT<span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;匿名&#x27;</span> COMMENT<span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;学生的年级&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;123456&#x27;</span> COMMENT<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span><span class="string">&#x27;女&#x27;</span> COMMENT<span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ↑创建表时没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY(`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`);</span><br><span class="line"><span class="comment">-- ALTER TABLE</span></span><br><span class="line"><span class="comment">--`从表` add constraint 约束名:通常为FK_键名 FOREIGN KEY `作为外键的列` references `主表`（`引用字段名`）;</span></span><br></pre></td></tr></table></figure><p>以上的操作都是物理外键，数据库级别的外键，不建议使用（避免数据库过多造成困扰）</p><p><strong><font color='red'>最佳实践：</font></strong></p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>使用多张表的数据、使用外键时（用程序去实现）</li></ul><h2 id="3-2、DML语言"><a href="#3-2、DML语言" class="headerlink" title="3.2、DML语言"></a>3.2、DML语言</h2><p>Data Manipulation Language</p><p><strong>数据库意义 ：</strong> 数据存储、数据管理</p><p><strong>管理数据库数据方法：</strong></p><ul><li><p>通过SQLyog等管理工具管理数据库数据</p></li><li><p>通过<strong>DML语句</strong>管理数据库数据</p></li></ul><p><strong>DML语言：</strong>数据操作语言</p><p>用于操作数据库对象中所包含的数据，包括 :</p><ul><li>INSERT (添加数据语句)</li><li>UPDATE (更新数据语句)</li><li>DELETE (删除数据语句)</li></ul><h2 id="3-3、添加-insert"><a href="#3-3、添加-insert" class="headerlink" title="3.3、添加(insert)"></a>3.3、添加(insert)</h2><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名[(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...)] <span class="keyword">VALUES</span>(<span class="string">&#x27;值1&#x27;</span>,...),(<span class="string">&#x27;值2&#x27;</span>,...),(<span class="string">&#x27;值3&#x27;</span>,...)...</span><br></pre></td></tr></table></figure><p><font color='red'><strong>注意：</strong></font></p><ul><li><p>字段值之间用 英文逗号 隔开</p></li><li><p>‘字段1，字段2’ 的部分可以省略，但添加的值必须和 <u>表结构、数据列</u> 的 <u>顺序、数量</u> 相对应、数量一致</p></li><li><p>可以一次插入多条数据，用英文逗号隔开</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用语句如何增加语句</span></span><br><span class="line"><span class="comment">-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade(gradename) <span class="keyword">VALUES</span> (<span class="string">&#x27;大一&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 主键自增,能否省略?</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="string">&#x27;大二&#x27;</span>);</span><br><span class="line"><span class="comment">-- 不能省略，会报错↓</span></span><br><span class="line"><span class="comment">-- 查询:INSERT INTO grade VALUE (&#x27;大二&#x27;)错误代码：1136</span></span><br><span class="line"><span class="comment">-- Column count doesn`t match value count at row 1</span></span><br><span class="line"><span class="comment">-- 结论:&#x27;字段1,字段2...&#x27;该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 一次插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade(gradename) <span class="keyword">VALUES</span> (<span class="string">&#x27;大三&#x27;</span>),(<span class="string">&#x27;大四&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次插入多个属性</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>`student`(`studentno`,`studentname`,`email`,`address`,`phone`) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1003&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zs123@qq.com&#x27;</span>,<span class="string">&#x27;北京朝阳&#x27;</span>,<span class="string">&#x27;12318237137&#x27;</span>),(<span class="string">&#x27;1004&#x27;</span>,<span class="string">&#x27;mei&#x27;</span>,<span class="string">&#x27;m123@qq.com&#x27;</span>,<span class="string">&#x27;湖南长沙&#x27;</span>,<span class="string">&#x27;12318237137&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-4、修改-update"><a href="#3-4、修改-update" class="headerlink" title="3.4、修改(update)"></a>3.4、修改(update)</h2><p>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 </span><br><span class="line"><span class="keyword">SET</span> column_name<span class="operator">=</span><span class="string">&#x27;value&#x27;</span> [,column_name2 <span class="operator">=</span> value2,...] <span class="comment">-- 修改的值  trim标签</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]; <span class="comment">-- 条件</span></span><br></pre></td></tr></table></figure><p><font color='red'><strong>注意：</strong></font></p><ul><li>column_name 为需要更改的数据列</li><li>value 为修改后的数据</li><li>condition 为筛选条件，如果不指定，则修改所有列数据</li><li>多个设置的属性之间，用英文逗号隔开</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改学员名字，带条件（WHERE）</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` </span><br><span class="line"><span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;一条&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不带条件，修改所有列数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` </span><br><span class="line"><span class="keyword">SET</span> `gradeid` <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性,用逗号隔开</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` </span><br><span class="line"><span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;一条&#x27;</span>,`email`<span class="operator">=</span><span class="string">&#x27;2333@qq.com&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- BETWEEN AND 定位某个范围内的数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` </span><br><span class="line"><span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;两条&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- AND 通过多个条件定位数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` </span><br><span class="line"><span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;and&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;赵四&#x27;</span> <span class="keyword">AND</span> id <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>where条件子句：</p><p>有条件地从表中筛选数据</p></blockquote><h2 id="3-5、删除-delete"><a href="#3-5、删除-delete" class="headerlink" title="3.5、删除(delete)"></a>3.5、删除(delete)</h2><blockquote><p>DELETE命令</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除数据（避免使用下面这种方式）</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><blockquote><p>TRUNCATE命令</p></blockquote><p>作用：完全清空一个数据库表，表的结构和索引不会变</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空`student`表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student`;</span><br></pre></td></tr></table></figure><blockquote><p>DELETE 和 TRUNCATE 的区别</p></blockquote><ul><li>相同点：都能删除数据，不会删除表的结构</li><li>不同点：<ul><li>TRUNCATE 会<u>重新设置自增列</u>，计数器归零</li><li>TRUNCATE <u>不会影响事务</u></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试DELETE和TRUNCATE的区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`coll` <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`coll`) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`; <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> `test`; <span class="comment">-- 自增会归零</span></span><br></pre></td></tr></table></figure><p>DELETE删除的问题：重启数据库后的现象（了解即可）</p><ul><li>InnoDB：自增列会重新从1开始（数据存在内存中，重启后丢失）</li><li>MyISAM：自增列继续从上一个自增量开始（数据存在文件中，不会丢失）</li></ul><h1 id="四、DQL查询数据（最重点）"><a href="#四、DQL查询数据（最重点）" class="headerlink" title="四、DQL查询数据（最重点）"></a>四、DQL查询数据（最重点）</h1><h2 id="4-1、DQL"><a href="#4-1、DQL" class="headerlink" title="4.1、DQL"></a>4.1、DQL</h2><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li><font color='red'>使用频率最高的语句</font></li></ul><blockquote><p>SELECT语法</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">    [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">    [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">    [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">    <span class="comment">--  指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure><p><strong>注意 : [ ] 括号代表可选 , { }括号代表必选</strong></p><blockquote><p>执行顺序：WHERE –&gt; GROUP BY –&gt;  HAVING –&gt; ORDER BY</p></blockquote><h2 id="4-2、查询指定字段"><a href="#4-2、查询指定字段" class="headerlink" title="4.2、查询指定字段"></a>4.2、查询指定字段</h2><p><strong>语法：SELECT 字段名 FROM 表</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起一个名字 AS （可以给字段/表起别名）</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno` <span class="keyword">AS</span> 学生学号,`studentname` <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s;</span><br><span class="line"><span class="comment">-- 当列名无法“见名知意”时，使用AS为字段、表起名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 Concat(a,b，c....) 合并多个字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;名字：&#x27;</span>,studentname) <span class="keyword">AS</span> <span class="string">&#x27;新名字&#x27;</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><blockquote><p>当列名无法“见名知意”时，使用AS为字段、表起名</p></blockquote><blockquote><p>去重 distinct</p></blockquote><p>作用：去除SELECT的重复结果，重复数据只显示一条</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 去重distinct</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>; <span class="comment">-- 查询全部考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno` <span class="keyword">FROM</span> <span class="keyword">result</span>; <span class="comment">-- 查询哪些学生参加考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `studentno` <span class="keyword">FROM</span> <span class="keyword">result</span>;<span class="comment">-- 发现重复数据，去重</span></span><br></pre></td></tr></table></figure><blockquote><p>数据库的列（表达式）</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据库的列（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION(); <span class="comment">-- 查询数据库版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1000</span><span class="number">-7</span> <span class="keyword">AS</span> 计算结果；<span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment <span class="comment">-- 查询自增步长（变量）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生考试成绩+1分，查看</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentresult`<span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> 新成绩 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure><p><strong><font color='red'>数据库中的“表达式”：文本值、列、NULL、函数、计算表达式、系统变量…</font></strong></p><p>SELECT 表达式 FROM 表</p><h2 id="4-3、where条件子句"><a href="#4-3、where条件子句" class="headerlink" title="4.3、where条件子句"></a>4.3、where条件子句</h2><p>作用：用于检索数据表中符合条件的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果为 <strong>布尔值</strong></p><blockquote><p>逻辑操作符</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 满足条件的查询(where)</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询考试成绩在95-100之间的</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- AND也可以写成 &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 模糊查询(对应的词:精确查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 除了1000号同学,要其他同学的成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno<span class="operator">!=</span><span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 使用NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentno<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure><blockquote><p>模糊查询</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询 between and \ like \ in \ null</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- LIKE</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- 查询姓刘的同学的学号及姓名</span></span><br><span class="line"><span class="comment">-- like结合使用的通配符 :</span></span><br><span class="line"><span class="comment">-- % :代表0到任意个字符) ;  _ :代表一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询姓刘的同学,后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘_&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询姓刘的同学,后面只有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘__&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询姓名中含有 嘉 字的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;%嘉%&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询姓名中含有特殊字符的需要使用转义符号 &#x27;\&#x27;</span></span><br><span class="line"><span class="comment">-- 自定义转义符关键字:  ESCAPE &#x27;:&#x27;</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- IN</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- 查询学号为1000,1001,1002的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentno <span class="keyword">IN</span> (<span class="number">1000</span>,<span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="comment">-- 查询地址在北京,南京,河南洛阳的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname,address <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IN</span> (<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>,<span class="string">&#x27;河南洛阳&#x27;</span>);</span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- NULL 空</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- 查询出生日期没有填写的同学</span></span><br><span class="line"><span class="comment">-- 不能直接写=NULL , 这是代表错误的 , 用 is null</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> BornDate <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 查询出生日期填写的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> BornDate <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 查询没有写家庭住址的同学(空字符串不等于null)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> Address<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> Address <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="4-4、联表查询"><a href="#4-4、联表查询" class="headerlink" title="4.4、联表查询"></a>4.4、联表查询</h2><blockquote><p>Join对比</p></blockquote><table><thead><tr><th>操作符名称</th><th>描述</th></tr></thead><tbody><tr><td>INNER JOIN</td><td>如果表中至少有一个匹配，则返回值</td></tr><tr><td>LEFT JOIN</td><td>即使右表中没有匹配，也从左表中返回所有的行</td></tr><tr><td>RIGHT JOIN</td><td>即使左表中没有匹配，也从右表中返回所有的行</td></tr></tbody></table><p><strong>思路：</strong></p><ol><li><p>分析需求，分析查询的字段来自哪些表（多表使用连接查询）</p></li><li><p>确定使用哪种连接查询？</p><p>1）确定交叉点（两个表中哪些数据是相同的）</p><p>2）判断的条件：A表中的a &#x3D; B表中的b</p></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">连接查询</span></span><br><span class="line"><span class="comment">    如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span></span><br><span class="line"><span class="comment">内连接 inner join</span></span><br><span class="line"><span class="comment">    查询两个表中的结果集中的交集</span></span><br><span class="line"><span class="comment">外连接 outer join</span></span><br><span class="line"><span class="comment">    左外连接 left join</span></span><br><span class="line"><span class="comment">        (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span></span><br><span class="line"><span class="comment">    右外连接 right join</span></span><br><span class="line"><span class="comment">        (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*思路:</span></span><br><span class="line"><span class="comment">(1):分析需求,确定查询的列来源于两个类,student  result,连接查询</span></span><br><span class="line"><span class="comment">(2):确定使用哪种连接查询?(内连接)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- join (连接的表) on （判断条件）连接查询</span></span><br><span class="line"><span class="comment">-- where    等值查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 右连接(也可实现)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 等值连接</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s , <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">WHERE</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 左连接 (查询了所有同学,不考试的也会查出来)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查一下缺考的同学(左连接应用场景)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">WHERE</span> StudentResult <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 思考题（查询了参加考试的同学信息：</span></span><br><span class="line"><span class="comment">-- 学号studentno，学生姓名studentname，科目名subjectname，分数studentresult）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路</span></span><br><span class="line"><span class="comment">1.分析需求，分析查询字段来自哪些表，student、result、studentsubject（连接查询）</span></span><br><span class="line"><span class="comment">2.确定使用哪种连接查询？7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表钟那个数据是相同的）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> sub.subjectno <span class="operator">=</span> r.`studentno`</span><br><span class="line"><span class="comment">-- 要查哪些数据 SELECT...</span></span><br><span class="line"><span class="comment">-- 从哪几个表中查询FROM 表 XXX JOIN 连接的表 ON 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在一种多张表查询，先查询两张，再慢慢增加</span></span><br></pre></td></tr></table></figure><p><strong><a href="https://www.cnblogs.com/xujunkai/p/12491195.html">join查询的7种方法:</a></strong></p><ul><li><p>内连接：</p><p><img src="https://img2020.cnblogs.com/blog/1644171/202003/1644171-20200314113216303-1855558245.png" alt="img"></p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key</span><br></pre></td></tr></table></figure><ul><li><p>左连接：</p><p><img src="https://img2020.cnblogs.com/blog/1644171/202003/1644171-20200314113234405-815784414.png" alt="img"></p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key</span><br></pre></td></tr></table></figure><ul><li><p>右连接：</p><p><img src="https://img2020.cnblogs.com/blog/1644171/202003/1644171-20200314113253725-21215708.png" alt="img"></p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key</span><br></pre></td></tr></table></figure><ul><li><p>只有A</p><p><img src="https://img2020.cnblogs.com/blog/1644171/202003/1644171-20200314113312810-147549149.png" alt="img"></p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key </span><br><span class="line"><span class="keyword">WHERE</span> B.Key <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><ul><li><p>只有B</p><p><img src="https://img2020.cnblogs.com/blog/1644171/202003/1644171-20200314113326926-809857505.png" alt="img"></p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key </span><br><span class="line"><span class="keyword">WHERE</span> A.Key <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><ul><li><p>全连接</p><p><img src="https://img2020.cnblogs.com/blog/1644171/202003/1644171-20200314113341307-1038369745.png" alt="img"></p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># MySQL没有<span class="keyword">FULL</span> <span class="keyword">OUTER</span>语法。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key;</span><br></pre></td></tr></table></figure><ul><li><p>A，B各自独有：</p><p><img src="https://img2020.cnblogs.com/blog/1644171/202003/1644171-20200314113354860-664991060.png" alt="img"><br> ​</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># MySQL没有<span class="keyword">FULL</span> <span class="keyword">OUTER</span>语法。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key</span><br><span class="line"><span class="keyword">WHERE</span> B.Key <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> TableA A </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B </span><br><span class="line"><span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key </span><br><span class="line"><span class="keyword">WHERE</span> A.Key <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自己的表和自己的表连接。</p><p>核心：<strong>一张表拆分为两张表使用</strong></p><p>父类：</p><table><thead><tr><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr></tbody></table><p>子类：</p><table><thead><tr><th>pid</th><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>web开发</td></tr><tr><td>5</td><td>7</td><td>ps技术</td></tr></tbody></table><p>操作：查询<u>父类</u>对应<u>子类</u>的关系</p><table><thead><tr><th>父类</th><th>子类</th></tr></thead><tbody><tr><td>软件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>web开发</td></tr><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>美术设计</td><td>ps技术</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `category`(</span><br><span class="line">`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT&#x27;主题id&#x27;,</span><br><span class="line">`pid` INT(10) NOT NULL COMMENT&#x27;父id&#x27;,</span><br><span class="line">`categoryName` VARCHAR(50) NOT NULL COMMENT &#x27;父类名字&#x27;,</span><br><span class="line">PRIMARY KEY (`categoryid`)</span><br><span class="line">)ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `category` (`categoryid`,`pid`,`categoryName`)</span><br><span class="line">VALUES (&#x27;2&#x27;,&#x27;1&#x27;,&#x27;信息技术&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;1&#x27;,&#x27;软件开发&#x27;),</span><br><span class="line">(&#x27;4&#x27;,&#x27;3&#x27;,&#x27;数据库&#x27;),</span><br><span class="line">(&#x27;5&#x27;,&#x27;1&#x27;,&#x27;美术设计&#x27;),</span><br><span class="line">(&#x27;6&#x27;,&#x27;3&#x27;,&#x27;web开发&#x27;),</span><br><span class="line">(&#x27;7&#x27;,&#x27;5&#x27;,&#x27;ps技术&#x27;),</span><br><span class="line">(&#x27;8&#x27;,&#x27;2&#x27;,&#x27;办公信息&#x27;);</span><br><span class="line">SELECT * FROM `category`;</span><br><span class="line"></span><br><span class="line">-- 查询父子信息：把一张表当做两张一模一样的表</span><br><span class="line">SELECT a.`categoryName`AS &#x27;父类&#x27;,b.`categoryName`AS &#x27;子类&#x27;</span><br><span class="line">FROM `category` AS a,`category` AS b</span><br><span class="line">WHERE a.`categoryid` = b.`pid`;</span><br></pre></td></tr></table></figure><h2 id="嵌套查询和连接查询的效率问题"><a href="#嵌套查询和连接查询的效率问题" class="headerlink" title="*嵌套查询和连接查询的效率问题"></a><a href="https://blog.csdn.net/weixin_33955681/article/details/92450563">*嵌套查询和连接查询的效率问题</a></h2><h2 id="4-5、分页和排序"><a href="#4-5、分页和排序" class="headerlink" title="4.5、分页和排序"></a>4.5、分页和排序</h2><h3 id="排序-ORDER-BY"><a href="#排序-ORDER-BY" class="headerlink" title="排序 ORDER BY"></a>排序 ORDER BY</h3><p><strong>语法：ORDER BY (字段名) [DESC]</strong></p><p><strong>作用</strong>：用于根据指定的列对结果集进行排序</p><p><u>默认按照</u><strong>ASC升序</strong>对记录进行排序。<strong>DESC降序</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line">-- 按成绩降序排序</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.subjectno = sub.subjectno</span><br><span class="line">WHERE subjectname=&#x27;数据库结构-1&#x27;</span><br><span class="line">ORDER BY StudentResult DESC</span><br></pre></td></tr></table></figure><h3 id="分页-LIMIT"><a href="#分页-LIMIT" class="headerlink" title="分页 LIMIT"></a>分页 LIMIT</h3><p><strong>语法 ：LIMIT pageNo, pageSize（起始索引，查询条目数）</strong></p><p>起始索引从 0 开始；</p><p>起始索引 &#x3D; （当前页码-1）*每页显示的条数</p><p><img src="C:\Users\Mercury\AppData\Roaming\Typora\typora-user-images\image-20211212114651253.png" alt="image-20211212114651253"></p><p>好处 ：（用户体验:分页，网络传输，查询压力）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 每页显示5条数据</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.subjectno = sub.subjectno</span><br><span class="line">WHERE subjectname=&#x27;数据库结构-1&#x27;</span><br><span class="line">ORDER BY StudentResult DESC , studentno</span><br><span class="line">LIMIT 0,5;</span><br><span class="line"> </span><br><span class="line">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.subjectno = sub.subjectno</span><br><span class="line">WHERE subjectname=&#x27;JAVA第一学年&#x27;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line">LIMIT 0,10</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1.从0开始查询，查询3条数据</span><br><span class="line">select * from stu limit 0,3;</span><br><span class="line">-- 2.每页显示3条数据，查询第1页数据</span><br><span class="line">select * from stu limit 0,3;</span><br><span class="line">-- 3.每页显示3条数据，查询第2页数据</span><br><span class="line">select * from stu limit 1,3;</span><br><span class="line">-- 4.每页显示3条数据，查询第3页数据</span><br><span class="line">select * from stu limit 2,6;</span><br></pre></td></tr></table></figure><h2 id="4-6、子查询（派生表）"><a href="#4-6、子查询（派生表）" class="headerlink" title="4.6、子查询（派生表）"></a>4.6、子查询（派生表）</h2><p>在查询语句中的<u>WHERE条件子句中</u>，又<u>嵌套了另一个查询语句</u>；</p><p>嵌套查询可由多个子查询组成，求解的方式是<strong>由里及外</strong>；</p><p>子查询返回的结果一般都是集合，故而建议使用IN关键字；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 方法二:使用子查询(执行顺序:由里及外)</span><br><span class="line">SELECT studentno,subjectno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE subjectno=(</span><br><span class="line">    SELECT subjectno FROM `subject`</span><br><span class="line">    WHERE subjectname = &#x27;数据库结构-1&#x27;</span><br><span class="line">)</span><br><span class="line">ORDER BY studentresult DESC; -- 排序</span><br></pre></td></tr></table></figure><p><strong>eg:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span><br><span class="line">-- 方法一:使用连接查询</span><br><span class="line">SELECT s.studentno,studentname</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON s.`StudentNo` = r.`StudentNo`</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON sub.`SubjectNo` = r.`SubjectNo`</span><br><span class="line">WHERE subjectname = &#x27;高等数学-2&#x27; AND StudentResult&gt;=80</span><br><span class="line"> </span><br><span class="line">-- 方法二:使用连接查询+子查询</span><br><span class="line">-- 分数不小于80分的学生的学号和姓名</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.`StudentNo`=r.`StudentNo`</span><br><span class="line">WHERE StudentResult&gt;=80</span><br><span class="line"> </span><br><span class="line">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.`StudentNo`=r.`StudentNo`</span><br><span class="line">WHERE StudentResult&gt;=80 AND subjectno=(</span><br><span class="line">    SELECT subjectno FROM `subject`</span><br><span class="line">    WHERE subjectname = &#x27;高等数学-2&#x27;</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">-- 方法三:使用子查询</span><br><span class="line">-- 分步写简单sql语句,然后将其嵌套起来</span><br><span class="line">SELECT studentno,studentname FROM student WHERE studentno IN(</span><br><span class="line">    SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(</span><br><span class="line">        SELECT subjectno FROM `subject` WHERE subjectname = &#x27;高等数学-2&#x27;</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-7、分组过滤"><a href="#4-7、分组过滤" class="headerlink" title="4.7、分组过滤"></a>4.7、分组过滤</h2><p>语法：HAVING 条件（用法和WHERE一样，并且能使用<u>聚合函数</u>）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询不同课程的平均分,最高分,最低分</span><br><span class="line">-- 前提:根据不同的课程进行分组</span><br><span class="line"></span><br><span class="line">SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分</span><br><span class="line">FROM result AS r</span><br><span class="line">INNER JOIN `subject` AS s</span><br><span class="line">ON r.subjectno = s.subjectno</span><br><span class="line">GROUP BY r.subjectno</span><br><span class="line">HAVING 平均分&gt;80;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">where写在group by前面.</span><br><span class="line">要是放在分组后面的筛选</span><br><span class="line">要使用HAVING..</span><br><span class="line">因为having是从前面筛选的字段再筛选，而where是从数据表中的字段直接进行的筛选的</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong>WHERE和HAVING的区别：</strong></p><ul><li><strong>“Where” 是一个约束声明</strong>，使用Where来约束来之<a href="http://lib.csdn.net/base/mysql">数据库</a>的数据，Where是在结果返回之前起作用的，且Where中<strong>不能使用聚合</strong>函数。</li><li><strong>“Having”是一个过滤声明</strong>，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中<strong>可以使用聚合函数。</strong></li></ul><blockquote><p>HAVING只能配合GROUP BY使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[GROUP BY ...]  -- 指定结果按照哪几个字段来分组</span><br><span class="line">[HAVING]  -- 过滤分组的记录必须满足的次要条件</span><br></pre></td></tr></table></figure><h1 id="五、MySQL函数"><a href="#五、MySQL函数" class="headerlink" title="五、MySQL函数"></a>五、MySQL函数</h1><h2 id="5-1、常用函数"><a href="#5-1、常用函数" class="headerlink" title="5.1、常用函数"></a>5.1、常用函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ABS(-8);  /*绝对值*/</span><br><span class="line">-- 8</span><br><span class="line">SELECT CEILING(9.4); /*向上取整*/</span><br><span class="line">-- 10</span><br><span class="line">SELECT FLOOR(9.4);   /*向下取整*/</span><br><span class="line">-- 9</span><br><span class="line">SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/</span><br><span class="line">-- 0.3626625960345032</span><br><span class="line">SELECT SIGN(-8); /*符号函数: 负数返回-1,正数返回1,0返回0*/</span><br><span class="line">-- -1</span><br></pre></td></tr></table></figure><h2 id="5-2、字符串函数"><a href="#5-2、字符串函数" class="headerlink" title="5.2、字符串函数"></a>5.2、字符串函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CHAR_LENGTH(&#x27;狂神说坚持就能成功&#x27;); /*返回字符串包含的字符数*/</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(&#x27;我&#x27;,&#x27;爱&#x27;,&#x27;程序&#x27;);  /*合并字符串,参数可以有多个*/</span><br><span class="line"></span><br><span class="line">SELECT INSERT(&#x27;我爱编程helloworld&#x27;,1,2,&#x27;超级热爱&#x27;);  /*替换字符串,从某个位置开始替换某个长度*/</span><br><span class="line"></span><br><span class="line">SELECT LOWER(&#x27;KuangShen&#x27;); /*小写*/</span><br><span class="line"></span><br><span class="line">SELECT UPPER(&#x27;KuangShen&#x27;); /*大写*/</span><br><span class="line"></span><br><span class="line">SELECT LEFT(&#x27;hello,world&#x27;,5);   /*从左边截取*/</span><br><span class="line"></span><br><span class="line">SELECT RIGHT(&#x27;hello,world&#x27;,5);  /*从右边截取*/</span><br><span class="line"></span><br><span class="line">SELECT REPLACE(&#x27;狂神说坚持就能成功&#x27;,&#x27;坚持&#x27;,&#x27;努力&#x27;);  /*替换字符串*/</span><br><span class="line"></span><br><span class="line">SELECT SUBSTR(&#x27;狂神说坚持就能成功&#x27;,4,6); /*截取字符串,开始和长度*/</span><br><span class="line"></span><br><span class="line">SELECT REVERSE(&#x27;狂神说坚持就能成功&#x27;); /*反转</span><br><span class="line"></span><br><span class="line">-- 查询姓周的同学,改成邹</span><br><span class="line">SELECT REPLACE(studentname,&#x27;周&#x27;,&#x27;邹&#x27;) AS 新名字</span><br><span class="line">FROM student WHERE studentname LIKE &#x27;周%&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 时间和日期函数（记住）</span><br><span class="line">SELECT CURRENT_DATE() -- 获取当前日期</span><br><span class="line">SELECT CURDATE()      -- 获取当前日期</span><br><span class="line">SELECT NOW() -- 获取当前时间</span><br><span class="line">SELECT LOCALTIME() -- 获取本地时间</span><br><span class="line">SELECT SYSDATE() -- 系统时间</span><br><span class="line"></span><br><span class="line">SELECT YEAR(NOW())</span><br><span class="line">SELECT MONTH(NOW())</span><br><span class="line">SELECT DAY(NOW())</span><br><span class="line">SELECT HOUR(LOCALTIME())</span><br><span class="line">SELECT MINUTE(SYSDATE())</span><br><span class="line">SELECT SECOND(NOW())</span><br><span class="line"></span><br><span class="line">-- 系统</span><br><span class="line">SELECT SYSTEM_USER() -- 系统用户</span><br><span class="line">SELECT USER()</span><br><span class="line">SELECT VERSION() -- 系统版本</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的<strong>记录总数</strong>，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的<strong>总和</strong>。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的<strong>平均值</strong></td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回<strong>最大的值</strong>。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回<strong>最小的值</strong>。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 聚合函数</span><br><span class="line">/*COUNT:非空的*/</span><br><span class="line">SELECT COUNT(studentname) FROM student;</span><br><span class="line">SELECT COUNT(*) FROM student;</span><br><span class="line">SELECT COUNT(1) FROM student;  /*推荐*/</span><br><span class="line"></span><br><span class="line">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span><br><span class="line">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span><br><span class="line">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span><br><span class="line">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span><br><span class="line">/*</span><br><span class="line">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span><br><span class="line"></span><br><span class="line">下面它们之间的一些对比：</span><br><span class="line"></span><br><span class="line">1）在表没有主键时，count(1)比count(*)快</span><br><span class="line">2）有主键时，主键作为计算条件，count(主键)效率最高；</span><br><span class="line">3）若表格只有一个字段，则count(*)效率较高。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT SUM(StudentResult) AS 总和 FROM result;</span><br><span class="line">SELECT AVG(StudentResult) AS 平均分 FROM result;</span><br><span class="line">SELECT MAX(StudentResult) AS 最高分 FROM result;</span><br></pre></td></tr></table></figure><h2 id="5-3、数据库级别的MD5加密（扩展）"><a href="#5-3、数据库级别的MD5加密（扩展）" class="headerlink" title="5.3、数据库级别的MD5加密（扩展）"></a>5.3、数据库级别的MD5加密（扩展）</h2><p><strong>MD5消息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8">密码散列函数</a>，可以产生出一个128位（16个字符(BYTES)）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家<a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E7%BA%B3%E5%BE%B7%C2%B7%E6%9D%8E%E7%BB%B4%E6%96%AF%E7%89%B9">罗纳德·李维斯特</a>（Ronald Linn Rivest）设计，于1992年公开，用以取代<a href="https://zh.wikipedia.org/wiki/MD4">MD4</a>算法。这套算法的程序在 <a href="https://tools.ietf.org/html/rfc1321">RFC 1321</a> 中被加以规范。</p><p>将<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE">数据</a>（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。</p><p>1996年后被证实存在弱点，可以被加以<a href="https://zh.wikipedia.org/wiki/%E7%A0%B4%E8%A7%A3">破解</a>，对于需要高度安全性的资料，专家一般建议改用其他算法，如<a href="https://zh.wikipedia.org/wiki/SHA-2">SHA-2</a>。2004年，证实MD5算法无法防止<a href="https://zh.wikipedia.org/w/index.php?title=%E7%A2%B0%E6%92%9E%E6%94%BB%E5%87%BB&action=edit&redlink=1">碰撞攻击</a>，因此不适用于安全性认证，如<a href="https://zh.wikipedia.org/wiki/SSL">SSL</a><a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89">公开密钥认证</a>或是<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0">数字签名</a>等用途。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  -- =============== 测试MD5 ===================</span><br><span class="line">CREATE TABLE `testMD5`(</span><br><span class="line"> `id` INT(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line"> `name` VARCHAR(20) NOT NULL,</span><br><span class="line"> `pwd` VARCHAR(50) NOT NULL,</span><br><span class="line"> PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE = INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- 明文密码</span><br><span class="line">INSERT `testMD5` VALUES(1,&#x27;xiaoming&#x27;,&#x27;123456&#x27;),(2,&#x27;zhangsan&#x27;,&#x27;123456&#x27;),(3,&#x27;chuanshanjia&#x27;,&#x27;123456&#x27;);</span><br><span class="line"></span><br><span class="line">-- MD5加密</span><br><span class="line">UPDATE `testMD5` SET `pwd`=MD5(`pwd`) WHERE `id`=1;</span><br><span class="line">UPDATE `testMD5` SET `pwd`=MD5(MD5(`pwd`)) WHERE `id`!=1;</span><br></pre></td></tr></table></figure><h1 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h1><p><strong>事务</strong>:</p><p>事务就是将一组SQL语句放在同一批次内去执行</p><p>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</p><p>MySQL事务处理只支持InnoDB和BDB数据表类型</p><h2 id="6-1、事务的ACID原则"><a href="#6-1、事务的ACID原则" class="headerlink" title="6.1、事务的ACID原则"></a>6.1、事务的ACID原则</h2><ul><li><p><strong>原子性(Atomic)</strong></p><p><u>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节</u>。</p><p>事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p><strong>一致性(Consist)</strong></p><p>一个事务可以封装状态改变（除非它是一个只读的）。<u>事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。</u></p><p>eg：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</p></li><li><p><strong>隔离性(Isolated)</strong></p><p><u>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。</u></p><p>如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为<u>串行化</u>，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</p></li><li><p><strong>持久性(Durable)</strong></p><p><u>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</u></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- ============== 事务 ===============</span><br><span class="line">-- 使用set语句来改变自动提交模式</span><br><span class="line">SET autocommit = 0;   /*关闭*/</span><br><span class="line">SET autocommit = 1;   /*开启（默认）*/</span><br><span class="line">-- 注意:</span><br><span class="line">--  1.MySQL中默认是自动提交 </span><br><span class="line">--  2.使用事务时应先关闭自动提交</span><br><span class="line"> </span><br><span class="line">-- 事务开启</span><br><span class="line">START TRANSACTION -- 这之后的sql都在同一个事务之内</span><br><span class="line"> </span><br><span class="line">-- 提交：持久化（事务提交成功）</span><br><span class="line">COMMIT</span><br><span class="line"> </span><br><span class="line">-- 回滚：回到初始状态（事务提交失败）</span><br><span class="line">ROLLBACK</span><br><span class="line"> </span><br><span class="line">-- 事务结束</span><br><span class="line">SET autocommit =1; -- 开启自动提交</span><br><span class="line"> </span><br><span class="line">-- 保存点</span><br><span class="line">SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br></pre></td></tr></table></figure><blockquote><p>课堂测试题目</p><p>A在线买一款价格为500元商品,网上银行转账.</p><p>A的银行卡余额为2000,然后给商家B支付500.</p><p>商家B一开始的银行卡余额为10000</p><p>创建数据库shop和创建表account并插入2条数据</p></blockquote><h2 id="6-2、事务的隔离级别（了解）"><a href="#6-2、事务的隔离级别（了解）" class="headerlink" title="6.2、事务的隔离级别（了解）"></a>6.2、事务的隔离级别（了解）</h2><p><img src="C:\Users\Mercury\AppData\Roaming\Typora\typora-user-images\image-20211212163734863.png" alt="image-20211212163734863"></p><h1 id="七、索引"><a href="#七、索引" class="headerlink" title="七、索引"></a>七、索引</h1><h2 id="MySQL索引背后的数据结构及算法原理"><a href="#MySQL索引背后的数据结构及算法原理" class="headerlink" title="MySQL索引背后的数据结构及算法原理"></a><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></h2><blockquote><p>MySQL官方对索引的定义为：<strong>索引（Index）是帮助MySQL高效获取数据的数据结构。</strong></p><p>提取句子主干，就可以得到<strong>索引的本质：</strong>索引是<strong>数据结构</strong>。</p></blockquote><h2 id="7-1、索引的分类"><a href="#7-1、索引的分类" class="headerlink" title="7.1、索引的分类"></a>7.1、索引的分类</h2><ul><li><p>主键索引 (<strong>Primary Key</strong>)</p><ul><li>主键：某一个属性组能唯一标识一条记录</li><li>特点 :<ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul></li></ul></li><li><p>唯一索引 (<strong>Unique</strong>)</p><ul><li><p>避免同一个表中某数据列中的值重复</p></li><li><p>与主键索引的区别：</p><ul><li>主键索引只能有一个</li><li>唯一索引<u>可能有多个</u></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `Grade`(</span><br><span class="line">    `GradeID` INT(11) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">    `GradeName` VARCHAR(32) NOT NULL UNIQUE</span><br><span class="line">    -- 或 UNIQUE KEY `GradeID` (`GradeID`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>常规索引 (<strong>Index、key</strong>)</p><ul><li><p>默认的索引，用于快速定位特定数据</p></li><li><p>注意：</p><ul><li>index和key关键字都可以设置常规索引</li><li>应加载查询条件的字段</li><li>不宜添加太多常规索引，影响数据的插入、删除和修改操作</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `result`(</span><br><span class="line">    -- 省略一些代码</span><br><span class="line">    INDEX `ind` (`studentNo`,`subjectNo`) -- 创建表时添加</span><br><span class="line">    -- 或者</span><br><span class="line">    KEY `ind` (`studentNo`,`subjectNo`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建后添加</span><br><span class="line">ALTER TABLE `result` ADD INDEX `ind`(`studentNo`,`subjectNo`);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>全文索引 (<strong>FullText</strong>)</p><ul><li><p>只能用于CHAR , VARCHAR , TEXT数据列类型</p></li><li><p>适合<strong>大型数据集</strong></p></li><li><p>MySQL <strong>5.6 以前</strong>的版本，只有 MyISAM 存储引擎支持全文索引；<br>MySQL <strong>5.6 及以后</strong>的版本，<strong>MyISAM 和 InnoDB 存储引擎均支持全文索引</strong>;<br>只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。<br>测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*增加全文索引*/</span><br><span class="line">ALTER TABLE `school`.`student` ADD FULLTEXT INDEX `studentname` (`StudentName`);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="添加索引的三种方法"><a href="#添加索引的三种方法" class="headerlink" title="添加索引的三种方法"></a>添加索引的三种方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">#方法一：创建表时</span><br><span class="line">    　　CREATE TABLE 表名 (</span><br><span class="line">                字段名1  数据类型 [完整性约束条件…],</span><br><span class="line">                字段名2  数据类型 [完整性约束条件…],</span><br><span class="line">                [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">                [索引名]  (字段名[(长度)]  [ASC |DESC])</span><br><span class="line">                );</span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">        CREATE  [UNIQUE | FULLTEXT | SPATIAL ]  INDEX  索引名</span><br><span class="line">                     ON 表名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">        ALTER TABLE 表名 ADD  [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                             索引名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line">                            </span><br><span class="line">                            </span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br><span class="line">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span><br><span class="line">#显示索引信息: SHOW INDEX FROM student;</span><br><span class="line">*/</span><br><span class="line"> </span><br><span class="line">/*增加全文索引*/</span><br><span class="line">ALTER TABLE `school`.`student` ADD FULLTEXT INDEX `studentname` (`StudentName`);</span><br><span class="line"> </span><br><span class="line">/*EXPLAIN : 分析SQL语句执行性能*/</span><br><span class="line">EXPLAIN SELECT * FROM student WHERE studentno=&#x27;1000&#x27;;</span><br><span class="line"> </span><br><span class="line">/*使用全文索引*/</span><br><span class="line">-- 全文搜索通过 MATCH() 函数完成。</span><br><span class="line">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span><br><span class="line">EXPLAIN SELECT *FROM student WHERE MATCH(studentname) AGAINST(&#x27;love&#x27;);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="7-2、测试索引"><a href="#7-2、测试索引" class="headerlink" title="7.2、测试索引"></a>7.2、测试索引</h2><p><a href="https://blog.csdn.net/qq_33369905/article/details/105911814">批量插入数据100w，索引效率测试</a></p><p><font color='red'>索引在小数据量的时候用处不大，处理大数据时效率提升明显</font></p><h2 id="7-3、索引原则"><a href="#7-3、索引原则" class="headerlink" title="7.3、索引原则"></a>7.3、索引原则</h2><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ul><h3 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h3><p>– 我们可以在创建上述索引的时候，为其指定索引类型，分两类<br>hash类型的索引：查询单条快，范围查询慢<br>btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</p><p>– 不同的存储引擎支持的索引类型也不一样<br>InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；<br>MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；<br>Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；<br>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；<br>Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</p><h1 id="八、权限管理和备份"><a href="#八、权限管理和备份" class="headerlink" title="八、权限管理和备份"></a>八、权限管理和备份</h1><h2 id="8-1、用户管理"><a href="#8-1、用户管理" class="headerlink" title="8.1、用户管理"></a>8.1、用户管理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 用户和权限管理 */ ------------------</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"> </span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES</span><br><span class="line"> </span><br><span class="line">-- 创建用户  CREATE USER kuangshen IDENTIFIED BY &#x27;123456&#x27;</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;</span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"> </span><br><span class="line">-- 重命名用户  RENAME USER 旧名字 TO 新名字</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line"> </span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD = PASSWORD(&#x27;密码&#x27;)    -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;)    -- 为指定用户设置密码</span><br><span class="line"> </span><br><span class="line">-- 删除用户  DROP USER kuangshen2</span><br><span class="line">DROP USER 用户名</span><br><span class="line"> </span><br><span class="line">-- 用户授权 ALL PRIVILEGES 全部的权限， 库.表</span><br><span class="line"> </span><br><span class="line">-- 查看权限   SHOW GRANTS FOR root@localhost;</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line"></span><br><span class="line">-- 查看当前用户权限</span><br><span class="line">SHOW GRANTS;</span><br><span class="line">SHOW GRANTS FOR CURRENT_USER; </span><br><span class="line">SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line"> </span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名    -- 撤销所有权限</span><br></pre></td></tr></table></figure><h2 id="8-2、MySQL备份"><a href="#8-2、MySQL备份" class="headerlink" title="8.2、MySQL备份"></a>8.2、MySQL备份</h2><p>为什么要备份：</p><ul><li>保证重要数据不丢失</li><li>数据专转移</li></ul><p>MySQL数据库备份方法</p><ul><li><p>数据库管理工具,如SQLyog</p></li><li><p>直接拷贝数据库文件和相关配置文件</p></li><li><p>使用命令行导出：mysqldump 命令行使用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出</span></span><br><span class="line"><span class="comment"># mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span></span><br><span class="line">1. 导出一张表： mysqldump -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span></span><br><span class="line">2. 导出多张表： mysqldump -uroot -p123456 school student result &gt;D:/a.sql</span><br><span class="line">　　</span><br><span class="line"><span class="comment"># mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span></span><br><span class="line">3. 导出所有表： mysqldump -uroot -p123456 school &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/a.sql)</span></span><br><span class="line">4. 导出一个库： mysqldump -uroot -p123456 -B school &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以-w携带备份条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="comment"># 在登录mysql的情况下：source D:/a.sql</span></span><br><span class="line">　　<span class="built_in">source</span>  备份文件</span><br><span class="line"><span class="comment"># 在不登录的情况下</span></span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure></li></ul><h1 id="九、规范数据库设计"><a href="#九、规范数据库设计" class="headerlink" title="九、规范数据库设计"></a>九、规范数据库设计</h1><h2 id="9-1、为什么需要数据库设计："><a href="#9-1、为什么需要数据库设计：" class="headerlink" title="9.1、为什么需要数据库设计："></a>9.1、为什么需要数据库设计：</h2><p>当数据库比较复杂时我们需要设计数据库</p><p>糟糕的数据库设计 :</p><p>​数据冗余,存储空间浪费</p><p>​数据更新和插入的异常</p><p>​程序性能差</p><p>良好的数据库设计 :</p><p>​节省数据的存储空间</p><p>​能够保证数据的完整性</p><p>​方便进行数据库应用系统的开发</p><h2 id="9-2、软件项目开发周期中数据库设计"><a href="#9-2、软件项目开发周期中数据库设计" class="headerlink" title="9.2、软件项目开发周期中数据库设计 :"></a>9.2、软件项目开发周期中数据库设计 :</h2><ol><li>需求分析阶段: 分析客户的业务和数据处理需求</li><li>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</li></ol><h2 id="9-3、设计数据库步骤"><a href="#9-3、设计数据库步骤" class="headerlink" title="9.3、设计数据库步骤"></a>9.3、设计数据库步骤</h2><ol><li>收集信息</li></ol><p>​与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</p><ol start="2"><li>标识实体[Entity]</li></ol><p>​标识数据库要管理的关键对象或实体,实体一般是名词</p><p>​标识每个实体需要存储的详细信息[Attribute]</p><p>​标识实体之间的关系[Relationship]</p><h2 id="9-4、三大范式"><a href="#9-4、三大范式" class="headerlink" title="9.4、三大范式"></a>9.4、三大范式</h2><p>问题 : 为什么需要数据规范化?</p><p>不合规范的表设计会导致的问题：</p><p>信息重复<br>更新异常<br>插入异常<br>无法正确表示信息<br>删除异常<br>丢失有效信息三大范式</p><p>第一范式 (1st NF)<br>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式<br>第二范式(2nd NF)<br>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。<br>第二范式要求每个表只描述一件事情<br>第三范式(3rd NF)<br>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.<br>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。<br>规范化和性能的关系<br>为满足某种商业目标 , 数据库性能比规范化数据库更重要<br>在数据规范化的同时 , 要综合考虑数据库的性能<br>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间<br>通过在给定的表中插入计算列,以方便查询</p><h1 id="十、JDBC（重点）"><a href="#十、JDBC（重点）" class="headerlink" title="十、JDBC（重点）"></a>十、JDBC（重点）</h1><p><strong>定义：</strong>JDBC就是使用Java语言操作数据库的一套API</p><p><strong>使用案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//2.获取连接对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">Connection conn - DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//3.定义SQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where id = 1&quot;</span>;</span><br><span class="line"><span class="comment">//4.获取执行sql的对象</span></span><br><span class="line"><span class="type">Staement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">//5.执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//6.处理结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//7.释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>。。。</p><h1 id="拓展：E-R图"><a href="#拓展：E-R图" class="headerlink" title="拓展：E-R图"></a>拓展：E-R图</h1><p><strong>ER图设计：</strong></p><ul><li><strong>实体</strong>用<u>矩形</u>表示 eg：User</li><li><strong>属性</strong>用<u>椭圆</u>表示 eg：姓名</li><li><strong>关系</strong>用<u>菱形</u>表示 eg: 选课<blockquote><p>一个实体对应一个表</p><p>一个属性对应一个关键字</p></blockquote></li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/9d82d158ccbf6c81eb12262cbc3eb13532fa40c8?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、初识MySQL&quot;&gt;&lt;a href=&quot;#1、初识MySQL&quot; class=&quot;headerlink&quot; title=&quot;1、初识MySQL&quot;&gt;&lt;/a&gt;1、初识MySQL&lt;/h1&gt;&lt;h2 id=&quot;1-1、什么是数据库&quot;&gt;&lt;a href=&quot;#1-1、什么是数据库&quot; cla</summary>
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
    <category term="自学笔记" scheme="http://example.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/28/hello-world/"/>
    <id>http://example.com/2022/10/28/hello-world/</id>
    <published>2022-10-28T08:20:19.883Z</published>
    <updated>2022-10-28T08:20:19.883Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
